{
  "address": "0xbe54255d4b1FcBA9A2D990ab507334A1AD34587F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "premiumFractionLong",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "premiumFractionShort",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "insuranceFundPnl",
          "type": "int256"
        }
      ],
      "name": "FundingPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "name": "MarginChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangedPositionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "positionSizeAfter",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "unrealizedPnlAfter",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "markPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedPositionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedPositionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceFundProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserveBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserveBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserveAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserveAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "repegPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repegDebt",
          "type": "uint256"
        }
      ],
      "name": "Repeg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bot",
          "type": "address"
        }
      ],
      "name": "RepegBotSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_addedMargin",
          "type": "tuple"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cumulativePremiumFractionLong",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cumulativePremiumFractionShort",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRateDeltaCapRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "getLatestCumulativePremiumFraction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "latestCumulativePremiumFractionLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "latestCumulativePremiumFractionShort",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getMarginRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "size",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "margin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "openNotional",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "lastUpdatedCumulativePremiumFractionLong",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "lastUpdatedCumulativePremiumFractionShort",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ClearingHouse.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "enum ClearingHouse.PnlCalcOption",
          "name": "_pnlCalcOption",
          "type": "uint8"
        }
      ],
      "name": "getPositionNotionalAndUnrealizedPnl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "positionNotional",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "unrealizedPnl",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInsuranceFund",
          "name": "_insuranceFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateDeltaCapRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFund",
      "outputs": [
        {
          "internalType": "contract IInsuranceFund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "openInterestNotionalMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "enum ClearingHouse.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_leverage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_partialCloseRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "partialClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionMap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "size",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "margin",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "openNotional",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "lastUpdatedCumulativePremiumFractionLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "lastUpdatedCumulativePremiumFractionShort",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_removedMargin",
          "type": "tuple"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "repegBots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_multiplier",
          "type": "tuple"
        }
      ],
      "name": "repegLiquidityDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "repegPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repegBot",
          "type": "address"
        }
      ],
      "name": "setRepegBot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "settleFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tollMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPositionSizeMap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "netPositionSize",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "positionSizeLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "positionSizeShort",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0ab1e7e9993cdd7cac17613226d19f75b6fd3068564e6edffa118c51e599da4",
  "receipt": {
    "to": null,
    "from": "0x9be0C47924bBCaFAB9a84fB3D894D0c742cab3EE",
    "contractAddress": "0xbe54255d4b1FcBA9A2D990ab507334A1AD34587F",
    "transactionIndex": 13,
    "gasUsed": "5116126",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000100000000800000000000000000000200000000000000000000000000000000000000000100000",
    "blockHash": "0xfc003e77d16d949915730265f90246513d1dc929b481b58cf8dbacc8ecaaa50c",
    "transactionHash": "0xf0ab1e7e9993cdd7cac17613226d19f75b6fd3068564e6edffa118c51e599da4",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 29758477,
        "transactionHash": "0xf0ab1e7e9993cdd7cac17613226d19f75b6fd3068564e6edffa118c51e599da4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009be0c47924bbcafab9a84fb3d894d0c742cab3ee",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b43a25b264bee00000000000000000000000000000000000000000000000009a4ec500586a252000000000000000000000000000000000000000000001872b3dddf8424890cf80000000000000000000000000000000000000000000000000989a8adaa605664000000000000000000000000000000000000000000001872b3f923267faf58e6",
        "logIndex": 51,
        "blockHash": "0xfc003e77d16d949915730265f90246513d1dc929b481b58cf8dbacc8ecaaa50c"
      }
    ],
    "blockNumber": 29758477,
    "cumulativeGasUsed": "8577870",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c69ce91694fafa3e2985b51488ae5dc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"premiumFractionLong\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"premiumFractionShort\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"insuranceFundPnl\",\"type\":\"int256\"}],\"name\":\"FundingPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"name\":\"MarginChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangedPositionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"positionSizeAfter\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"unrealizedPnlAfter\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedPositionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedPositionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFundProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserveBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserveBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserveAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserveAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"repegPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repegDebt\",\"type\":\"uint256\"}],\"name\":\"Repeg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"RepegBotSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_addedMargin\",\"type\":\"tuple\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativePremiumFractionLong\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativePremiumFractionShort\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRateDeltaCapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"getLatestCumulativePremiumFraction\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"latestCumulativePremiumFractionLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"latestCumulativePremiumFractionShort\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getMarginRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"size\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"margin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"openNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFractionLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFractionShort\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ClearingHouse.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"enum ClearingHouse.PnlCalcOption\",\"name\":\"_pnlCalcOption\",\"type\":\"uint8\"}],\"name\":\"getPositionNotionalAndUnrealizedPnl\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"positionNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"unrealizedPnl\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInsuranceFund\",\"name\":\"_insuranceFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateDeltaCapRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"contract IInsuranceFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"openInterestNotionalMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"enum ClearingHouse.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_leverage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_partialCloseRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"partialClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionMap\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"size\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"margin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"openNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFractionLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFractionShort\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_removedMargin\",\"type\":\"tuple\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repegBots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_multiplier\",\"type\":\"tuple\"}],\"name\":\"repegLiquidityDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"repegPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repegBot\",\"type\":\"address\"}],\"name\":\"setRepegBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"settleFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tollMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPositionSizeMap\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"netPositionSize\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"positionSizeLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"positionSizeShort\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FundingPayment(address,uint256,uint256,int256,int256,int256)\":{\"params\":{\"amm\":\"- amm\",\"indexPrice\":\"- index price on funding\",\"insuranceFundPnl\":\"- insurance fund pnl from funding\",\"markPrice\":\"- mark price on funding\",\"premiumFractionLong\":\"- total premium longs pay (when +ve), receive (when -ve)\",\"premiumFractionShort\":\"- total premium shorts receive (when +ve), pay (when -ve)\"}},\"MarginChanged(address,address,int256,int256)\":{\"params\":{\"amm\":\"- amm address\",\"amount\":\"- amount changed\",\"fundingPayment\":\"- funding payment\",\"trader\":\"- trader address\"}},\"PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)\":{\"params\":{\"amm\":\"- amm\",\"badDebt\":\"- margin cleared by insurance fund (optimally 0)\",\"exchangedPositionNotional\":\"- the position notional exchanged in the trade\",\"exchangedPositionSize\":\"- the position size exchanged in the trade\",\"fee\":\"- trade fee\",\"fundingPayment\":\"- funding payment (+: paid, -: received)\",\"liquidationPenalty\":\"- liquidation fee\",\"margin\":\"- updated margin\",\"markPrice\":\"- updated mark price\",\"positionSizeAfter\":\"- updated position size\",\"realizedPnl\":\"- realized pnl on the trade\",\"trader\":\"- trader\",\"unrealizedPnlAfter\":\"- unrealized pnl remaining after the trade\"}},\"PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"amm\":\"- amm\",\"badDebt\":\"- liquidation fee cleared by insurance fund (optimally 0)\",\"insuranceFundProfit\":\"- insurance fund profit on liquidation\",\"liquidatedPositionNotional\":\"- liquidated position notional\",\"liquidatedPositionSize\":\"- liquidated position size\",\"liquidationReward\":\"- liquidation reward to the liquidator\",\"liquidator\":\"- liquidator\",\"trader\":\"- trader\"}},\"Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)\":{\"params\":{\"amm\":\"- amm address\",\"baseAssetReserveAfter\":\"- base reserve after repeg\",\"baseAssetReserveBefore\":\"- base reserve before repeg\",\"quoteAssetReserveAfter\":\"- quote reserve after repeg\",\"quoteAssetReserveBefore\":\"- quote reserve before repeg\",\"repegDebt\":\"- amount borrowed from insurance fund\",\"repegPnl\":\"- effective pnl incurred on vault positions after repeg\"}}},\"kind\":\"dev\",\"methods\":{\"addMargin(address,(uint256))\":{\"params\":{\"_addedMargin\":\"added margin in 18 digits\",\"_amm\":\"amm address\"}},\"closePosition(address,(uint256))\":{\"params\":{\"_amm\":\"amm address\",\"_quoteAssetAmountLimit\":\"quote asset amount limit in 18 digits (slippage). 0 for any slippage\"}},\"getLatestCumulativePremiumFraction(address)\":{\"params\":{\"_amm\":\"IAmm address\"},\"returns\":{\"latestCumulativePremiumFractionLong\":\"cumulative premium fraction long\",\"latestCumulativePremiumFractionShort\":\"cumulative premium fraction short\"}},\"getMarginRatio(address,address)\":{\"params\":{\"_amm\":\"amm address\",\"_trader\":\"trader address\"},\"returns\":{\"_0\":\"margin ratio in 18 digits\"}},\"getPosition(address,address)\":{\"params\":{\"_amm\":\"IAmm address\",\"_trader\":\"trader address\"},\"returns\":{\"_0\":\"struct Position\"}},\"getPositionNotionalAndUnrealizedPnl(address,address,uint8)\":{\"params\":{\"_amm\":\"amm address\",\"_pnlCalcOption\":\"enum PnlCalcOption, SPOT_PRICE for spot price and ORACLE for oracle price\",\"_trader\":\"trader address\"},\"returns\":{\"positionNotional\":\"position notional\",\"unrealizedPnl\":\"unrealized Pnl\"}},\"liquidate(address,address)\":{\"params\":{\"_amm\":\"amm address\",\"_trader\":\"trader address\"}},\"openPosition(address,uint8,(uint256),(uint256),(uint256))\":{\"params\":{\"_amm\":\"amm address\",\"_baseAssetAmountLimit\":\"base asset amount limit in 18 digits (slippage). 0 for any slippage\",\"_leverage\":\"leverage in 18 digits. Can Not be 0\",\"_quoteAssetAmount\":\"quote asset amount in 18 digits. Can Not be 0\",\"_side\":\"enum Side; BUY for long and SELL for short\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"partialClose(address,(uint256),(uint256))\":{\"params\":{\"_amm\":\"amm address\",\"_partialCloseRatio\":\"% to close\",\"_quoteAssetAmountLimit\":\"quote asset amount limit in 18 digits (slippage). 0 for any slippage\"}},\"pause()\":{\"details\":\"only owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeMargin(address,(uint256))\":{\"params\":{\"_amm\":\"amm address\",\"_removedMargin\":\"removed margin in 18 digits\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repegPrice(address)\":{\"details\":\"only repeg bot can call\",\"params\":{\"_amm\":\"amm address\"}},\"setRepegBot(address,address)\":{\"details\":\"only owner\",\"params\":{\"_amm\":\"amm address\",\"_repegBot\":\"bot address to be set\"}},\"settleFunding(address)\":{\"details\":\"dynamic funding mechanism refer (https://nftperp.notion.site/Technical-Stuff-8e4cb30f08b94aa2a576097a5008df24)\",\"params\":{\"_amm\":\"amm address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"only owner\"}},\"title\":\"Clearing House\",\"version\":1},\"userdoc\":{\"events\":{\"FundingPayment(address,uint256,uint256,int256,int256,int256)\":{\"notice\":\"emitted on funding payments\"},\"MarginChanged(address,address,int256,int256)\":{\"notice\":\"emitted on adding or removing margin\"},\"PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)\":{\"notice\":\"This event is emitted when position is changed\"},\"PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"This event is emitted when position is liquidated\"},\"Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)\":{\"notice\":\"emitted on repeg (convergence event)\"},\"RepegBotSet(address,address)\":{\"notice\":\"emitted on setting repeg bots\"}},\"kind\":\"user\",\"methods\":{\"addMargin(address,(uint256))\":{\"notice\":\"add margin to increase margin ratio\"},\"closePosition(address,(uint256))\":{\"notice\":\"close position\"},\"getLatestCumulativePremiumFraction(address)\":{\"notice\":\"get latest cumulative premium fraction.\"},\"getMarginRatio(address,address)\":{\"notice\":\"get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional\"},\"getPosition(address,address)\":{\"notice\":\"get personal position information\"},\"getPositionNotionalAndUnrealizedPnl(address,address,uint8)\":{\"notice\":\"get position notional and unrealized Pnl without fee expense and funding payment\"},\"liquidate(address,address)\":{\"notice\":\"liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio\"},\"openPosition(address,uint8,(uint256),(uint256),(uint256))\":{\"notice\":\"open a position\"},\"partialClose(address,(uint256),(uint256))\":{\"notice\":\"partially close position\"},\"pause()\":{\"notice\":\"pauses trading\"},\"removeMargin(address,(uint256))\":{\"notice\":\"remove margin to decrease margin ratio\"},\"repegPrice(address)\":{\"notice\":\"repeg mark price to index price\"},\"setRepegBot(address,address)\":{\"notice\":\"set repeg bot\"},\"settleFunding(address)\":{\"notice\":\"settle funding payment\"},\"unpause()\":{\"notice\":\"resumes trading\"}},\"notice\":\"- issues and stores positions of traders - settles all collateral between traders\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHouse.sol\":\"ClearingHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/ClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./utils/SignedDecimal.sol\\\";\\nimport {MixedDecimal} from \\\"./utils/MixedDecimal.sol\\\";\\nimport {DecimalERC20} from \\\"./utils/DecimalERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnerPausableUpgradeable} from \\\"./OwnerPausable.sol\\\";\\nimport {IAmm} from \\\"./interfaces/IAmm.sol\\\";\\nimport {IInsuranceFund} from \\\"./interfaces/IInsuranceFund.sol\\\";\\n\\n/**\\n                                                                              \\n                            ####\\n                        @@@@    @@@@                      \\n                    /@@@            @@@\\\\\\n                @@@@                    @@@@\\n            /@@@                            @@@\\\\\\n        /@@@                                    @@@\\\\\\n    /@@@                                            @@@\\\\\\n ////   ############################################   \\\\\\\\\\\\\\\\\\n \\u2588\\u2580\\u2580\\u2003\\u2588\\u2591\\u2591\\u2003\\u2588\\u2580\\u2580\\u2003\\u2584\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003 \\u2003\\u2588\\u2591\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2591\\u2588\\u2003\\u2588\\u2580\\u2003\\u2588\\u2580\\u2580\\n \\u2588\\u2584\\u2584\\u2003\\u2588\\u2584\\u2584\\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003 \\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2584\\u2588\\u2003\\u2588\\u2588\\u2584                                        \\n#############################################################                                                    \\n            @@   @@       @@   @@       @@   @@\\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n            @@   @@       @@   @@       @@   @@       \\n        ...........................................                                                    \\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n...........................................................\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n */\\n\\n/**\\n * @title Clearing House\\n * @notice\\n * - issues and stores positions of traders\\n * - settles all collateral between traders\\n */\\ncontract ClearingHouse is\\n    DecimalERC20,\\n    OwnerPausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using Decimal for Decimal.decimal;\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using MixedDecimal for SignedDecimal.signedDecimal;\\n\\n    /// @notice BUY = LONG, SELL = SHORT\\n    enum Side {\\n        BUY,\\n        SELL\\n    }\\n\\n    /**\\n     * @title Position\\n     * @notice This struct records position information\\n     * @param size denominated in amm.baseAsset\\n     * @param margin isolated margin (collateral amt)\\n     * @param openNotional the quoteAsset value of the position. the cost of the position\\n     * @param lastUpdatedCumulativePremiumFraction for calculating funding payment, recorded at position update\\n     * @param blockNumber recorded at every position update\\n     */\\n    struct Position {\\n        SignedDecimal.signedDecimal size;\\n        Decimal.decimal margin;\\n        Decimal.decimal openNotional;\\n        SignedDecimal.signedDecimal lastUpdatedCumulativePremiumFractionLong;\\n        SignedDecimal.signedDecimal lastUpdatedCumulativePremiumFractionShort;\\n        uint256 blockNumber;\\n    }\\n\\n    /// @notice records vault position sizes\\n    struct TotalPositionSize {\\n        SignedDecimal.signedDecimal netPositionSize;\\n        Decimal.decimal positionSizeLong;\\n        Decimal.decimal positionSizeShort;\\n    }\\n\\n    /// @notice used for avoiding stack too deep error\\n    struct PositionResp {\\n        Position position;\\n        Decimal.decimal exchangedQuoteAssetAmount;\\n        Decimal.decimal badDebt;\\n        SignedDecimal.signedDecimal exchangedPositionSize;\\n        SignedDecimal.signedDecimal fundingPayment;\\n        SignedDecimal.signedDecimal realizedPnl;\\n        SignedDecimal.signedDecimal marginToVault;\\n        SignedDecimal.signedDecimal unrealizedPnlAfter;\\n    }\\n\\n    /// @notice used for avoiding stack too deep error\\n    struct CalcRemainMarginReturnParams {\\n        SignedDecimal.signedDecimal latestCumulativePremiumFractionLong;\\n        SignedDecimal.signedDecimal latestCumulativePremiumFractionShort;\\n        SignedDecimal.signedDecimal fundingPayment;\\n        Decimal.decimal badDebt;\\n        Decimal.decimal remainingMargin;\\n    }\\n\\n    //\\n    // STATE VARS\\n    //\\n\\n    IInsuranceFund public insuranceFund;\\n    Decimal.decimal public fundingRateDeltaCapRatio;\\n\\n    // key by amm address\\n    mapping(address => mapping(address => Position)) public positionMap;\\n    mapping(address => Decimal.decimal) public openInterestNotionalMap;\\n    mapping(address => TotalPositionSize) public totalPositionSizeMap;\\n    mapping(address => SignedDecimal.signedDecimal[])\\n        public cumulativePremiumFractionLong;\\n    mapping(address => SignedDecimal.signedDecimal[])\\n        public cumulativePremiumFractionShort;\\n    mapping(address => address) public repegBots;\\n\\n    // key by token\\n    mapping(address => Decimal.decimal) public tollMap;\\n\\n    enum PnlCalcOption {\\n        SPOT_PRICE,\\n        ORACLE\\n    }\\n\\n    //\\n    // EVENTS\\n    //\\n\\n    /**\\n     * @notice This event is emitted when position is changed\\n     * @param trader - trader\\n     * @param amm - amm\\n     * @param margin - updated margin\\n     * @param exchangedPositionNotional - the position notional exchanged in the trade\\n     * @param exchangedPositionSize - the position size exchanged in the trade\\n     * @param fee - trade fee\\n     * @param positionSizeAfter - updated position size\\n     * @param realizedPnl - realized pnl on the trade\\n     * @param unrealizedPnlAfter - unrealized pnl remaining after the trade\\n     * @param badDebt - margin cleared by insurance fund (optimally 0)\\n     * @param liquidationPenalty - liquidation fee\\n     * @param markPrice - updated mark price\\n     * @param fundingPayment - funding payment (+: paid, -: received)\\n     */\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed amm,\\n        uint256 margin,\\n        uint256 exchangedPositionNotional,\\n        int256 exchangedPositionSize,\\n        uint256 fee,\\n        int256 positionSizeAfter,\\n        int256 realizedPnl,\\n        int256 unrealizedPnlAfter,\\n        uint256 badDebt,\\n        uint256 liquidationPenalty,\\n        uint256 markPrice,\\n        int256 fundingPayment\\n    );\\n\\n    /**\\n     * @notice This event is emitted when position is liquidated\\n     * @param trader - trader\\n     * @param amm - amm\\n     * @param liquidator - liquidator\\n     * @param liquidatedPositionNotional - liquidated position notional\\n     * @param liquidatedPositionSize - liquidated position size\\n     * @param liquidationReward - liquidation reward to the liquidator\\n     * @param insuranceFundProfit - insurance fund profit on liquidation\\n     * @param badDebt - liquidation fee cleared by insurance fund (optimally 0)\\n     */\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed amm,\\n        address indexed liquidator,\\n        uint256 liquidatedPositionNotional,\\n        uint256 liquidatedPositionSize,\\n        uint256 liquidationReward,\\n        uint256 insuranceFundProfit,\\n        uint256 badDebt\\n    );\\n\\n    /**\\n     * @notice emitted on funding payments\\n     * @param amm - amm\\n     * @param markPrice - mark price on funding\\n     * @param indexPrice - index price on funding\\n     * @param premiumFractionLong - total premium longs pay (when +ve), receive (when -ve)\\n     * @param premiumFractionShort - total premium shorts receive (when +ve), pay (when -ve)\\n     * @param insuranceFundPnl - insurance fund pnl from funding\\n     */\\n    event FundingPayment(\\n        address indexed amm,\\n        uint256 markPrice,\\n        uint256 indexPrice,\\n        int256 premiumFractionLong,\\n        int256 premiumFractionShort,\\n        int256 insuranceFundPnl\\n    );\\n\\n    /**\\n     * @notice emitted on adding or removing margin\\n     * @param trader - trader address\\n     * @param amm - amm address\\n     * @param amount - amount changed\\n     * @param fundingPayment - funding payment\\n     */\\n    event MarginChanged(\\n        address indexed trader,\\n        address indexed amm,\\n        int256 amount,\\n        int256 fundingPayment\\n    );\\n\\n    /**\\n     * @notice emitted on repeg (convergence event)\\n     * @param amm - amm address\\n     * @param quoteAssetReserveBefore - quote reserve before repeg\\n     * @param baseAssetReserveBefore - base reserve before repeg\\n     * @param quoteAssetReserveAfter - quote reserve after repeg\\n     * @param baseAssetReserveAfter - base reserve after repeg\\n     * @param repegPnl - effective pnl incurred on vault positions after repeg\\n     * @param repegDebt - amount borrowed from insurance fund\\n     */\\n    event Repeg(\\n        address indexed amm,\\n        uint256 quoteAssetReserveBefore,\\n        uint256 baseAssetReserveBefore,\\n        uint256 quoteAssetReserveAfter,\\n        uint256 baseAssetReserveAfter,\\n        int256 repegPnl,\\n        uint256 repegDebt\\n    );\\n\\n    /// @notice emitted on setting repeg bots\\n    event RepegBotSet(address indexed amm, address indexed bot);\\n\\n    modifier onlyRepegBot(IAmm _amm) {\\n        address sender = _msgSender();\\n        require(\\n            sender == repegBots[address(_amm)] || sender == owner(),\\n            \\\"not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    //\\n    // EXTERNAL\\n    //\\n\\n    function initialize(\\n        IInsuranceFund _insuranceFund,\\n        uint256 _fundingRateDeltaCapRatio\\n    ) external initializer {\\n        require(address(_insuranceFund) != address(0), \\\"addr(0)\\\");\\n        __OwnerPausable_init();\\n        __ReentrancyGuard_init();\\n\\n        insuranceFund = _insuranceFund;\\n        fundingRateDeltaCapRatio = Decimal.decimal(_fundingRateDeltaCapRatio);\\n    }\\n\\n    /**\\n     * @notice open a position\\n     * @param _amm amm address\\n     * @param _side enum Side; BUY for long and SELL for short\\n     * @param _quoteAssetAmount quote asset amount in 18 digits. Can Not be 0\\n     * @param _leverage leverage in 18 digits. Can Not be 0\\n     * @param _baseAssetAmountLimit base asset amount limit in 18 digits (slippage). 0 for any slippage\\n     */\\n    function openPosition(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit\\n    ) external whenNotPaused nonReentrant {\\n        _requireAmm(_amm);\\n        _requireNonZeroInput(_quoteAssetAmount);\\n        _requireNonZeroInput(_leverage);\\n        _requireMoreMarginRatio(\\n            MixedDecimal.fromDecimal(Decimal.one()).divD(_leverage),\\n            _amm.getRatios().initMarginRatio,\\n            true\\n        );\\n        _requireNonSandwich(_amm);\\n\\n        address trader = _msgSender();\\n        PositionResp memory positionResp;\\n        // add scope for stack too deep error\\n        {\\n            int256 oldPositionSize = getPosition(_amm, trader).size.toInt();\\n            bool isNewPosition = oldPositionSize == 0 ? true : false;\\n\\n            // increase or decrease position depends on old position's side and size\\n            if (\\n                isNewPosition ||\\n                (oldPositionSize > 0 ? Side.BUY : Side.SELL) == _side\\n            ) {\\n                positionResp = _internalIncreasePosition(\\n                    _amm,\\n                    _side,\\n                    _quoteAssetAmount.mulD(_leverage),\\n                    _baseAssetAmountLimit,\\n                    _leverage\\n                );\\n            } else {\\n                positionResp = _openReversePosition(\\n                    _amm,\\n                    _side,\\n                    trader,\\n                    _quoteAssetAmount,\\n                    _leverage,\\n                    _baseAssetAmountLimit,\\n                    false\\n                );\\n            }\\n\\n            // update position\\n            setPosition(_amm, trader, positionResp.position);\\n            // opening opposite exact position size as the existing one == closePosition, can skip the margin ratio check\\n            if (!isNewPosition && positionResp.position.size.toInt() != 0) {\\n                _requireMoreMarginRatio(\\n                    getMarginRatio(_amm, trader),\\n                    _amm.getRatios().maintenanceMarginRatio,\\n                    true\\n                );\\n            }\\n\\n            require(positionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n            // transfer the token between trader and vault\\n            IERC20 quoteToken = _amm.quoteAsset();\\n            if (positionResp.marginToVault.toInt() > 0) {\\n                _transferFrom(\\n                    quoteToken,\\n                    trader,\\n                    address(this),\\n                    positionResp.marginToVault.abs()\\n                );\\n            } else if (positionResp.marginToVault.toInt() < 0) {\\n                _withdraw(quoteToken, trader, positionResp.marginToVault.abs());\\n            }\\n        }\\n\\n        // fees\\n        Decimal.decimal memory fees = _transferFees(\\n            trader,\\n            _amm,\\n            positionResp.exchangedQuoteAssetAmount,\\n            _side,\\n            true\\n        );\\n\\n        // emit event\\n        uint256 markPrice = _amm.getMarkPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt(); // pre-fetch for stack too deep error\\n        emit PositionChanged(\\n            trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            fees.toUint(),\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            0,\\n            markPrice,\\n            fundingPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice close position\\n     * @param _amm amm address\\n     * @param _quoteAssetAmountLimit quote asset amount limit in 18 digits (slippage). 0 for any slippage\\n     */\\n    function closePosition(\\n        IAmm _amm,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) external whenNotPaused nonReentrant {\\n        _requireAmm(_amm);\\n        _requireNonSandwich(_amm);\\n\\n        address trader = _msgSender();\\n        PositionResp memory positionResp;\\n        Position memory position = getPosition(_amm, trader);\\n\\n        // add scope for stack too deep error\\n        {\\n            // closing a long means taking a short\\n            IAmm.Dir dirOfBase = position.size.toInt() > 0\\n                ? IAmm.Dir.ADD_TO_AMM\\n                : IAmm.Dir.REMOVE_FROM_AMM;\\n\\n            IAmm.Ratios memory ratios = _amm.getRatios();\\n\\n            // if trade goes over fluctuation limit, then partial close, else full close\\n            if (\\n                _amm.isOverFluctuationLimit(dirOfBase, position.size.abs()) &&\\n                ratios.partialLiquidationRatio.toUint() != 0\\n            ) {\\n                positionResp = _internalPartialClose(\\n                    _amm,\\n                    trader,\\n                    ratios.partialLiquidationRatio,\\n                    Decimal.zero()\\n                );\\n            } else {\\n                positionResp = _internalClosePosition(\\n                    _amm,\\n                    trader,\\n                    _quoteAssetAmountLimit\\n                );\\n            }\\n\\n            require(positionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n            // transfer the token from trader and vault\\n            IERC20 quoteToken = _amm.quoteAsset();\\n            _withdraw(quoteToken, trader, positionResp.marginToVault.abs());\\n        }\\n\\n        // fees\\n        Decimal.decimal memory fees = _transferFees(\\n            trader,\\n            _amm,\\n            positionResp.exchangedQuoteAssetAmount,\\n            position.size.toInt() > 0 ? Side.SELL : Side.BUY,\\n            false\\n        );\\n\\n        // emit event\\n        uint256 markPrice = _amm.getMarkPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt();\\n        emit PositionChanged(\\n            trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            fees.toUint(),\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            0,\\n            markPrice,\\n            fundingPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice partially close position\\n     * @param _amm amm address\\n     * @param _partialCloseRatio % to close\\n     * @param _quoteAssetAmountLimit quote asset amount limit in 18 digits (slippage). 0 for any slippage\\n     */\\n    function partialClose(\\n        IAmm _amm,\\n        Decimal.decimal memory _partialCloseRatio,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) external whenNotPaused nonReentrant {\\n        _requireAmm(_amm);\\n        _requireNonZeroInput(_partialCloseRatio);\\n        require(_partialCloseRatio.cmp(Decimal.one()) < 0, \\\"not partial close\\\");\\n        _requireNonSandwich(_amm);\\n\\n        address trader = _msgSender();\\n        Position memory position = getPosition(_amm, trader);\\n        SignedDecimal.signedDecimal memory sizeToClose = position.size.mulD(\\n            _partialCloseRatio\\n        );\\n\\n        // if partial close causes price to go over fluctuation limit, trim down to partial liq ratio\\n        Decimal.decimal memory partialLiquidationRatio = _amm\\n            .getRatios()\\n            .partialLiquidationRatio;\\n        if (\\n            _amm.isOverFluctuationLimit(\\n                position.size.toInt() > 0\\n                    ? IAmm.Dir.ADD_TO_AMM\\n                    : IAmm.Dir.REMOVE_FROM_AMM,\\n                sizeToClose.abs()\\n            ) &&\\n            partialLiquidationRatio.toUint() != 0 &&\\n            _partialCloseRatio.cmp(partialLiquidationRatio) > 0\\n        ) {\\n            _partialCloseRatio = partialLiquidationRatio;\\n        }\\n\\n        PositionResp memory positionResp = _internalPartialClose(\\n            _amm,\\n            trader,\\n            _partialCloseRatio,\\n            _quoteAssetAmountLimit\\n        );\\n\\n        require(positionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n        // transfer the token from trader and vault\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        _withdraw(quoteToken, trader, positionResp.marginToVault.abs());\\n\\n        // fees\\n        Decimal.decimal memory fees = _transferFees(\\n            trader,\\n            _amm,\\n            positionResp.exchangedQuoteAssetAmount,\\n            position.size.toInt() > 0 ? Side.SELL : Side.BUY,\\n            false\\n        );\\n\\n        // emit event\\n        uint256 markPrice = _amm.getMarkPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt();\\n\\n        emit PositionChanged(\\n            trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            fees.toUint(),\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            0,\\n            markPrice,\\n            fundingPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice add margin to increase margin ratio\\n     * @param _amm amm address\\n     * @param _addedMargin added margin in 18 digits\\n     */\\n    function addMargin(\\n        IAmm _amm,\\n        Decimal.decimal calldata _addedMargin\\n    ) external whenNotPaused nonReentrant {\\n        _requireAmm(_amm);\\n        _requireNonZeroInput(_addedMargin);\\n\\n        address trader = _msgSender();\\n        Position memory position = getPosition(_amm, trader);\\n        // update margin\\n        position.margin = position.margin.addD(_addedMargin);\\n\\n        setPosition(_amm, trader, position);\\n        // transfer token from trader\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        _transferFrom(quoteToken, trader, address(this), _addedMargin);\\n        emit MarginChanged(\\n            trader,\\n            address(_amm),\\n            int256(_addedMargin.toUint()),\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice remove margin to decrease margin ratio\\n     * @param _amm amm address\\n     * @param _removedMargin removed margin in 18 digits\\n     */\\n    function removeMargin(\\n        IAmm _amm,\\n        Decimal.decimal calldata _removedMargin\\n    ) external whenNotPaused nonReentrant {\\n        _requireAmm(_amm);\\n        _requireNonZeroInput(_removedMargin);\\n\\n        address trader = _msgSender();\\n        // realize funding payment if there's no bad debt\\n        Position memory position = getPosition(_amm, trader);\\n\\n        // update margin and cumulativePremiumFraction\\n        SignedDecimal.signedDecimal memory marginDelta = MixedDecimal\\n            .fromDecimal(_removedMargin)\\n            .mulScalar(-1);\\n        CalcRemainMarginReturnParams\\n            memory calcRemainMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                _amm,\\n                position,\\n                marginDelta\\n            );\\n        require(calcRemainMarginReturnParams.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n        position.margin = calcRemainMarginReturnParams.remainingMargin;\\n        position\\n            .lastUpdatedCumulativePremiumFractionLong = calcRemainMarginReturnParams\\n            .latestCumulativePremiumFractionLong;\\n        position\\n            .lastUpdatedCumulativePremiumFractionShort = calcRemainMarginReturnParams\\n            .latestCumulativePremiumFractionShort;\\n\\n        // check enough margin\\n        // Use a more conservative way to restrict traders to remove their margin\\n        // We don't allow unrealized PnL to support their margin removal\\n        require(\\n            _calcFreeCollateral(\\n                _amm,\\n                trader,\\n                calcRemainMarginReturnParams.remainingMargin\\n            ).toInt() >= 0,\\n            \\\"free collateral is not enough\\\"\\n        );\\n\\n        // update position\\n        setPosition(_amm, trader, position);\\n\\n        // transfer token back to trader\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        _withdraw(quoteToken, trader, _removedMargin);\\n        emit MarginChanged(\\n            trader,\\n            address(_amm),\\n            marginDelta.toInt(),\\n            calcRemainMarginReturnParams.fundingPayment.toInt()\\n        );\\n    }\\n\\n    /**\\n     * @notice liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio\\n     * @param _amm amm address\\n     * @param _trader trader address\\n     */\\n    function liquidate(IAmm _amm, address _trader) external nonReentrant {\\n        _internalLiquidate(_amm, _trader);\\n    }\\n\\n    /**\\n     * @notice settle funding payment\\n     * @dev dynamic funding mechanism refer (https://nftperp.notion.site/Technical-Stuff-8e4cb30f08b94aa2a576097a5008df24)\\n     * @param _amm amm address\\n     */\\n    function settleFunding(IAmm _amm) external whenNotPaused {\\n        _requireAmm(_amm);\\n\\n        (\\n            SignedDecimal.signedDecimal memory premiumFraction,\\n            Decimal.decimal memory markPrice,\\n            Decimal.decimal memory indexPrice\\n        ) = _amm.settleFunding();\\n\\n        /**\\n         * implement dynamic funding\\n         * premium fraction long = premium fraction * (\\u221a(PSL * PSS) / PSL)\\n         * premium fraction short = premium fraction * (\\u221a(PSL * PSS) / PSS)\\n         * funding rate longs = long premium / index\\n         * funding rate shorts = short premium / index\\n         */\\n\\n        TotalPositionSize memory tps = totalPositionSizeMap[address(_amm)];\\n        Decimal.decimal memory squaredPositionSizeProduct = tps\\n            .positionSizeLong\\n            .mulD(tps.positionSizeShort)\\n            .sqrt();\\n\\n        SignedDecimal.signedDecimal memory premiumFractionLong;\\n        SignedDecimal.signedDecimal memory premiumFractionShort;\\n        SignedDecimal.signedDecimal memory insuranceFundPnl;\\n\\n        // if PSL or PSL is zero, use regular funding\\n        if (squaredPositionSizeProduct.toUint() == 0) {\\n            premiumFractionLong = premiumFraction;\\n            premiumFractionShort = premiumFraction;\\n            insuranceFundPnl = tps.netPositionSize.mulD(premiumFraction);\\n        } else {\\n            premiumFractionLong = premiumFraction.mulD(\\n                squaredPositionSizeProduct.divD(tps.positionSizeLong)\\n            );\\n            premiumFractionShort = premiumFraction.mulD(\\n                squaredPositionSizeProduct.divD(tps.positionSizeShort)\\n            );\\n        }\\n\\n        SignedDecimal.signedDecimal memory fundingRateLong = premiumFractionLong\\n            .divD(indexPrice);\\n        SignedDecimal.signedDecimal\\n            memory fundingRateShort = premiumFractionShort.divD(indexPrice);\\n        Decimal.decimal memory fundingRateDeltaAbs = fundingRateLong\\n            .subD(fundingRateShort)\\n            .abs();\\n\\n        // capped dynamic funding, funding rate of a side is capped if it is more than fundingRateDeltaCapRatio\\n        if (fundingRateDeltaAbs.cmp(fundingRateDeltaCapRatio) <= 0) {\\n            // no capping\\n            _amm.updateFundingRate(\\n                premiumFractionLong,\\n                premiumFractionShort,\\n                indexPrice\\n            );\\n        } else {\\n            // capping\\n            Decimal.decimal memory x = fundingRateDeltaCapRatio.mulD(\\n                indexPrice\\n            ); /** @aster2709: not sure what to call this :p  */\\n\\n            if (premiumFraction.toInt() > 0) {\\n                // longs pay shorts\\n                if (\\n                    premiumFractionLong.toInt() > premiumFractionShort.toInt()\\n                ) {\\n                    // cap long losses, insurnace fund covers beyond cap\\n                    SignedDecimal.signedDecimal\\n                        memory newPremiumFractionLong = premiumFractionShort\\n                            .addD(x);\\n                    SignedDecimal.signedDecimal\\n                        memory coveredPremium = premiumFractionLong.subD(\\n                            newPremiumFractionLong\\n                        );\\n                    insuranceFundPnl = coveredPremium\\n                        .mulD(tps.positionSizeLong)\\n                        .mulScalar(-1);\\n                    premiumFractionLong = newPremiumFractionLong;\\n                } else {\\n                    // cap short profits, insurance fund benefits beyond cap\\n                    SignedDecimal.signedDecimal\\n                        memory newPremiumFractionShort = premiumFractionLong\\n                            .addD(x);\\n                    SignedDecimal.signedDecimal\\n                        memory coveredPremium = premiumFractionShort.subD(\\n                            newPremiumFractionShort\\n                        );\\n                    insuranceFundPnl = coveredPremium.mulD(\\n                        tps.positionSizeShort\\n                    );\\n                    premiumFractionShort = newPremiumFractionShort;\\n                }\\n            } else {\\n                // shorts pay longs\\n                if (\\n                    premiumFractionLong.toInt() < premiumFractionShort.toInt()\\n                ) {\\n                    // cap long profits, insurnace fund benefits beyond cap\\n                    SignedDecimal.signedDecimal\\n                        memory newPremiumFractionLong = premiumFractionShort\\n                            .subD(x);\\n                    SignedDecimal.signedDecimal\\n                        memory coveredPremium = premiumFractionLong.subD(\\n                            newPremiumFractionLong\\n                        );\\n                    insuranceFundPnl = coveredPremium\\n                        .mulD(tps.positionSizeLong)\\n                        .mulScalar(-1);\\n                } else {\\n                    // cap short losses, insurnace fund covers beyond cap\\n                    SignedDecimal.signedDecimal\\n                        memory newPremiumFractionShort = premiumFractionLong\\n                            .subD(x);\\n                    SignedDecimal.signedDecimal\\n                        memory coveredPremium = premiumFractionShort.subD(\\n                            newPremiumFractionShort\\n                        );\\n                    insuranceFundPnl = coveredPremium.mulD(\\n                        tps.positionSizeShort\\n                    );\\n                    premiumFractionShort = newPremiumFractionShort;\\n                }\\n            }\\n            _amm.updateFundingRate(\\n                premiumFractionLong,\\n                premiumFractionShort,\\n                indexPrice\\n            );\\n        }\\n\\n        // update cumulative premium fractions\\n        (\\n            SignedDecimal.signedDecimal\\n                memory latestCumulativePremiumFractionLong,\\n            SignedDecimal.signedDecimal\\n                memory latestCumulativePremiumFractionShort\\n        ) = getLatestCumulativePremiumFraction(_amm);\\n        cumulativePremiumFractionLong[address(_amm)].push(\\n            premiumFractionLong.addD(latestCumulativePremiumFractionLong)\\n        );\\n        cumulativePremiumFractionShort[address(_amm)].push(\\n            premiumFractionShort.addD(latestCumulativePremiumFractionShort)\\n        );\\n\\n        // settle insurance fund pnl\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        if (insuranceFundPnl.toInt() > 0) {\\n            _transferToInsuranceFund(quoteToken, insuranceFundPnl.abs());\\n        } else if (insuranceFundPnl.toInt() < 0) {\\n            insuranceFund.withdraw(quoteToken, insuranceFundPnl.abs());\\n        }\\n        emit FundingPayment(\\n            address(_amm),\\n            markPrice.toUint(),\\n            indexPrice.toUint(),\\n            premiumFractionLong.toInt(),\\n            premiumFractionShort.toInt(),\\n            insuranceFundPnl.toInt()\\n        );\\n    }\\n\\n    /**\\n     * @notice repeg mark price to index price\\n     * @dev only repeg bot can call\\n     * @param _amm amm address\\n     */\\n    function repegPrice(IAmm _amm) external onlyRepegBot(_amm) {\\n        (\\n            Decimal.decimal memory quoteAssetBefore,\\n            Decimal.decimal memory baseAssetBefore,\\n            Decimal.decimal memory quoteAssetAfter,\\n            Decimal.decimal memory baseAssetAfter,\\n            SignedDecimal.signedDecimal memory repegPnl\\n        ) = _amm.repegPrice();\\n        Decimal.decimal memory repegDebt = _settleRepegPnl(_amm, repegPnl);\\n\\n        emit Repeg(\\n            address(_amm),\\n            quoteAssetBefore.toUint(),\\n            baseAssetBefore.toUint(),\\n            quoteAssetAfter.toUint(),\\n            baseAssetAfter.toUint(),\\n            repegPnl.toInt(),\\n            repegDebt.toUint()\\n        );\\n    }\\n\\n    function repegLiquidityDepth(\\n        IAmm _amm,\\n        Decimal.decimal memory _multiplier\\n    ) external onlyRepegBot(_amm) {\\n        (\\n            Decimal.decimal memory quoteAssetBefore,\\n            Decimal.decimal memory baseAssetBefore,\\n            Decimal.decimal memory quoteAssetAfter,\\n            Decimal.decimal memory baseAssetAfter,\\n            SignedDecimal.signedDecimal memory repegPnl\\n        ) = _amm.repegK(_multiplier);\\n        Decimal.decimal memory repegDebt = _settleRepegPnl(_amm, repegPnl);\\n\\n        emit Repeg(\\n            address(_amm),\\n            quoteAssetBefore.toUint(),\\n            baseAssetBefore.toUint(),\\n            quoteAssetAfter.toUint(),\\n            baseAssetAfter.toUint(),\\n            repegPnl.toInt(),\\n            repegDebt.toUint()\\n        );\\n    }\\n\\n    /**\\n     * @notice set repeg bot\\n     * @dev only owner\\n     * @param _amm amm address\\n     * @param _repegBot bot address to be set\\n     */\\n    function setRepegBot(address _amm, address _repegBot) external onlyOwner {\\n        repegBots[_amm] = _repegBot;\\n        emit RepegBotSet(_amm, _repegBot);\\n    }\\n\\n    //\\n    // PUBLIC\\n    //\\n\\n    /**\\n     * @notice get personal position information\\n     * @param _amm IAmm address\\n     * @param _trader trader address\\n     * @return struct Position\\n     */\\n    function getPosition(\\n        IAmm _amm,\\n        address _trader\\n    ) public view returns (Position memory) {\\n        return positionMap[address(_amm)][_trader];\\n    }\\n\\n    /**\\n     * @notice get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional\\n     * @param _amm amm address\\n     * @param _trader trader address\\n     * @return margin ratio in 18 digits\\n     */\\n    function getMarginRatio(\\n        IAmm _amm,\\n        address _trader\\n    ) public view returns (SignedDecimal.signedDecimal memory) {\\n        return\\n            _getMarginRatioByCalcOption(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n    }\\n\\n    /**\\n     * @notice get position notional and unrealized Pnl without fee expense and funding payment\\n     * @param _amm amm address\\n     * @param _trader trader address\\n     * @param _pnlCalcOption enum PnlCalcOption, SPOT_PRICE for spot price and ORACLE for oracle price\\n     * @return positionNotional position notional\\n     * @return unrealizedPnl unrealized Pnl\\n     */\\n    function getPositionNotionalAndUnrealizedPnl(\\n        IAmm _amm,\\n        address _trader,\\n        PnlCalcOption _pnlCalcOption\\n    )\\n        public\\n        view\\n        returns (\\n            Decimal.decimal memory positionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        )\\n    {\\n        Position memory position = getPosition(_amm, _trader);\\n        Decimal.decimal memory positionSizeAbs = position.size.abs();\\n        if (positionSizeAbs.toUint() != 0) {\\n            bool isShortPosition = position.size.toInt() < 0;\\n            IAmm.Dir dir = isShortPosition\\n                ? IAmm.Dir.REMOVE_FROM_AMM\\n                : IAmm.Dir.ADD_TO_AMM;\\n            if (_pnlCalcOption == PnlCalcOption.SPOT_PRICE) {\\n                positionNotional = _amm.getOutputPrice(dir, positionSizeAbs);\\n            } else {\\n                Decimal.decimal memory oraclePrice = _amm.getIndexPrice();\\n                positionNotional = positionSizeAbs.mulD(oraclePrice);\\n            }\\n            // unrealizedPnlForLongPosition = positionNotional - openNotional\\n            // unrealizedPnlForShortPosition = positionNotionalWhenBorrowed - positionNotionalWhenReturned =\\n            // openNotional - positionNotional = unrealizedPnlForLongPosition * -1\\n            unrealizedPnl = isShortPosition\\n                ? MixedDecimal.fromDecimal(position.openNotional).subD(\\n                    positionNotional\\n                )\\n                : MixedDecimal.fromDecimal(positionNotional).subD(\\n                    position.openNotional\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice get latest cumulative premium fraction.\\n     * @param _amm IAmm address\\n     * @return latestCumulativePremiumFractionLong cumulative premium fraction long\\n     * @return latestCumulativePremiumFractionShort cumulative premium fraction short\\n     */\\n    function getLatestCumulativePremiumFraction(\\n        IAmm _amm\\n    )\\n        public\\n        view\\n        returns (\\n            SignedDecimal.signedDecimal\\n                memory latestCumulativePremiumFractionLong,\\n            SignedDecimal.signedDecimal\\n                memory latestCumulativePremiumFractionShort\\n        )\\n    {\\n        address amm = address(_amm);\\n        uint256 lenLong = cumulativePremiumFractionLong[amm].length;\\n        uint256 lenShort = cumulativePremiumFractionShort[amm].length;\\n        if (lenLong > 0) {\\n            latestCumulativePremiumFractionLong = cumulativePremiumFractionLong[\\n                amm\\n            ][lenLong - 1];\\n        }\\n        if (lenShort > 0) {\\n            latestCumulativePremiumFractionShort = cumulativePremiumFractionShort[\\n                amm\\n            ][lenShort - 1];\\n        }\\n    }\\n\\n    //\\n    // INTERNAL\\n    //\\n\\n    function _getMarginRatio(\\n        IAmm _amm,\\n        Position memory _position,\\n        SignedDecimal.signedDecimal memory _unrealizedPnl,\\n        Decimal.decimal memory _positionNotional\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        CalcRemainMarginReturnParams\\n            memory calcRemainMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                _amm,\\n                _position,\\n                _unrealizedPnl\\n            );\\n        return\\n            MixedDecimal\\n                .fromDecimal(calcRemainMarginReturnParams.remainingMargin)\\n                .subD(calcRemainMarginReturnParams.badDebt)\\n                .divD(_positionNotional);\\n    }\\n\\n    // only called from openPosition and _closeAndOpenReversePosition. calling fn needs to ensure there's enough marginRatio\\n    function _internalIncreasePosition(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _openNotional,\\n        Decimal.decimal memory _minPositionSize,\\n        Decimal.decimal memory _leverage\\n    ) internal returns (PositionResp memory positionResp) {\\n        address trader = _msgSender();\\n        Position memory oldPosition = getPosition(_amm, trader);\\n        positionResp.exchangedPositionSize = _swapInput(\\n            _amm,\\n            _side,\\n            _openNotional,\\n            _minPositionSize,\\n            false\\n        );\\n        SignedDecimal.signedDecimal memory newSize = oldPosition.size.addD(\\n            positionResp.exchangedPositionSize\\n        );\\n\\n        _updateOpenInterestNotional(\\n            _amm,\\n            MixedDecimal.fromDecimal(_openNotional)\\n        );\\n        _updateTotalPositionSize(\\n            _amm,\\n            positionResp.exchangedPositionSize,\\n            _side\\n        );\\n\\n        Decimal.decimal memory maxHoldingBaseAsset = _amm\\n            .getMaxHoldingBaseAsset();\\n        if (maxHoldingBaseAsset.toUint() != 0) {\\n            // total position size should be less than `positionUpperBound`\\n            require(\\n                newSize.abs().cmp(maxHoldingBaseAsset) <= 0,\\n                \\\"positionSize cap\\\"\\n            );\\n        }\\n\\n        SignedDecimal.signedDecimal memory marginToAdd = MixedDecimal\\n            .fromDecimal(_openNotional.divD(_leverage));\\n        CalcRemainMarginReturnParams\\n            memory calcRemainMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                _amm,\\n                oldPosition,\\n                marginToAdd\\n            );\\n\\n        (\\n            ,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n\\n        // update positionResp\\n        positionResp.exchangedQuoteAssetAmount = _openNotional;\\n        positionResp.unrealizedPnlAfter = unrealizedPnl;\\n        positionResp.marginToVault = marginToAdd;\\n        positionResp.fundingPayment = calcRemainMarginReturnParams\\n            .fundingPayment;\\n        positionResp.position = Position(\\n            newSize,\\n            calcRemainMarginReturnParams.remainingMargin,\\n            oldPosition.openNotional.addD(\\n                positionResp.exchangedQuoteAssetAmount\\n            ),\\n            calcRemainMarginReturnParams.latestCumulativePremiumFractionLong,\\n            calcRemainMarginReturnParams.latestCumulativePremiumFractionShort,\\n            block.number\\n        );\\n    }\\n\\n    function _openReversePosition(\\n        IAmm _amm,\\n        Side _side,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) internal returns (PositionResp memory) {\\n        Decimal.decimal memory openNotional = _quoteAssetAmount.mulD(_leverage);\\n        (\\n            Decimal.decimal memory oldPositionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n        PositionResp memory positionResp;\\n\\n        // reduce position if old position is larger\\n        if (oldPositionNotional.toUint() > openNotional.toUint()) {\\n            // for reducing oi and tps from respective side\\n\\n            Position memory oldPosition = getPosition(_amm, _trader);\\n            {\\n                positionResp.exchangedPositionSize = _swapInput(\\n                    _amm,\\n                    _side,\\n                    openNotional,\\n                    _baseAssetAmountLimit,\\n                    _canOverFluctuationLimit\\n                );\\n\\n                // realizedPnl = unrealizedPnl * closedRatio\\n                // closedRatio = positionResp.exchangedPositionSize / oldPosition.size\\n                if (oldPosition.size.toInt() != 0) {\\n                    positionResp.realizedPnl = unrealizedPnl\\n                        .mulD(positionResp.exchangedPositionSize.abs())\\n                        .divD(oldPosition.size.abs());\\n                }\\n\\n                CalcRemainMarginReturnParams\\n                    memory calcRemainMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                        _amm,\\n                        oldPosition,\\n                        positionResp.realizedPnl\\n                    );\\n\\n                // positionResp.unrealizedPnlAfter = unrealizedPnl - realizedPnl\\n                positionResp.unrealizedPnlAfter = unrealizedPnl.subD(\\n                    positionResp.realizedPnl\\n                );\\n                positionResp.exchangedQuoteAssetAmount = openNotional;\\n\\n                // calculate openNotional (it's different depends on long or short side)\\n                // long: unrealizedPnl = positionNotional - openNotional => openNotional = positionNotional - unrealizedPnl\\n                // short: unrealizedPnl = openNotional - positionNotional => openNotional = positionNotional + unrealizedPnl\\n                // positionNotional = oldPositionNotional - exchangedQuoteAssetAmount\\n                SignedDecimal.signedDecimal\\n                    memory remainOpenNotional = oldPosition.size.toInt() > 0\\n                        ? MixedDecimal\\n                            .fromDecimal(oldPositionNotional)\\n                            .subD(positionResp.exchangedQuoteAssetAmount)\\n                            .subD(positionResp.unrealizedPnlAfter)\\n                        : positionResp\\n                            .unrealizedPnlAfter\\n                            .addD(oldPositionNotional)\\n                            .subD(positionResp.exchangedQuoteAssetAmount);\\n                require(remainOpenNotional.toInt() > 0, \\\"remainNotional <= 0\\\");\\n\\n                positionResp.position = Position(\\n                    oldPosition.size.addD(positionResp.exchangedPositionSize),\\n                    calcRemainMarginReturnParams.remainingMargin,\\n                    remainOpenNotional.abs(),\\n                    calcRemainMarginReturnParams\\n                        .latestCumulativePremiumFractionLong,\\n                    calcRemainMarginReturnParams\\n                        .latestCumulativePremiumFractionShort,\\n                    block.number\\n                );\\n            }\\n\\n            // update open interest and total position sizes\\n            Side side = _side == Side.BUY ? Side.BUY : Side.SELL; // reduce\\n            _updateTotalPositionSize(\\n                _amm,\\n                positionResp.exchangedPositionSize,\\n                side\\n            );\\n            _updateOpenInterestNotional(\\n                _amm,\\n                positionResp\\n                .realizedPnl\\n                .addD(positionResp.badDebt) // bad debt also considers as removed notional\\n                    .addD(oldPosition.openNotional)\\n                    .subD(positionResp.position.openNotional)\\n                    .mulScalar(-1)\\n            );\\n            return positionResp;\\n        }\\n        return\\n            _closeAndOpenReversePosition(\\n                _amm,\\n                _side,\\n                _trader,\\n                _quoteAssetAmount,\\n                _leverage,\\n                _baseAssetAmountLimit\\n            );\\n    }\\n\\n    function _closeAndOpenReversePosition(\\n        IAmm _amm,\\n        Side _side,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit\\n    ) internal returns (PositionResp memory positionResp) {\\n        // new position size is larger than or equal to the old position size\\n        // so either close or close then open a larger position\\n        PositionResp memory closePositionResp = _internalClosePosition(\\n            _amm,\\n            _trader,\\n            Decimal.zero()\\n        );\\n\\n        // the old position is underwater. trader should close a position first\\n        require(closePositionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n        // update open notional after closing position\\n        Decimal.decimal memory openNotional = _quoteAssetAmount\\n            .mulD(_leverage)\\n            .subD(closePositionResp.exchangedQuoteAssetAmount);\\n\\n        // if remain exchangedQuoteAssetAmount is too small (eg. 1wei) then the required margin might be 0\\n        // then the clearingHouse will stop opening position\\n        if (openNotional.divD(_leverage).toUint() == 0) {\\n            positionResp = closePositionResp;\\n        } else {\\n            Decimal.decimal memory updatedBaseAssetAmountLimit;\\n            if (\\n                _baseAssetAmountLimit.toUint() >\\n                closePositionResp.exchangedPositionSize.toUint()\\n            ) {\\n                updatedBaseAssetAmountLimit = _baseAssetAmountLimit.subD(\\n                    closePositionResp.exchangedPositionSize.abs()\\n                );\\n            }\\n\\n            PositionResp\\n                memory increasePositionResp = _internalIncreasePosition(\\n                    _amm,\\n                    _side,\\n                    openNotional,\\n                    updatedBaseAssetAmountLimit,\\n                    _leverage\\n                );\\n            positionResp = PositionResp({\\n                position: increasePositionResp.position,\\n                exchangedQuoteAssetAmount: closePositionResp\\n                    .exchangedQuoteAssetAmount\\n                    .addD(increasePositionResp.exchangedQuoteAssetAmount),\\n                badDebt: closePositionResp.badDebt.addD(\\n                    increasePositionResp.badDebt\\n                ),\\n                fundingPayment: closePositionResp.fundingPayment.addD(\\n                    increasePositionResp.fundingPayment\\n                ),\\n                exchangedPositionSize: closePositionResp\\n                    .exchangedPositionSize\\n                    .addD(increasePositionResp.exchangedPositionSize),\\n                realizedPnl: closePositionResp.realizedPnl.addD(\\n                    increasePositionResp.realizedPnl\\n                ),\\n                unrealizedPnlAfter: SignedDecimal.zero(),\\n                marginToVault: closePositionResp.marginToVault.addD(\\n                    increasePositionResp.marginToVault\\n                )\\n            });\\n        }\\n        return positionResp;\\n    }\\n\\n    function _internalClosePosition(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) internal returns (PositionResp memory positionResp) {\\n        // check conditions\\n        Position memory oldPosition = getPosition(_amm, _trader);\\n        _requirePositionSize(oldPosition.size);\\n\\n        (\\n            ,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n        CalcRemainMarginReturnParams\\n            memory calcRemainMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                _amm,\\n                oldPosition,\\n                unrealizedPnl\\n            );\\n\\n        positionResp.exchangedPositionSize = oldPosition.size.mulScalar(-1);\\n        positionResp.realizedPnl = unrealizedPnl;\\n        positionResp.badDebt = calcRemainMarginReturnParams.badDebt;\\n        positionResp.fundingPayment = calcRemainMarginReturnParams\\n            .fundingPayment;\\n        positionResp.marginToVault = MixedDecimal\\n            .fromDecimal(calcRemainMarginReturnParams.remainingMargin)\\n            .mulScalar(-1);\\n\\n        // for amm.swapOutput, the direction is in base asset, from the perspective of Amm\\n        positionResp.exchangedQuoteAssetAmount = _amm.swapOutput(\\n            oldPosition.size.toInt() > 0\\n                ? IAmm.Dir.ADD_TO_AMM\\n                : IAmm.Dir.REMOVE_FROM_AMM,\\n            oldPosition.size.abs(),\\n            _quoteAssetAmountLimit\\n        );\\n\\n        Side side = oldPosition.size.toInt() > 0 ? Side.BUY : Side.SELL;\\n        // bankrupt position's bad debt will be also consider as a part of the open interest\\n        _updateOpenInterestNotional(\\n            _amm,\\n            unrealizedPnl\\n                .addD(calcRemainMarginReturnParams.badDebt)\\n                .addD(oldPosition.openNotional)\\n                .mulScalar(-1)\\n        );\\n        _updateTotalPositionSize(\\n            _amm,\\n            positionResp.exchangedPositionSize,\\n            side\\n        );\\n        _clearPosition(_amm, _trader);\\n    }\\n\\n    function _internalPartialClose(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _partialCloseRatio,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) internal returns (PositionResp memory) {\\n        // check conditions\\n        Position memory oldPosition = getPosition(_amm, _trader);\\n        _requirePositionSize(oldPosition.size);\\n\\n        (\\n            Decimal.decimal memory oldPositionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n\\n        SignedDecimal.signedDecimal memory sizeToClose = oldPosition.size.mulD(\\n            _partialCloseRatio\\n        );\\n        SignedDecimal.signedDecimal memory marginToRemove = MixedDecimal\\n            .fromDecimal(oldPosition.margin.mulD(_partialCloseRatio));\\n\\n        PositionResp memory positionResp;\\n        CalcRemainMarginReturnParams memory calcRemaingMarginReturnParams;\\n        // scope for avoiding stack too deep error\\n        {\\n            positionResp.exchangedPositionSize = sizeToClose.mulScalar(-1);\\n\\n            positionResp.realizedPnl = unrealizedPnl.mulD(_partialCloseRatio);\\n            positionResp.unrealizedPnlAfter = unrealizedPnl.subD(\\n                positionResp.realizedPnl\\n            );\\n\\n            calcRemaingMarginReturnParams = _calcRemainMarginWithFundingPayment(\\n                _amm,\\n                oldPosition,\\n                marginToRemove.mulScalar(-1)\\n            );\\n            positionResp.badDebt = calcRemaingMarginReturnParams.badDebt;\\n            positionResp.fundingPayment = calcRemaingMarginReturnParams\\n                .fundingPayment;\\n            positionResp.marginToVault = marginToRemove\\n                .addD(positionResp.realizedPnl)\\n                .mulScalar(-1);\\n\\n            // for amm.swapOutput, the direction is in base asset, from the perspective of Amm\\n            positionResp.exchangedQuoteAssetAmount = _amm.swapOutput(\\n                oldPosition.size.toInt() > 0\\n                    ? IAmm.Dir.ADD_TO_AMM\\n                    : IAmm.Dir.REMOVE_FROM_AMM,\\n                sizeToClose.abs(),\\n                _quoteAssetAmountLimit\\n            );\\n        }\\n\\n        SignedDecimal.signedDecimal memory remainOpenNotional = oldPosition\\n            .size\\n            .toInt() > 0\\n            ? MixedDecimal\\n                .fromDecimal(oldPositionNotional)\\n                .subD(positionResp.exchangedQuoteAssetAmount)\\n                .subD(positionResp.unrealizedPnlAfter)\\n            : positionResp.unrealizedPnlAfter.addD(oldPositionNotional).subD(\\n                positionResp.exchangedQuoteAssetAmount\\n            );\\n        require(remainOpenNotional.toInt() > 0, \\\"value of openNotional <= 0\\\");\\n\\n        positionResp.position = Position(\\n            oldPosition.size.subD(sizeToClose),\\n            calcRemaingMarginReturnParams.remainingMargin,\\n            remainOpenNotional.abs(),\\n            calcRemaingMarginReturnParams.latestCumulativePremiumFractionLong,\\n            calcRemaingMarginReturnParams.latestCumulativePremiumFractionShort,\\n            block.number\\n        );\\n\\n        // for reducing oi and tps from respective side\\n        Side side = oldPosition.size.toInt() > 0 ? Side.BUY : Side.SELL;\\n        _updateOpenInterestNotional(\\n            _amm,\\n            positionResp\\n            .realizedPnl\\n            .addD(positionResp.badDebt) // bad debt also considers as removed notional\\n                .addD(oldPosition.openNotional)\\n                .subD(positionResp.position.openNotional)\\n                .mulScalar(-1)\\n        );\\n        _updateTotalPositionSize(\\n            _amm,\\n            positionResp.exchangedPositionSize,\\n            side\\n        );\\n\\n        // update position\\n        setPosition(_amm, _trader, positionResp.position);\\n\\n        return positionResp;\\n    }\\n\\n    function _internalLiquidate(\\n        IAmm _amm,\\n        address _trader\\n    )\\n        internal\\n        returns (Decimal.decimal memory quoteAssetAmount, bool isPartialClose)\\n    {\\n        _requireAmm(_amm);\\n\\n        SignedDecimal.signedDecimal memory marginRatio = getMarginRatio(\\n            _amm,\\n            _trader\\n        );\\n\\n        if (_amm.isOverSpreadLimit()) {\\n            SignedDecimal.signedDecimal\\n                memory marginRatioBasedOnOracle = _getMarginRatioByCalcOption(\\n                    _amm,\\n                    _trader,\\n                    PnlCalcOption.ORACLE\\n                );\\n            if (marginRatioBasedOnOracle.subD(marginRatio).toInt() > 0) {\\n                marginRatio = marginRatioBasedOnOracle;\\n            }\\n        }\\n\\n        IAmm.Ratios memory ratios = _amm.getRatios();\\n        _requireMoreMarginRatio(\\n            marginRatio,\\n            ratios.maintenanceMarginRatio,\\n            false\\n        );\\n\\n        PositionResp memory positionResp;\\n        Decimal.decimal memory liquidationPenalty;\\n        {\\n            Decimal.decimal memory liquidationBadDebt;\\n            Decimal.decimal memory feeToLiquidator;\\n            Decimal.decimal memory feeToInsuranceFund;\\n            IERC20 quoteAsset = _amm.quoteAsset();\\n\\n            // partially liquidate if over liquidation fee ratio\\n            if (\\n                marginRatio.toInt() >\\n                int256(ratios.liquidationFeeRatio.toUint()) &&\\n                ratios.partialLiquidationRatio.toUint() != 0\\n            ) {\\n                Position memory position = getPosition(_amm, _trader);\\n\\n                Decimal.decimal\\n                    memory partiallyLiquidatedPositionNotional = _amm\\n                        .getOutputPrice(\\n                            position.size.toInt() > 0\\n                                ? IAmm.Dir.ADD_TO_AMM\\n                                : IAmm.Dir.REMOVE_FROM_AMM,\\n                            position\\n                                .size\\n                                .mulD(ratios.partialLiquidationRatio)\\n                                .abs()\\n                        );\\n\\n                positionResp = _openReversePosition(\\n                    _amm,\\n                    position.size.toInt() > 0 ? Side.SELL : Side.BUY,\\n                    _trader,\\n                    partiallyLiquidatedPositionNotional,\\n                    Decimal.one(),\\n                    Decimal.zero(),\\n                    true\\n                );\\n\\n                // half of the liquidationFee goes to liquidator & another half goes to insurance fund\\n                liquidationPenalty = positionResp\\n                    .exchangedQuoteAssetAmount\\n                    .mulD(ratios.liquidationFeeRatio);\\n                feeToLiquidator = liquidationPenalty.divScalar(2);\\n                feeToInsuranceFund = liquidationPenalty.subD(feeToLiquidator);\\n\\n                positionResp.position.margin = positionResp\\n                    .position\\n                    .margin\\n                    .subD(liquidationPenalty);\\n\\n                // update position\\n                setPosition(_amm, _trader, positionResp.position);\\n\\n                isPartialClose = true;\\n            } else {\\n                positionResp = _internalClosePosition(\\n                    _amm,\\n                    _trader,\\n                    Decimal.zero()\\n                );\\n\\n                Decimal.decimal memory remainingMargin = positionResp\\n                    .marginToVault\\n                    .abs();\\n\\n                feeToLiquidator = positionResp\\n                    .exchangedQuoteAssetAmount\\n                    .mulD(ratios.liquidationFeeRatio)\\n                    .divScalar(2);\\n\\n                if (feeToLiquidator.toUint() > remainingMargin.toUint()) {\\n                    liquidationBadDebt = feeToLiquidator.subD(remainingMargin);\\n                } else {\\n                    feeToInsuranceFund = remainingMargin.subD(feeToLiquidator);\\n                }\\n\\n                liquidationPenalty = feeToLiquidator.addD(feeToInsuranceFund);\\n            }\\n\\n            if (feeToInsuranceFund.toUint() > 0) {\\n                _transferToInsuranceFund(quoteAsset, feeToInsuranceFund);\\n            }\\n            // reward liquidator\\n            _withdraw(quoteAsset, _msgSender(), feeToLiquidator);\\n\\n            emit PositionLiquidated(\\n                _trader,\\n                address(_amm),\\n                _msgSender(),\\n                positionResp.exchangedQuoteAssetAmount.toUint(),\\n                positionResp.exchangedPositionSize.toUint(),\\n                feeToLiquidator.toUint(),\\n                feeToInsuranceFund.toUint(),\\n                liquidationBadDebt.toUint()\\n            );\\n        }\\n\\n        // emit event\\n        uint256 markPrice = _amm.getMarkPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt();\\n        emit PositionChanged(\\n            _trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            0,\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            liquidationPenalty.toUint(),\\n            markPrice,\\n            fundingPayment\\n        );\\n\\n        return (positionResp.exchangedQuoteAssetAmount, isPartialClose);\\n    }\\n\\n    function _swapInput(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _inputAmount,\\n        Decimal.decimal memory _minOutputAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal returns (SignedDecimal.signedDecimal memory) {\\n        // for amm.swapInput, the direction is in quote asset, from the perspective of Amm\\n        IAmm.Dir dir = (_side == Side.BUY)\\n            ? IAmm.Dir.ADD_TO_AMM\\n            : IAmm.Dir.REMOVE_FROM_AMM;\\n        SignedDecimal.signedDecimal memory outputAmount = MixedDecimal\\n            .fromDecimal(\\n                _amm.swapInput(\\n                    dir,\\n                    _inputAmount,\\n                    _minOutputAmount,\\n                    _canOverFluctuationLimit\\n                )\\n            );\\n        if (IAmm.Dir.REMOVE_FROM_AMM == dir) {\\n            return outputAmount.mulScalar(-1);\\n        }\\n        return outputAmount;\\n    }\\n\\n    function _transferFees(\\n        address _from,\\n        IAmm _amm,\\n        Decimal.decimal memory _positionNotional,\\n        Side _side,\\n        bool _isOpenPos\\n    ) internal returns (Decimal.decimal memory fees) {\\n        fees = _amm.calcFee(\\n            _side == Side.BUY ? IAmm.Dir.ADD_TO_AMM : IAmm.Dir.REMOVE_FROM_AMM,\\n            _positionNotional,\\n            _isOpenPos\\n        );\\n\\n        if (fees.toUint() > 0) {\\n            IERC20 quoteToken = _amm.quoteAsset();\\n            /**\\n             * toll fees - fees towards clearing house\\n             * spread fees - fees towards insurance fund\\n             */\\n            Decimal.decimal memory tollFees = fees.divScalar(2);\\n            Decimal.decimal memory spreadFees = fees.subD(tollFees);\\n\\n            _transferFrom(quoteToken, _from, address(this), tollFees);\\n            tollMap[address(quoteToken)] = tollMap[address(quoteToken)].addD(\\n                tollFees\\n            );\\n\\n            _transferFrom(\\n                quoteToken,\\n                _from,\\n                address(insuranceFund),\\n                spreadFees\\n            );\\n        }\\n    }\\n\\n    function _withdraw(\\n        IERC20 _token,\\n        address _receiver,\\n        Decimal.decimal memory _amount\\n    ) internal {\\n        // token balance (without toll fees)\\n        Decimal.decimal memory tollTotal = tollMap[address(_token)];\\n        Decimal.decimal memory totalTokenBalance = _balanceOf(\\n            _token,\\n            address(this)\\n        ).subD(tollTotal);\\n        // if token balance is less than withdrawal amount, use toll to cover deficit\\n        // if toll balance is still insufficient, borrow from insurance fund\\n        if (totalTokenBalance.toUint() < _amount.toUint()) {\\n            Decimal.decimal memory balanceShortage = _amount.subD(\\n                totalTokenBalance\\n            );\\n            Decimal.decimal memory tollShortage = _coverWithToll(\\n                _token,\\n                balanceShortage\\n            );\\n            if (tollShortage.toUint() > 0) {\\n                insuranceFund.withdraw(_token, tollShortage);\\n            }\\n        }\\n\\n        _transfer(_token, _receiver, _amount);\\n    }\\n\\n    function _coverWithToll(\\n        IERC20 _token,\\n        Decimal.decimal memory _amount\\n    ) internal returns (Decimal.decimal memory tollShortage) {\\n        Decimal.decimal memory tollTotal = tollMap[address(_token)];\\n        if (tollTotal.toUint() > _amount.toUint()) {\\n            tollMap[address(_token)] = tollTotal.subD(_amount);\\n        } else {\\n            tollShortage = _amount.subD(tollTotal);\\n            tollMap[address(_token)] = Decimal.zero();\\n        }\\n    }\\n\\n    function _settleRepegPnl(\\n        IAmm _amm,\\n        SignedDecimal.signedDecimal memory _repegPnl\\n    ) internal returns (Decimal.decimal memory repegDebt) {\\n        if (_repegPnl.toInt() != 0) {\\n            Decimal.decimal memory repegPnlAbs = _repegPnl.abs();\\n            IERC20 token = _amm.quoteAsset();\\n            // settle pnl with insurance fund\\n            if (_repegPnl.isNegative()) {\\n                // use toll to cover repeg loss\\n                // if toll is not enough, borrow deficit from insurance fund\\n                repegDebt = _coverWithToll(token, repegPnlAbs);\\n                if (repegDebt.toUint() > 0) {\\n                    insuranceFund.withdraw(token, repegDebt);\\n                }\\n            } else {\\n                // transfer to insurance fund\\n                _transferToInsuranceFund(token, repegPnlAbs);\\n            }\\n        }\\n    }\\n\\n    function _transferToInsuranceFund(\\n        IERC20 _token,\\n        Decimal.decimal memory _amount\\n    ) internal {\\n        Decimal.decimal memory totalTokenBalance = _balanceOf(\\n            _token,\\n            address(this)\\n        );\\n        Decimal.decimal memory amountToTransfer = _amount.cmp(\\n            totalTokenBalance\\n        ) > 0\\n            ? totalTokenBalance\\n            : _amount;\\n        _transfer(_token, address(insuranceFund), amountToTransfer);\\n    }\\n\\n    function _updateOpenInterestNotional(\\n        IAmm _amm,\\n        SignedDecimal.signedDecimal memory _amount\\n    ) internal {\\n        // when cap = 0 means no cap\\n        uint256 openInterestNotionalCap = _amm\\n            .getOpenInterestNotionalCap()\\n            .toUint();\\n        SignedDecimal.signedDecimal memory openInterestNotional = MixedDecimal\\n            .fromDecimal(openInterestNotionalMap[address(_amm)]);\\n        openInterestNotional = _amount.addD(openInterestNotional);\\n        if (openInterestNotional.toInt() < 0) {\\n            openInterestNotional = SignedDecimal.zero();\\n        }\\n        if (openInterestNotionalCap != 0) {\\n            require(\\n                openInterestNotional.toUint() <= openInterestNotionalCap,\\n                \\\"over open interest cap\\\"\\n            );\\n        }\\n\\n        openInterestNotionalMap[address(_amm)] = openInterestNotional.abs();\\n    }\\n\\n    function _updateTotalPositionSize(\\n        IAmm _amm,\\n        SignedDecimal.signedDecimal memory _amount,\\n        Side _side\\n    ) internal {\\n        TotalPositionSize memory tps = totalPositionSizeMap[address(_amm)];\\n        tps.netPositionSize = _amount.addD(tps.netPositionSize);\\n        if (_side == Side.BUY) {\\n            tps.positionSizeLong = _amount.addD(tps.positionSizeLong).abs();\\n        } else {\\n            tps.positionSizeShort = _amount\\n                .mulScalar(-1)\\n                .addD(tps.positionSizeShort)\\n                .abs();\\n        }\\n        totalPositionSizeMap[address(_amm)] = tps;\\n    }\\n\\n    function setPosition(\\n        IAmm _amm,\\n        address _trader,\\n        Position memory _position\\n    ) internal {\\n        Position storage positionStorage = positionMap[address(_amm)][_trader];\\n        positionStorage.size = _position.size;\\n        positionStorage.margin = _position.margin;\\n        positionStorage.openNotional = _position.openNotional;\\n        positionStorage.lastUpdatedCumulativePremiumFractionLong = _position\\n            .lastUpdatedCumulativePremiumFractionLong;\\n        positionStorage.lastUpdatedCumulativePremiumFractionShort = _position\\n            .lastUpdatedCumulativePremiumFractionShort;\\n        positionStorage.blockNumber = _position.blockNumber;\\n    }\\n\\n    function _clearPosition(IAmm _amm, address _trader) internal {\\n        // keep the record in order to retain the last updated block number\\n        positionMap[address(_amm)][_trader] = Position({\\n            size: SignedDecimal.zero(),\\n            margin: Decimal.zero(),\\n            openNotional: Decimal.zero(),\\n            lastUpdatedCumulativePremiumFractionLong: SignedDecimal.zero(),\\n            lastUpdatedCumulativePremiumFractionShort: SignedDecimal.zero(),\\n            blockNumber: block.number\\n        });\\n    }\\n\\n    function _calcRemainMarginWithFundingPayment(\\n        IAmm _amm,\\n        Position memory _oldPosition,\\n        SignedDecimal.signedDecimal memory _marginDelta\\n    )\\n        internal\\n        view\\n        returns (\\n            CalcRemainMarginReturnParams memory calcRemainMarginReturnParams\\n        )\\n    {\\n        // calculate funding payment\\n        (\\n            calcRemainMarginReturnParams.latestCumulativePremiumFractionLong,\\n            calcRemainMarginReturnParams.latestCumulativePremiumFractionShort\\n        ) = getLatestCumulativePremiumFraction(_amm);\\n\\n        if (_oldPosition.size.toInt() != 0) {\\n            if (_oldPosition.size.toInt() > 0) {\\n                calcRemainMarginReturnParams\\n                    .fundingPayment = calcRemainMarginReturnParams\\n                    .latestCumulativePremiumFractionLong\\n                    .subD(_oldPosition.lastUpdatedCumulativePremiumFractionLong)\\n                    .mulD(_oldPosition.size);\\n            } else {\\n                calcRemainMarginReturnParams\\n                    .fundingPayment = calcRemainMarginReturnParams\\n                    .latestCumulativePremiumFractionShort\\n                    .subD(\\n                        _oldPosition.lastUpdatedCumulativePremiumFractionShort\\n                    )\\n                    .mulD(_oldPosition.size);\\n            }\\n        }\\n\\n        // calculate remain margin\\n        SignedDecimal.signedDecimal memory signedRemainMargin = _marginDelta\\n            .subD(calcRemainMarginReturnParams.fundingPayment)\\n            .addD(_oldPosition.margin);\\n\\n        // if remain margin is negative, set to zero and leave the rest to bad debt\\n        if (signedRemainMargin.toInt() < 0) {\\n            calcRemainMarginReturnParams.badDebt = signedRemainMargin.abs();\\n        } else {\\n            calcRemainMarginReturnParams.remainingMargin = signedRemainMargin\\n                .abs();\\n        }\\n    }\\n\\n    function _calcFreeCollateral(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _marginWithFundingPayment\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        Position memory pos = getPosition(_amm, _trader);\\n        (\\n            Decimal.decimal memory positionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            );\\n\\n        // min(margin + funding, margin + funding + unrealized PnL) - position value * initMarginRatio\\n        SignedDecimal.signedDecimal memory accountValue = unrealizedPnl.addD(\\n            _marginWithFundingPayment\\n        );\\n        SignedDecimal.signedDecimal memory minCollateral = unrealizedPnl\\n            .toInt() > 0\\n            ? MixedDecimal.fromDecimal(_marginWithFundingPayment)\\n            : accountValue;\\n\\n        // margin requirement\\n        // if holding a long position, using open notional\\n        // if holding a short position, using position notional\\n        Decimal.decimal memory initMarginRatio = _amm\\n            .getRatios()\\n            .initMarginRatio;\\n        SignedDecimal.signedDecimal memory marginRequirement = pos\\n            .size\\n            .toInt() > 0\\n            ? MixedDecimal.fromDecimal(pos.openNotional).mulD(initMarginRatio)\\n            : MixedDecimal.fromDecimal(positionNotional).mulD(initMarginRatio);\\n\\n        return minCollateral.subD(marginRequirement);\\n    }\\n\\n    function _getMarginRatioByCalcOption(\\n        IAmm _amm,\\n        address _trader,\\n        PnlCalcOption _pnlCalcOption\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        Position memory position = getPosition(_amm, _trader);\\n        _requirePositionSize(position.size);\\n        (\\n            Decimal.decimal memory positionNotional,\\n            SignedDecimal.signedDecimal memory pnl\\n        ) = getPositionNotionalAndUnrealizedPnl(_amm, _trader, _pnlCalcOption);\\n        return _getMarginRatio(_amm, position, pnl, positionNotional);\\n    }\\n\\n    function _requireAmm(IAmm _amm) internal view {\\n        require(insuranceFund.isExistedAmm(_amm), \\\"amm not found\\\");\\n    }\\n\\n    function _requireNonZeroInput(\\n        Decimal.decimal memory _decimal\\n    ) internal pure {\\n        require(_decimal.toUint() != 0, \\\"0 input\\\");\\n    }\\n\\n    function _requirePositionSize(\\n        SignedDecimal.signedDecimal memory _size\\n    ) internal pure {\\n        require(_size.toInt() != 0, \\\"positionSize is 0\\\");\\n    }\\n\\n    function _requireNonSandwich(IAmm _amm) internal view {\\n        uint256 currentBlock = block.number;\\n        require(\\n            getPosition(_amm, _msgSender()).blockNumber != currentBlock,\\n            \\\"non sandwich\\\"\\n        );\\n    }\\n\\n    function _requireMoreMarginRatio(\\n        SignedDecimal.signedDecimal memory _marginRatio,\\n        Decimal.decimal memory _baseMarginRatio,\\n        bool _largerThanOrEqualTo\\n    ) internal pure {\\n        int256 remainingMarginRatio = _marginRatio\\n            .subD(_baseMarginRatio)\\n            .toInt();\\n        require(\\n            _largerThanOrEqualTo\\n                ? remainingMarginRatio >= 0\\n                : remainingMarginRatio < 0,\\n            \\\"margin ratio not meet critera\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf8d583ae29515397ad8a3a4939da9e7dead82b36e419490b4bd0c3d7fe3705b9\",\"license\":\"GPL-3.0\"},\"contracts/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract OwnerPausableUpgradeable is OwnableUpgradeable, PausableUpgradeable {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n    function __OwnerPausable_init() internal onlyInitializing {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @notice pauses trading\\n     * @dev only owner\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice resumes trading\\n     * @dev only owner\\n     */\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x2beb840ab38c33a3662388993f3f82bdb71dd4825786eb7277f42dcf7670320a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct Ratios {\\n        Decimal.decimal feeRatio;\\n        Decimal.decimal initMarginRatio;\\n        Decimal.decimal maintenanceMarginRatio;\\n        Decimal.decimal partialLiquidationRatio;\\n        Decimal.decimal liquidationFeeRatio;\\n    }\\n\\n    function swapInput(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function settleFunding()\\n        external\\n        returns (\\n            SignedDecimal.signedDecimal memory premiumFraction,\\n            Decimal.decimal memory markPrice,\\n            Decimal.decimal memory indexPrice\\n        );\\n\\n    function repegPrice()\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function repegK(\\n        Decimal.decimal memory _multiplier\\n    )\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function updateFundingRate(\\n        SignedDecimal.signedDecimal memory,\\n        SignedDecimal.signedDecimal memory,\\n        Decimal.decimal memory\\n    ) external;\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function calcFee(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        bool _isOpenPos\\n    ) external view returns (Decimal.decimal memory fees);\\n\\n    function getMarkPrice() external view returns (Decimal.decimal memory);\\n\\n    function getIndexPrice() external view returns (Decimal.decimal memory);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    function getFeeRatio() external view returns (Decimal.decimal memory);\\n\\n    function getInitMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaintenanceMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getPartialLiquidationRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getLiquidationFeeRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaxHoldingBaseAsset()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDelta()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function fundingPeriod() external view returns (uint256);\\n\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    function getRatios() external view returns (Ratios memory);\\n\\n    function calcPriceRepegPnl(\\n        Decimal.decimal memory _repegTo\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function calcKRepegPnl(\\n        Decimal.decimal memory _k\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function isOverFluctuationLimit(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) external view returns (bool);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n\\n    function getInputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n}\\n\",\"keccak256\":\"0xa9c8cf13349b2d473e9df5491aa3ab6a352d683871774e5e5ba29274602886c4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IAmm} from \\\"./IAmm.sol\\\";\\n\\ninterface IInsuranceFund {\\n    function withdraw(\\n        IERC20 _quoteToken,\\n        Decimal.decimal calldata _amount\\n    ) external;\\n\\n    function isExistedAmm(IAmm _amm) external view returns (bool);\\n\\n    function getAllAmms() external view returns (IAmm[] memory);\\n}\\n\",\"keccak256\":\"0x0a8900d40c0e215bc6ccaaf3259cb535c7364126001413b3848b2c237afbecc0\",\"license\":\"GPL-3.0\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        return decimal((x.d * (DecimalMath.unit(18))) % y.d);\\n    }\\n\\n    function cmp(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(decimal memory _y) internal pure returns (decimal memory) {\\n        uint256 y = _y.d * 1e18;\\n        uint256 z;\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return decimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5b42de95ec1faf055f3b13cd7467b7fb9ce57bfe5967407e57fcf6e0411374cf\",\"license\":\"GPL-3.0\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\n/**\\n * @title DecimalERC20\\n * @notice wrapper to interact with erc20 in decimal math\\n */\\nabstract contract DecimalERC20 {\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n\\n    uint256[50] private __gap;\\n\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 rawValue = _toUint(_token, _value);\\n        require(_token.transfer(_to, rawValue), \\\"transfer failed\\\");\\n        _validateBalance(_token, _to, rawValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 rawValue = _toUint(_token, _value);\\n        require(\\n            _token.transferFrom(_from, _to, rawValue),\\n            \\\"transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, rawValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(\\n        IERC20 _token,\\n        address _owner\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(\\n        IERC20 _token\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(\\n        IERC20 _token,\\n        uint256 _number\\n    ) internal view returns (Decimal.decimal memory) {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number / (10 ** (tokenDecimals - 18)));\\n        }\\n\\n        return Decimal.decimal(_number * (10 ** (uint256(18) - tokenDecimals)));\\n    }\\n\\n    function _toUint(\\n        IERC20 _token,\\n        Decimal.decimal memory _decimal\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint() * (10 ** (tokenDecimals - 18));\\n        }\\n        return _decimal.toUint() / (10 ** (uint256(18) - tokenDecimals));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        require(\\n            _token.approve(_spender, _toUint(_token, _value)),\\n            \\\"approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x487de458bb6fbefb856831545822990f1a3e101226be0a1e01673ff23626ae3c\",\"license\":\"GPL-3.0\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nlibrary DecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10 ** uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * y) / (unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0xb9b1495f2a60bdffdcfb0aad70ef3928ec081a094b68151d3845da8535c2460e\",\"license\":\"GPL-3.0\"},\"contracts/utils/MixedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./SignedDecimal.sol\\\";\\n\\n/// @dev To handle a signedDecimal add/sub/mul/div a decimal and provide convert decimal to signedDecimal helper\\nlibrary MixedDecimal {\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n\\n    uint256 private constant _INT256_MAX = 2 ** 255 - 1;\\n    string private constant ERROR_NON_CONVERTIBLE =\\n        \\\"MixedDecimal: uint value is bigger than _INT256_MAX\\\";\\n\\n    modifier convertible(Decimal.decimal memory x) {\\n        require(_INT256_MAX >= x.d, ERROR_NON_CONVERTIBLE);\\n        _;\\n    }\\n\\n    function fromDecimal(\\n        Decimal.decimal memory x\\n    )\\n        internal\\n        pure\\n        convertible(x)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return SignedDecimal.signedDecimal(int256(x.d));\\n    }\\n\\n    function toUint(\\n        SignedDecimal.signedDecimal memory x\\n    ) internal pure returns (uint256) {\\n        return x.abs().d;\\n    }\\n\\n    /// @dev add SignedDecimal.signedDecimal and Decimal.decimal, using SignedSafeMath directly\\n    function addD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d + int256(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract SignedDecimal.signedDecimal by Decimal.decimal, using SignedSafeMath directly\\n    function subD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d - int256(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by Decimal.decimal\\n    function mulD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by a uint256\\n    function mulScalar(\\n        SignedDecimal.signedDecimal memory x,\\n        uint256 y\\n    ) internal pure returns (SignedDecimal.signedDecimal memory) {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulScalar(int256(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a Decimal.decimal\\n    function divD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a uint256\\n    function divScalar(\\n        SignedDecimal.signedDecimal memory x,\\n        uint256 y\\n    ) internal pure returns (SignedDecimal.signedDecimal memory) {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divScalar(int256(y));\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x0c5d397c27f9a6bd7500a068495b1b293d9da0abd19015c2c4f643202b386fda\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(\\n        signedDecimal memory x\\n    ) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(\\n        signedDecimal memory _y\\n    ) internal pure returns (signedDecimal memory) {\\n        int256 y = _y.d * 1e18;\\n        int256 z;\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return signedDecimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5ed13cc8287d0d38d8e55f0af0c305255ffab19c8beb8df2b300209028b42d9c\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10 ** uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0x44be9eee14568549f21f9cb9066739a5624d895da606e4413878374c21cba993\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615b9880620000216000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638bedf3bb11610104578063cbf512b1116100a2578063ea0a45f911610071578063ea0a45f914610506578063f2fde38b14610528578063f4344efb1461053b578063f55ce4fd1461054e57600080fd5b8063cbf512b114610412578063cd6dc68714610425578063e38099e014610438578063e4bf9a311461045957600080fd5b8063ac06a96e116100de578063ac06a96e14610366578063b0ac5f2f14610379578063b33dc1901461039a578063b7902303146103fe57600080fd5b80638bedf3bb1461032f5780638da5cb5b14610342578063a8c1b0bc1461035357600080fd5b80636b17ad031161017c57806385c4d2f21161014b57806385c4d2f2146102e357806386b9d81f146102f6578063893d242d146103095780638b29a8f61461031c57600080fd5b80636b17ad03146102a7578063715018a6146102ba5780637a394cc5146102c25780638456cb59146102db57600080fd5b80633f4ba83a116101b85780633f4ba83a1461024e5780635c975abb146102565780636507e1f41461026c5780636891397b1461027f57600080fd5b80632f66c231146101df57806330d768b0146101f457806330e2ae651461023b575b600080fd5b6101f26101ed366004615201565b6105b9565b005b61021e61020236600461523a565b610135602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f2610249366004615257565b610619565b6101f261083c565b60985460ff166040519015158152602001610232565b6101f261027a3660046152f3565b61084e565b61029261028d36600461523a565b610c0a565b60408051925183529051602083015201610232565b6101f26102b536600461523a565b610cfb565b6101f261136e565b61012f546102cd9081565b604051908152602001610232565b6101f2611380565b6102cd6102f136600461533a565b611390565b6101f2610304366004615201565b6113c0565b6101f2610317366004615373565b6113de565b6101f261032a36600461523a565b6117b9565b61029261033d3660046153df565b611929565b6066546001600160a01b031661021e565b6101f261036136600461542a565b611ad1565b6101f2610374366004615257565b611dfe565b6102cd61038736600461523a565b6101316020526000908152604090205481565b6103ad6103a8366004615201565b611f45565b6040516102329190600060c0820190508251518252602083015151602083015260408301515160408301526060830151516060830152608083015151608083015260a083015160a083015292915050565b61012e5461021e906001600160a01b031681565b6102cd61042036600461533a565b611fe8565b6101f261043336600461533a565b612005565b6102cd61044636600461523a565b6101366020526000908152604090205481565b6104d4610467366004615201565b6101306020908152600092835260408084208252918352918190208151808401835281548152825180850184526001830154815283518086018552600284015481528451808701865260038501548152855196870190955260048401548652600590930154919490939186565b6040805196518752945160208701529251938501939093525160608401529051608083015260a082015260c001610232565b610519610514366004615201565b61218f565b60405190518152602001610232565b6101f261053636600461523a565b6121b1565b6101f261054936600461542a565b61222a565b61059d61055c36600461523a565b610132602090815260009182526040918290208251808301845281548152835180840185526001830154815284519384019094526002909101548252919083565b6040805193518452915160208401525190820152606001610232565b6105c16123a9565b6001600160a01b038281166000818152610135602052604080822080546001600160a01b0319169486169485179055517f48c865d769d5980fb5ced85b3f4f0cadfbb358025bcb3c3e61b016ec1a4423709190a35050565b610621612403565b610629612449565b610632826124a2565b61064961064436839003830183615460565b61254d565b3360006106568483611f45565b9050600061067d60001961067761067236889003880188615460565b612588565b906125f3565b9050600061068c868484612627565b905061069a81606001515190565b156106c05760405162461bcd60e51b81526004016106b79061547c565b60405180910390fd5b608080820180516020808701919091528351606087015283015191850191909152516000906106fa906106f690899088906126fe565b5190565b12156107485760405162461bcd60e51b815260206004820152601d60248201527f6672656520636f6c6c61746572616c206973206e6f7420656e6f75676800000060448201526064016106b7565b610753868585612820565b6000866001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b7919061549e565b90506107d281866107cd368a90038a018a615460565b612886565b866001600160a01b0316856001600160a01b03167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b61080f865190565b60408681015151815192835260208301528051918290030190a35050505050610838600160fc55565b5050565b6108446123a9565b61084c61297d565b565b610856612403565b61085e612449565b610867836124a2565b6108708261254d565b600061088461087d6129cf565b84906129fa565b60000b126108c85760405162461bcd60e51b81526020600482015260116024820152706e6f74207061727469616c20636c6f736560781b60448201526064016106b7565b6108d183612a2b565b3360006108de8583611f45565b80519091506000906108f09086612a77565b90506000866001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095691906154df565b606001519050866001600160a01b031663130234cf600061097986600001515190565b13610985576001610988565b60005b61099185612afb565b6040518363ffffffff1660e01b81526004016109ae9291906155b8565b602060405180830381865afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906155d4565b80156109fb5750805115155b8015610a1357506000610a0e87836129fa565b60000b135b15610a1c578095505b6000610a2a88868989612b3f565b9050610a3881604001515190565b15610a555760405162461bcd60e51b81526004016106b79061547c565b6000886001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab9919061549e565b9050610acd81876107cd8560c00151612afb565b6000610afd878b85602001516000610ae78b600001515190565b13610af3576000610af6565b60015b6000612e45565b90506000610b668b6001600160a01b031663604096326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f691906155f6565b90506000610b7685608001515190565b90508b6001600160a01b0316896001600160a01b0316600080516020615b10833981519152610bab8860000151602001515190565b60208901515160608a01515188518b51515160a08d01515160e08e01515160408f01515160008d8d604051610bea9b9a99989796959493929190615612565b60405180910390a3505050505050505050610c05600160fc55565b505050565b60408051602080820183526000808352835180830185528181526001600160a01b0386168252610133835284822054610134909352939020549192918491908115610c9e576001600160a01b038316600090815261013360205260409020610c73600184615676565b81548110610c8357610c8361568d565b60009182526020918290206040805193840190520154815294505b8015610cf3576001600160a01b038316600090815261013460205260409020610cc8600183615676565b81548110610cd857610cd861568d565b60009182526020918290206040805193840190520154815293505b505050915091565b610d03612403565b610d0c816124a2565b6000806000836001600160a01b031663ed83d79c6040518163ffffffff1660e01b81526004016060604051808303816000875af1158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7591906156a3565b6001600160a01b038716600090815261013260209081526040808320815160808101835281546060820190815281528251808501845260018301548152818501908152835194850184526002909201548452918201839052519598509396509194509192610dec91610de79190612ffa565b613025565b9050610e046040518060200160405280600081525090565b6040805160208101909152600081526040805160208101909152600081528351600003610e44578451889350839250610e3d90836130cb565b9050610e84565b610e65610e5e8660200151866130f690919063ffffffff16565b8990612a77565b9250610e81610e5e8660400151866130f690919063ffffffff16565b91505b6000610e908488613121565b90506000610e9e8489613121565b90506000610eb4610eaf848461319a565b612afb565b604080516020810190915261012f548152909150600090610ed69083906129fa565b60000b13610f4b57604051636ab797ed60e11b81528651600482015285516024820152895160448201526001600160a01b038d169063d56f2fda90606401600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050506110fa565b604080516020810190915261012f548152600090610f69908b612ffa565b90506000610f758d5190565b131561100957855187511315610fca576000610f9187836131c5565b90506000610f9f898361319a565b9050610fbe6000196106778d6020015184612a7790919063ffffffff16565b96508198505050611090565b6000610fd688836131c5565b90506000610fe4888361319a565b9050610ffd8b6040015182612a7790919063ffffffff16565b96508197505050611090565b85518751121561105557600061101f8783613243565b9050600061102d898361319a565b905061104c6000196106778d6020015184612a7790919063ffffffff16565b96505050611090565b60006110618883613243565b9050600061106f888361319a565b90506110888b6040015182612a7790919063ffffffff16565b965081975050505b604051636ab797ed60e11b815287516004820152865160248201528a5160448201526001600160a01b038e169063d56f2fda90606401600060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b50505050505b6000806111068e610c0a565b9150915061013360008f6001600160a01b03166001600160a01b03168152602001908152602001600020611143838a6132b790919063ffffffff16565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000155505061013460008f6001600160a01b03166001600160a01b031681526020019081526020016000206111ad82896132b790919063ffffffff16565b9080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000155505060008e6001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611242919061549e565b9050600061124e885190565b131561126b576112668161126189612afb565b6132e2565b6112f7565b6000611275885190565b12156112f75761012e546001600160a01b031663252978b8826112978a612afb565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152516024820152604401600060405180830381600087803b1580156112de57600080fd5b505af11580156112f2573d6000803e3d6000fd5b505050505b8e6001600160a01b03167feab6d2156c0c3b2a09fc549136d515e220ea7e45790e18e27fee6811f5342fb061132a8f5190565b8e518c518c518c51604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a2505050505050505050505050505050565b6113766123a9565b61084c600061332f565b6113886123a9565b61084c613381565b61013360205281600052604060002081815481106113ad57600080fd5b6000918252602090912001549150829050565b6113c8612449565b6113d282826133be565b5050610838600160fc55565b6113e6612403565b6113ee612449565b6113f7856124a2565b6114008361254d565b6114098261254d565b61148e6114218361141b6106726129cf565b90613121565b866001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa15801561145f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148391906154df565b602001516001613959565b61149785612a2b565b336114a0615099565b60006114b46114af8985611f45565b515190565b9050600081156114c55760006114c8565b60015b9050808061150857508760018111156114e3576114e3615580565b600083136114f25760016114f5565b60005b600181111561150657611506615580565b145b1561152a57611523898961151c8a8a612ffa565b888a6139ca565b925061153d565b61153a8989868a8a8a6000613bb3565b92505b61154c89858560000151612820565b8015801561155c57508251515115155b156115db576115db61156e8a8661218f565b8a6001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa1580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d091906154df565b604001516001613959565b604083015151156115fe5760405162461bcd60e51b81526004016106b79061547c565b6000896001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611662919061549e565b905060006116728560c001515190565b13156116955761169081863061168b8860c00151612afb565b613e0e565b6116bb565b60006116a38560c001515190565b12156116bb576116bb81866107cd8760c00151612afb565b50505060006116d2838984602001518a6001612e45565b90506000611717896001600160a01b031663604096326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b42573d6000803e3d6000fd5b9050600061172784608001515190565b9050896001600160a01b0316856001600160a01b0316600080516020615b1083398151915261175c8760000151602001515190565b60208801515160608901515188518a51515160a08c01515160e08d01515160408e01515160008d8d60405161179b9b9a99989796959493929190615612565b60405180910390a350505050506117b2600160fc55565b5050505050565b6001600160a01b038082166000908152610135602052604090205482913391168114806117f357506066546001600160a01b038281169116145b61182d5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b60448201526064016106b7565b6000806000806000876001600160a01b031663332b82fa6040518163ffffffff1660e01b815260040160a0604051808303816000875af1158015611875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189991906156e0565b9450945094509450945060006118af8983613f06565b9050886001600160a01b03167f582119e93a01fa8de6f9671dd99edc406ba36b255c96318877907e40088769dc6118e4885190565b87518751875187518751604080519687526020870195909552938501929092526060840152608083015260a082015260c00160405180910390a2505050505050505050565b60408051602081019091526000815260408051602081019091526000815260006119538686611f45565b905060006119648260000151612afb565b905061196e815190565b15611ac7578151516000908113908161198857600061198b565b60015b905060008760018111156119a1576119a1615580565b03611a1c5760405163da0c592760e01b81526001600160a01b038a169063da0c5927906119d490849087906004016155b8565b602060405180830381865afa1580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1591906155f6565b9550611a90565b6000896001600160a01b03166358c0994a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8091906155f6565b9050611a8c8482612ffa565b9650505b81611ab157611aac8460400151611aa688612588565b90613243565b611ac2565b611ac286611aa68660400151612588565b945050505b5050935093915050565b611ad9612403565b611ae1612449565b611aea826124a2565b611af382612a2b565b33611afc615099565b6000611b088584611f45565b9050600080611b1983600001515190565b13611b25576001611b28565b60005b90506000866001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e91906154df565b9050866001600160a01b031663130234cf83611bad8660000151612afb565b6040518363ffffffff1660e01b8152600401611bca9291906155b8565b602060405180830381865afa158015611be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0b91906155d4565b8015611c1b575060608101515115155b15611c5757611c5087868360600151611c4b60408051602080820183526000918290528251908101909252815290565b612b3f565b9350611c65565b611c62878688614038565b93505b60408401515115611c885760405162461bcd60e51b81526004016106b79061547c565b6000876001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec919061549e565b9050611d0081876107cd8860c00151612afb565b5050506000611d1d848785602001516000610ae787600001515190565b90506000611d62876001600160a01b031663604096326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b42573d6000803e3d6000fd5b90506000611d7285608001515190565b9050876001600160a01b0316866001600160a01b0316600080516020615b10833981519152611da78860000151602001515190565b60208901515160608a01515188518b51515160a08d01515160e08e01515160408f01515160008d8d604051611de69b9a99989796959493929190615612565b60405180910390a3505050505050610838600160fc55565b611e06612403565b611e0e612449565b611e17826124a2565b611e2961064436839003830183615460565b336000611e368483611f45565b9050611e55611e4a36859003850185615460565b6020830151906142aa565b6020820152611e65848383612820565b6000846001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec9919061549e565b9050611ee081843061168b36899003890189615460565b6001600160a01b038086169084167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b611f216106f636899003890189615460565b60408051918252600060208301520160405180910390a3505050610838600160fc55565b611f4d61516f565b506001600160a01b03808316600090815261013060209081526040808320938516835292815290829020825160e081018452815460c0820190815281528351808401855260018301548152818401528351808401855260028301548152818501528351808401855260038301548152606082015283519283019093526004810154825260808301919091526005015460a08201525b92915050565b61013460205281600052604060002081815481106113ad57600080fd5b603354610100900460ff16158080156120255750603354600160ff909116105b8061203f5750303b15801561203f575060335460ff166001145b6120a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b6033805460ff1916600117905580156120c5576033805461ff0019166101001790555b6001600160a01b0383166121055760405162461bcd60e51b81526020600482015260076024820152666164647228302960c81b60448201526064016106b7565b61210d6142d5565b61211561430c565b61012e80546001600160a01b0319166001600160a01b038516179055604080516020810190915282905261012f8290558015610c05576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6040805160208101909152600081526121aa8383600061433b565b9392505050565b6121b96123a9565b6001600160a01b03811661221e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b7565b6122278161332f565b50565b6001600160a01b0380831660009081526101356020526040902054839133911681148061226457506066546001600160a01b038281169116145b61229e5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b60448201526064016106b7565b6000806000806000886001600160a01b031663013dd795896040518263ffffffff1660e01b81526004016122d59151815260200190565b60a0604051808303816000875af11580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231891906156e0565b94509450945094509450600061232e8a83613f06565b9050896001600160a01b03167f582119e93a01fa8de6f9671dd99edc406ba36b255c96318877907e40088769dc612363885190565b87518751875187518751604080519687526020870195909552938501929092526060840152608083015260a082015260c00160405180910390a250505050505050505050565b6066546001600160a01b0316331461084c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b7565b60985460ff161561084c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106b7565b600260fc540361249b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106b7565b600260fc55565b61012e546040516301dd29e160e21b81526001600160a01b03838116600483015290911690630774a78490602401602060405180830381865afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251191906155d4565b6122275760405162461bcd60e51b815260206004820152600d60248201526c185b5b481b9bdd08199bdd5b99609a1b60448201526064016106b7565b80516000036122275760405162461bcd60e51b81526020600482015260076024820152660c081a5b9c1d5d60ca1b60448201526064016106b7565b6040805160208101909152600081528180600001516001600160ff1b031015604051806060016040528060338152602001615b3060339139906125de5760405162461bcd60e51b81526004016106b7919061576a565b50506040805160208101909152915182525090565b604080516020810190915260008152604080516020810190915260008152835161261e90849061579d565b81529392505050565b61262f6151d1565b61263884610c0a565b602083015281528251511561269b578251516000121561267a57825160608401518251612670929161266a919061319a565b906130cb565b604082015261269b565b825160808401516020830151612695929161266a919061319a565b60408201525b60006126c284602001516126bc84604001518661319a90919063ffffffff16565b906131c5565b905060006126ce825190565b12156126e7576126dd81612afb565b60608301526126f6565b6126f081612afb565b60808301525b509392505050565b60408051602081019091526000815260006127198585611f45565b905060008061272a87876000611929565b9092509050600061273b82876131c5565b9050600080612748845190565b13612753578161275c565b61275c87612588565b90506000896001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa15801561279e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c291906154df565b6020015190506000806127d788600001515190565b136127f4576127ef826127e988612588565b90612a77565b612805565b612805826127e98960400151612588565b9050612811838261319a565b9b9a5050505050505050505050565b6001600160a01b03928316600090815261013060209081526040808320949095168252928352839020815151815591810151516001830155918201515160028201556060820151516003820155608082015151600482015560a090910151600590910155565b6001600160a01b0383166000908152610136602090815260408083208151928301909152548152906128c2826128bc8730614383565b90614405565b90506128cc835190565b8151101561296b5760006128e08483614405565b905060006128ee8783614430565b905060006128fa825190565b11156129685761012e546040516304a52f1760e31b81526001600160a01b038981166004830152835160248301529091169063252978b890604401600060405180830381600087803b15801561294f57600080fd5b505af1158015612963573d6000803e3d6000fd5b505050505b50505b6117b28585856144ea565b600160fc55565b6129856145ce565b6098805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60408051602081019091526000815260405180602001604052806129f36012614617565b9052919050565b805182516000911015612a0f57506001611fe2565b815183511015612a225750600019611fe2565b50600092915050565b4380612a378333611f45565b60a00151036108385760405162461bcd60e51b815260206004820152600c60248201526b0dcdedc40e6c2dcc8eed2c6d60a31b60448201526064016106b7565b6040805160208101909152600081528180600001516001600160ff1b031015604051806060016040528060338152602001615b306033913990612acd5760405162461bcd60e51b81526004016106b7919061576a565b50604080516020810190915260008152612af0612ae985612588565b86906130cb565b9250505b5092915050565b604080516020810190915260008152604080516020810190915260008152825160001315612b37578251612b30906000615822565b8152611fe2565b915182525090565b612b47615099565b6000612b538686611f45565b9050612b628160000151614627565b600080612b7188886000611929565b84519193509150600090612b859088612a77565b90506000612ba3610672898760200151612ffa90919063ffffffff16565b9050612bad615099565b612bb56151d1565b612bc1846000196125f3565b6060830152612bd0858b612a77565b60a08301819052612be290869061319a565b60e0830152612bfd8c88612bf8866000196125f3565b612627565b6060810151604080850191909152810151608084015260a0830151909150612c2e90600019906106779086906132b7565b60c08301528651516001600160a01b038d169063d71ec2ad90600012612c55576001612c58565b60005b612c6187612afb565b8c6040518463ffffffff1660e01b8152600401612c8093929190615861565b6020604051808303816000875af1158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc391906155f6565b60208301528651516000908112612cf857612cf38360200151611aa6898660e001516131c590919063ffffffff16565b612d17565b612d178360e00151612d118560200151611aa68b612588565b9061319a565b90506000612d23825190565b13612d705760405162461bcd60e51b815260206004820152601a60248201527f76616c7565206f66206f70656e4e6f74696f6e616c203c3d203000000000000060448201526064016106b7565b6040805160c0810190915288518190612d89908861319a565b815260200183608001518152602001612da183612afb565b8152835160208083019190915284015160408201524360609091015283528751516000908112612dd2576001612dd5565b60005b9050612e158e612e10600019610677886000015160400151611aa68f604001516126bc8c604001518d60a001516131c590919063ffffffff16565b61466c565b612e248e8560600151836147a2565b612e338e8e8660000151612820565b50919c9b505050505050505050505050565b6040805160208101909152600081526001600160a01b03851663a7b774a06000856001811115612e7757612e77615580565b14612e83576001612e86565b60005b86856040518463ffffffff1660e01b8152600401612ea693929190615883565b602060405180830381865afa158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee791906155f6565b90506000612ef3825190565b1115612ff1576000856001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5d919061549e565b90506000612f6c8360026148a0565b90506000612f7a8483614405565b9050612f88838a3085613e0e565b6001600160a01b03831660009081526101366020908152604091829020825191820190925290548152612fbb90836142aa565b6001600160a01b03808516600090815261013660205260409020915190915561012e54612fed9185918c911684613e0e565b5050505b95945050505050565b6040805160208101909152600081526040805160208101909152600081528251845161261e916148cb565b60408051602081019091526000808252825161304990670de0b6b3a76400006158a6565b9050600060038211156130ac57508060006130656002836158db565b6130709060016158ef565b90505b818110156130a65790508060028161308b81866158db565b61309591906158ef565b61309f91906158db565b9050613073565b506130b6565b81156130b6575060015b60408051602081019091529081529392505050565b6040805160208101909152600081526040805160208101909152600081528251845161261e916148d9565b6040805160208101909152600081526040805160208101909152600081528251845161261e916148e7565b6040805160208101909152600081528180600001516001600160ff1b031015604051806060016040528060338152602001615b3060339139906131775760405162461bcd60e51b81526004016106b7919061576a565b50604080516020810190915260008152612af061319385612588565b86906148f5565b6040805160208101909152600081526040805160208101909152600081528251845161261e91614920565b6040805160208101909152600081528180600001516001600160ff1b031015604051806060016040528060338152602001615b30603391399061321b5760405162461bcd60e51b81526004016106b7919061576a565b50604080516020810190915260008152835185516132399190615907565b8152949350505050565b6040805160208101909152600081528180600001516001600160ff1b031015604051806060016040528060338152602001615b3060339139906132995760405162461bcd60e51b81526004016106b7919061576a565b50604080516020810190915260008152835185516132399190615822565b6040805160208101909152600081526040805160208101909152600081528251845161261e9161492c565b60006132ee8330614383565b90506000806132fd84846129fa565b60000b1361330b578261330d565b815b61012e549091506133299085906001600160a01b0316836144ea565b50505050565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613389612403565b6098805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129b23390565b60408051602081019091526000815260006133d8846124a2565b60006133e4858561218f565b9050846001600160a01b0316639e0103626040518163ffffffff1660e01b8152600401602060405180830381865afa158015613424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344891906155d4565b1561347857600061345b8686600161433b565b9050600061346c6106f6838561319a565b1315613476578091505b505b6000856001600160a01b031663b13c86a36040518163ffffffff1660e01b815260040160a060405180830381865afa1580156134b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dc91906154df565b90506134ee8282604001516000613959565b6134f6615099565b60408051602081019091526000815260408051602081019091526000815260408051602081019091526000815260408051602081019091526000815260008b6001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613572573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613596919061549e565b90506135a487608001515190565b88511380156135b7575060608701515115155b156137235760006135c88d8d611f45565b905060008d6001600160a01b031663da0c592760006135e985600001515190565b136135f55760016135f8565b60005b60608c0151855161360d91610eaf9190612a77565b6040518363ffffffff1660e01b815260040161362a9291906155b8565b602060405180830381865afa158015613647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366b91906155f6565b90506136ba8e600061367f85600001515190565b1361368b57600061368e565b60015b8f846136986129cf565b6040805160208082018352600091829052825190810190925281526001613bb3565b97506136d789608001518960200151612ffa90919063ffffffff16565b96506136e48760026148a0565b94506136f08786614405565b8851602001519094506137039088614405565b8851602001528751613718908f908f90612820565b60019a5050506137c5565b61374e8c8c61374960408051602080820183526000918290528251908101909252815290565b614038565b9550600061375f8760c00151612afb565b905061378760026137818a608001518a60200151612ffa90919063ffffffff16565b906148a0565b9350613791815190565b845111156137aa576137a38482614405565b94506137b7565b6137b48185614405565b92505b6137c184846142aa565b9550505b60006137cf835190565b11156137df576137df81836132e2565b6137ea813385612886565b336001600160a01b03168c6001600160a01b03168c6001600160a01b03167fdb3ce612ab14cee0ae0aac9f8f56a0a193c4d065cdb11cdb1dff02aaff7df2d76138358a602001515190565b6138428b60600151614938565b885188518b51604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a45050505060006138ba896001600160a01b031663604096326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b42573d6000803e3d6000fd5b905060006138ca84608001515190565b9050896001600160a01b0316896001600160a01b0316600080516020615b108339815191526138ff8760000151602001515190565b6020880151516060890151518951515160009060a08c01515160e08d01515160408e0151518d518d8d60405161393f9b9a99989796959493929190615612565b60405180910390a350505060200151935050509250929050565b60006139686106f68585613243565b905081613978576000811261397e565b60008112155b6133295760405162461bcd60e51b815260206004820152601d60248201527f6d617267696e20726174696f206e6f74206d656574206372697465726100000060448201526064016106b7565b6139d2615099565b3360006139df8883611f45565b90506139ef88888888600061494a565b606084018190528151600091613a0591906132b7565b9050613a1489612e1089612588565b613a238985606001518a6147a2565b6000896001600160a01b031663113773946040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8791906155f6565b9050613a91815190565b15613aef576000613aab82613aa585612afb565b906129fa565b60000b1315613aef5760405162461bcd60e51b815260206004820152601060248201526f0706f736974696f6e53697a65206361760841b60448201526064016106b7565b6000613afe6106728a896130f6565b90506000613b0d8c8684612627565b90506000613b1d8d886000611929565b9150508a8860200181905250808860e00181905250828860c00181905250816040015188608001819052506040518060c0016040528086815260200183608001518152602001613b7e8a6020015189604001516142aa90919063ffffffff16565b815260200183600001518152602001836020015181526020014381525088600001819052505050505050505095945050505050565b613bbb615099565b6000613bc78686612ffa565b9050600080613bd88b8a6000611929565b91509150613be4615099565b835183511115613dee576000613bfa8d8c611f45565b9050613c098d8d878b8b61494a565b606083015280515115613c4357613c3d613c268260000151612afb565b61141b613c368560600151612afb565b8690612a77565b60a08301525b6000613c548e838560a00151612627565b9050613c6d8360a001518561319a90919063ffffffff16565b60e0840152602083018690528151516000908112613ca957613ca48460200151611aa6888760e001516131c590919063ffffffff16565b613cc2565b613cc28460e00151612d118660200151611aa68a612588565b90506000613cce825190565b13613d115760405162461bcd60e51b8152602060048201526013602482015272072656d61696e4e6f74696f6e616c203c3d203606c1b60448201526064016106b7565b6040518060c00160405280613d37866060015186600001516132b790919063ffffffff16565b815260200183608001518152602001613d4f83612afb565b81528351602080830191909152909301516040840152436060909301929092525082526000808d6001811115613d8757613d87615580565b14613d93576001613d96565b60005b9050613da78e8460600151836147a2565b613de08e612e10600019610677876000015160400151611aa688604001516126bc8b604001518c60a001516131c590919063ffffffff16565b829650505050505050613e03565b613dfc8c8c8c8c8c8c614a29565b9450505050505b979650505050505050565b613e1784614c11565b6000613e238584614383565b90506000613e318684614c5b565b6040516323b872dd60e01b81526001600160a01b038781166004830152868116602483015260448201839052919250908716906323b872dd906064016020604051808303816000875af1158015613e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb091906155d4565b613ef25760405162461bcd60e51b81526020600482015260136024820152721d1c985b9cd9995c919c9bdb4819985a5b1959606a1b60448201526064016106b7565b613efe86858385614cc6565b505050505050565b604080516020810190915260008152815115611fe2576000613f2783612afb565b90506000846001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8d919061549e565b9050613f9884614d2e565b1561402657613fa78183614430565b92506000613fb3845190565b11156140215761012e546040516304a52f1760e31b81526001600160a01b038381166004830152855160248301529091169063252978b890604401600060405180830381600087803b15801561400857600080fd5b505af115801561401c573d6000803e3d6000fd5b505050505b614030565b61403081836132e2565b505092915050565b614040615099565b600061404c8585611f45565b905061405b8160000151614627565b600061406986866000611929565b9150506000614079878484612627565b835190915061408a906000196125f3565b8460600181905250818460a0018190525080606001518460400181905250806040015184608001819052506140c86000196106778360800151612588565b60c08501528251516001600160a01b0388169063d71ec2ad906000126140ef5760016140f2565b60005b85516140fd90612afb565b886040518463ffffffff1660e01b815260040161411c93929190615861565b6020604051808303816000875af115801561413b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415f91906155f6565b6020850152825151600090811261417757600161417a565b60005b90506141a588612e1060001961067788604001516126bc88606001518a6131c590919063ffffffff16565b6141b4888660600151836147a2565b61429f88886040805160e081018252600060c08201819052825160208082018552828252908352835180820185528290528351808201855282815281840190815284518083018652839052845180830186528381528486019081528551808401875284905285518084018752848152606086019081528651808501885285905286518085018852858152608087019081524360a088019081526001600160a01b039a8b168752610130865288872099909a1686529790935294909220925151835590515160018301559151516002820155905151600382015590515160048201559051600590910155565b505050509392505050565b6040805160208101909152600081526040805160208101909152600081528251845161261e91614d4c565b603354610100900460ff166142fc5760405162461bcd60e51b81526004016106b790615948565b614304614d58565b61084c614d87565b603354610100900460ff166143335760405162461bcd60e51b81526004016106b790615948565b61084c614db6565b60408051602081019091526000815260006143568585611f45565b90506143658160000151614627565b600080614373878787611929565b91509150613e0387848385614ddd565b604080516020810182526000815290516370a0823160e01b81526001600160a01b0383811660048301526121aa9185918216906370a0823190602401602060405180830381865afa1580156143dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144009190615993565b614e1e565b6040805160208101909152600081526040805160208101909152600081528251845161261e91614eb1565b604080516020808201835260008083526001600160a01b03861681526101368252839020835191820190935291548252825190919081511115614499576144778184614405565b6001600160a01b03851660009081526101366020526040902090519055612af4565b6144a38382614405565b91506144c660408051602080820183526000918290528251908101909252815290565b6001600160a01b038516600090815261013660205260409020905190555092915050565b6144f383614c11565b60006144ff8484614383565b9050600061450d8584614c5b565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192509086169063a9059cbb906044016020604051808303816000875af1158015614560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458491906155d4565b6145c25760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016106b7565b6117b285858385614cc6565b60985460ff1661084c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106b7565b6000611fe260ff8316600a615a90565b80516000036122275760405162461bcd60e51b81526020600482015260116024820152700706f736974696f6e53697a65206973203607c1b60448201526064016106b7565b60006146af836001600160a01b031663525454106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b42573d6000803e3d6000fd5b6001600160a01b0384166000908152610131602090815260408083208151928301909152548152919250906146e390612588565b90506146ef83826132b7565b905060006146fb825190565b121561471e57506040805160208082018352600091829052825190810190925281525b8115614775578161472e82614938565b11156147755760405162461bcd60e51b815260206004820152601660248201527506f766572206f70656e20696e746572657374206361760541b60448201526064016106b7565b61477e81612afb565b6001600160a01b039094166000908152610131602052604090209351909355505050565b6001600160a01b03831660009081526101326020908152604091829020825160808101845281546060820190815281528351808401855260018301548152818401528351928301845260029091015482529182015280516148049084906132b7565b8152600082600181111561481a5761481a615580565b0361484357614839610eaf8260200151856131c590919063ffffffff16565b6020820152614862565b604081015161485c90610eaf906126bc866000196125f3565b60408201525b6001600160a01b0390931660009081526101326020908152604091829020855151815590850151516001820155930151516002909301929092555050565b604080516020810190915260008152604080516020810190915260008152835161261e9084906158db565b60006121aa83836012614ebd565b60006121aa83836012614ed2565b60006121aa83836012614ef1565b6040805160208101909152600081526040805160208101909152600081528251845161261e91614f07565b60006121aa8284615822565b60006121aa8284615907565b600061494382612afb565b5192915050565b60408051602081019091526000815260008086600181111561496e5761496e615580565b1461497a57600161497d565b60005b905060006149f9886001600160a01b03166375df6389848989896040518563ffffffff1660e01b81526004016149b69493929190615a9c565b6020604051808303816000875af11580156149d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067291906155f6565b9050816001811115614a0d57614a0d615580565b600103613e0357614a20816000196125f3565b92505050612ff1565b614a31615099565b6000614a59888761374960408051602080820183526000918290528251908101909252815290565b9050614a6781604001515190565b15614a845760405162461bcd60e51b81526004016106b79061547c565b6020810151600090614a9a906128bc8888612ffa565b9050614aa96106f682876130f6565b600003614ab857819250614c05565b604080516020810190915260008152614ad48360600151614938565b85511115614af657614af3614aec8460600151612afb565b8690614405565b90505b6000614b058b8b85858b6139ca565b905060405180610100016040528082600001518152602001614b38836020015187602001516142aa90919063ffffffff16565b8152602001614b58836040015187604001516142aa90919063ffffffff16565b8152602001614b78836060015187606001516132b790919063ffffffff16565b8152602001614b98836080015187608001516132b790919063ffffffff16565b8152602001614bb88360a001518760a001516132b790919063ffffffff16565b8152602001614bd88360c001518760c001516132b790919063ffffffff16565b8152602001614bfe60408051602080820183526000918290528251908101909252815290565b9052945050505b50509695505050505050565b6000614c1c82614f15565b6001600160a01b0383166000908152602081905260409020549091508114610838576001600160a01b0391909116600090815260208190526040902055565b600080614c6784614f15565b905060128110614c9b57614c7c601282615676565b614c8790600a615a90565b8351614c9391906158a6565b915050611fe2565b614ca6816012615676565b614cb190600a615a90565b83515b614cbe91906158db565b949350505050565b614ce7614cdd614cd68685614e1e565b83906142aa565b613aa58686614383565b60000b156133295760405162461bcd60e51b815260206004820152601460248201527318985b185b98d9481a5b98dbdb9cda5cdd195b9d60621b60448201526064016106b7565b60008082600001511215614d4457506001919050565b506000919050565b60006121aa82846158ef565b603354610100900460ff16614d7f5760405162461bcd60e51b81526004016106b790615948565b61084c615020565b603354610100900460ff16614dae5760405162461bcd60e51b81526004016106b790615948565b61084c615050565b603354610100900460ff166129765760405162461bcd60e51b81526004016106b790615948565b6040805160208101909152600081526000614df9868686612627565b9050614e148361141b8360600151611aa68560800151612588565b9695505050505050565b6040805160208101909152600081526000614e3884614f15565b905060128110614e7a576040518060200160405280601283614e5a9190615676565b614e6590600a615a90565b614e6f90866158db565b815250915050611fe2565b6040518060200160405280826012614e929190615676565b614e9d90600a615a90565b614ea790866158a6565b9052949350505050565b60006121aa8284615676565b6000614ec882614617565b614cb484866158a6565b6000614edd82614617565b614ee7848661579d565b614cbe9190615ac5565b600082614efd83614617565b614cb490866158a6565b60006121aa83836012615083565b6001600160a01b038116600090815260208190526040812054808203611fe25760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03871691614f7891615af3565b600060405180830381855afa9150503d8060008114614fb3576040519150601f19603f3d011682016040523d82523d6000602084013e614fb8565b606091505b5091509150818015614fca5750805115155b61500c5760405162461bcd60e51b815260206004820152601360248201527219d95d08191958da5b585b1cc819985a5b1959606a1b60448201526064016106b7565b80806020019051810190612af09190615993565b603354610100900460ff166150475760405162461bcd60e51b81526004016106b790615948565b61084c3361332f565b603354610100900460ff166150775760405162461bcd60e51b81526004016106b790615948565b6098805460ff19169055565b60008261508f83614617565b614ee7908661579d565b6040518061010001604052806150ad61516f565b81526020016150c86040518060200160405280600081525090565b81526020016150e36040518060200160405280600081525090565b81526020016150fe6040518060200160405280600081525090565b81526020016151196040518060200160405280600081525090565b81526020016151346040518060200160405280600081525090565b815260200161514f6040518060200160405280600081525090565b815260200161516a6040518060200160405280600081525090565b905290565b6040805160e081018252600060c082018181528252825160208082018552828252808401919091528351808201855282815283850152835180820185528281526060840152835190810190935282529060808201908152602001600081525090565b6040805160c08101909152600060a0820190815281906150fe565b6001600160a01b038116811461222757600080fd5b6000806040838503121561521457600080fd5b823561521f816151ec565b9150602083013561522f816151ec565b809150509250929050565b60006020828403121561524c57600080fd5b81356121aa816151ec565b600080828403604081121561526b57600080fd5b8335615276816151ec565b92506020601f198201121561528a57600080fd5b506020830190509250929050565b6040516020810167ffffffffffffffff811182821017156152c957634e487b7160e01b600052604160045260246000fd5b60405290565b6000602082840312156152e157600080fd5b6152e9615298565b9135825250919050565b60008060006060848603121561530857600080fd5b8335615313816151ec565b925061532285602086016152cf565b915061533185604086016152cf565b90509250925092565b6000806040838503121561534d57600080fd5b8235615358816151ec565b946020939093013593505050565b6002811061222757600080fd5b600080600080600060a0868803121561538b57600080fd5b8535615396816151ec565b945060208601356153a681615366565b93506153b587604088016152cf565b92506153c487606088016152cf565b91506153d387608088016152cf565b90509295509295909350565b6000806000606084860312156153f457600080fd5b83356153ff816151ec565b9250602084013561540f816151ec565b9150604084013561541f81615366565b809150509250925092565b6000806040838503121561543d57600080fd5b8235615448816151ec565b915061545784602085016152cf565b90509250929050565b60006020828403121561547257600080fd5b6121aa83836152cf565b602080825260089082015267189859081919589d60c21b604082015260600190565b6000602082840312156154b057600080fd5b81516121aa816151ec565b6000602082840312156154cd57600080fd5b6154d5615298565b9151825250919050565b600060a082840312156154f157600080fd5b60405160a0810181811067ffffffffffffffff8211171561552257634e487b7160e01b600052604160045260246000fd5b60405261552f84846154bb565b815261553e84602085016154bb565b602082015261555084604085016154bb565b604082015261556284606085016154bb565b606082015261557484608085016154bb565b60808201529392505050565b634e487b7160e01b600052602160045260246000fd5b600281106155b457634e487b7160e01b600052602160045260246000fd5b9052565b604081016155c68285615596565b825160208301529392505050565b6000602082840312156155e657600080fd5b815180151581146121aa57600080fd5b60006020828403121561560857600080fd5b6121aa83836154bb565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561568857615688615660565b500390565b634e487b7160e01b600052603260045260246000fd5b6000806000606084860312156156b857600080fd5b6156c285856154bb565b92506156d185602086016154bb565b915061533185604086016154bb565b600080600080600060a086880312156156f857600080fd5b61570287876154bb565b945061571187602088016154bb565b935061572087604088016154bb565b925061572f87606088016154bb565b91506153d387608088016154bb565b60005b83811015615759578181015183820152602001615741565b838111156133295750506000910152565b602081526000825180602084015261578981604085016020870161573e565b601f01601f19169190910160400192915050565b60006001600160ff1b03818413828413808216868404861116156157c3576157c3615660565b600160ff1b60008712828116878305891216156157e2576157e2615660565b600087129250878205871284841616156157fe576157fe615660565b8785058712818416161561581457615814615660565b505050929093029392505050565b60008083128015600160ff1b85018412161561584057615840615660565b6001600160ff1b038401831381161561585b5761585b615660565b50500390565b6060810161586f8286615596565b925160208201529051604090910152919050565b606081016158918286615596565b92516020820152901515604090910152919050565b60008160001904831182151516156158c0576158c0615660565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158ea576158ea6158c5565b500490565b6000821982111561590257615902615660565b500190565b600080821280156001600160ff1b038490038513161561592957615929615660565b600160ff1b839003841281161561594257615942615660565b50500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156159a557600080fd5b5051919050565b600181815b808511156159e75781600019048211156159cd576159cd615660565b808516156159da57918102915b93841c93908002906159b1565b509250929050565b6000826159fe57506001611fe2565b81615a0b57506000611fe2565b8160018114615a215760028114615a2b57615a47565b6001915050611fe2565b60ff841115615a3c57615a3c615660565b50506001821b611fe2565b5060208310610133831016604e8410600b8410161715615a6a575081810a611fe2565b615a7483836159ac565b8060001904821115615a8857615a88615660565b029392505050565b60006121aa83836159ef565b60808101615aaa8287615596565b93516020820152915160408301521515606090910152919050565b600082615ad457615ad46158c5565b600160ff1b821460001984141615615aee57615aee615660565b500590565b60008251615b0581846020870161573e565b919091019291505056fe4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c24d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220d5ad5d7e051347a6f362d113fd940f918b2ae7fd5935cd06519e12e61fb7b5af64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "FundingPayment(address,uint256,uint256,int256,int256,int256)": {
        "params": {
          "amm": "- amm",
          "indexPrice": "- index price on funding",
          "insuranceFundPnl": "- insurance fund pnl from funding",
          "markPrice": "- mark price on funding",
          "premiumFractionLong": "- total premium longs pay (when +ve), receive (when -ve)",
          "premiumFractionShort": "- total premium shorts receive (when +ve), pay (when -ve)"
        }
      },
      "MarginChanged(address,address,int256,int256)": {
        "params": {
          "amm": "- amm address",
          "amount": "- amount changed",
          "fundingPayment": "- funding payment",
          "trader": "- trader address"
        }
      },
      "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": {
        "params": {
          "amm": "- amm",
          "badDebt": "- margin cleared by insurance fund (optimally 0)",
          "exchangedPositionNotional": "- the position notional exchanged in the trade",
          "exchangedPositionSize": "- the position size exchanged in the trade",
          "fee": "- trade fee",
          "fundingPayment": "- funding payment (+: paid, -: received)",
          "liquidationPenalty": "- liquidation fee",
          "margin": "- updated margin",
          "markPrice": "- updated mark price",
          "positionSizeAfter": "- updated position size",
          "realizedPnl": "- realized pnl on the trade",
          "trader": "- trader",
          "unrealizedPnlAfter": "- unrealized pnl remaining after the trade"
        }
      },
      "PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "amm": "- amm",
          "badDebt": "- liquidation fee cleared by insurance fund (optimally 0)",
          "insuranceFundProfit": "- insurance fund profit on liquidation",
          "liquidatedPositionNotional": "- liquidated position notional",
          "liquidatedPositionSize": "- liquidated position size",
          "liquidationReward": "- liquidation reward to the liquidator",
          "liquidator": "- liquidator",
          "trader": "- trader"
        }
      },
      "Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)": {
        "params": {
          "amm": "- amm address",
          "baseAssetReserveAfter": "- base reserve after repeg",
          "baseAssetReserveBefore": "- base reserve before repeg",
          "quoteAssetReserveAfter": "- quote reserve after repeg",
          "quoteAssetReserveBefore": "- quote reserve before repeg",
          "repegDebt": "- amount borrowed from insurance fund",
          "repegPnl": "- effective pnl incurred on vault positions after repeg"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addMargin(address,(uint256))": {
        "params": {
          "_addedMargin": "added margin in 18 digits",
          "_amm": "amm address"
        }
      },
      "closePosition(address,(uint256))": {
        "params": {
          "_amm": "amm address",
          "_quoteAssetAmountLimit": "quote asset amount limit in 18 digits (slippage). 0 for any slippage"
        }
      },
      "getLatestCumulativePremiumFraction(address)": {
        "params": {
          "_amm": "IAmm address"
        },
        "returns": {
          "latestCumulativePremiumFractionLong": "cumulative premium fraction long",
          "latestCumulativePremiumFractionShort": "cumulative premium fraction short"
        }
      },
      "getMarginRatio(address,address)": {
        "params": {
          "_amm": "amm address",
          "_trader": "trader address"
        },
        "returns": {
          "_0": "margin ratio in 18 digits"
        }
      },
      "getPosition(address,address)": {
        "params": {
          "_amm": "IAmm address",
          "_trader": "trader address"
        },
        "returns": {
          "_0": "struct Position"
        }
      },
      "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": {
        "params": {
          "_amm": "amm address",
          "_pnlCalcOption": "enum PnlCalcOption, SPOT_PRICE for spot price and ORACLE for oracle price",
          "_trader": "trader address"
        },
        "returns": {
          "positionNotional": "position notional",
          "unrealizedPnl": "unrealized Pnl"
        }
      },
      "liquidate(address,address)": {
        "params": {
          "_amm": "amm address",
          "_trader": "trader address"
        }
      },
      "openPosition(address,uint8,(uint256),(uint256),(uint256))": {
        "params": {
          "_amm": "amm address",
          "_baseAssetAmountLimit": "base asset amount limit in 18 digits (slippage). 0 for any slippage",
          "_leverage": "leverage in 18 digits. Can Not be 0",
          "_quoteAssetAmount": "quote asset amount in 18 digits. Can Not be 0",
          "_side": "enum Side; BUY for long and SELL for short"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "partialClose(address,(uint256),(uint256))": {
        "params": {
          "_amm": "amm address",
          "_partialCloseRatio": "% to close",
          "_quoteAssetAmountLimit": "quote asset amount limit in 18 digits (slippage). 0 for any slippage"
        }
      },
      "pause()": {
        "details": "only owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeMargin(address,(uint256))": {
        "params": {
          "_amm": "amm address",
          "_removedMargin": "removed margin in 18 digits"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repegPrice(address)": {
        "details": "only repeg bot can call",
        "params": {
          "_amm": "amm address"
        }
      },
      "setRepegBot(address,address)": {
        "details": "only owner",
        "params": {
          "_amm": "amm address",
          "_repegBot": "bot address to be set"
        }
      },
      "settleFunding(address)": {
        "details": "dynamic funding mechanism refer (https://nftperp.notion.site/Technical-Stuff-8e4cb30f08b94aa2a576097a5008df24)",
        "params": {
          "_amm": "amm address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "only owner"
      }
    },
    "title": "Clearing House",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundingPayment(address,uint256,uint256,int256,int256,int256)": {
        "notice": "emitted on funding payments"
      },
      "MarginChanged(address,address,int256,int256)": {
        "notice": "emitted on adding or removing margin"
      },
      "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": {
        "notice": "This event is emitted when position is changed"
      },
      "PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "This event is emitted when position is liquidated"
      },
      "Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)": {
        "notice": "emitted on repeg (convergence event)"
      },
      "RepegBotSet(address,address)": {
        "notice": "emitted on setting repeg bots"
      }
    },
    "kind": "user",
    "methods": {
      "addMargin(address,(uint256))": {
        "notice": "add margin to increase margin ratio"
      },
      "closePosition(address,(uint256))": {
        "notice": "close position"
      },
      "getLatestCumulativePremiumFraction(address)": {
        "notice": "get latest cumulative premium fraction."
      },
      "getMarginRatio(address,address)": {
        "notice": "get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional"
      },
      "getPosition(address,address)": {
        "notice": "get personal position information"
      },
      "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": {
        "notice": "get position notional and unrealized Pnl without fee expense and funding payment"
      },
      "liquidate(address,address)": {
        "notice": "liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio"
      },
      "openPosition(address,uint8,(uint256),(uint256),(uint256))": {
        "notice": "open a position"
      },
      "partialClose(address,(uint256),(uint256))": {
        "notice": "partially close position"
      },
      "pause()": {
        "notice": "pauses trading"
      },
      "removeMargin(address,(uint256))": {
        "notice": "remove margin to decrease margin ratio"
      },
      "repegPrice(address)": {
        "notice": "repeg mark price to index price"
      },
      "setRepegBot(address,address)": {
        "notice": "set repeg bot"
      },
      "settleFunding(address)": {
        "notice": "settle funding payment"
      },
      "unpause()": {
        "notice": "resumes trading"
      }
    },
    "notice": "- issues and stores positions of traders - settles all collateral between traders",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14838,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "decimalMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14842,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2558,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 2561,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3245,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2430,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 2550,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2741,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 2846,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13878,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2861,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_status",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 2919,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8129,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "insuranceFund",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IInsuranceFund)14405"
      },
      {
        "astId": 8132,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "fundingRateDeltaCapRatio",
        "offset": 0,
        "slot": "303",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 8139,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "positionMap",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Position)8075_storage))"
      },
      {
        "astId": 8144,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "openInterestNotionalMap",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_struct(decimal)14473_storage)"
      },
      {
        "astId": 8149,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "totalPositionSizeMap",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_struct(TotalPositionSize)8085_storage)"
      },
      {
        "astId": 8155,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "cumulativePremiumFractionLong",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_array(t_struct(signedDecimal)15729_storage)dyn_storage)"
      },
      {
        "astId": 8161,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "cumulativePremiumFractionShort",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_array(t_struct(signedDecimal)15729_storage)dyn_storage)"
      },
      {
        "astId": 8165,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "repegBots",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8170,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "tollMap",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_struct(decimal)14473_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(signedDecimal)15729_storage)dyn_storage": {
        "base": "t_struct(signedDecimal)15729_storage",
        "encoding": "dynamic_array",
        "label": "struct SignedDecimal.signedDecimal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInsuranceFund)14405": {
        "encoding": "inplace",
        "label": "contract IInsuranceFund",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(signedDecimal)15729_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignedDecimal.signedDecimal[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(signedDecimal)15729_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Position)8075_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ClearingHouse.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Position)8075_storage)"
      },
      "t_mapping(t_address,t_struct(Position)8075_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClearingHouse.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)8075_storage"
      },
      "t_mapping(t_address,t_struct(TotalPositionSize)8085_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClearingHouse.TotalPositionSize)",
        "numberOfBytes": "32",
        "value": "t_struct(TotalPositionSize)8085_storage"
      },
      "t_mapping(t_address,t_struct(decimal)14473_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Decimal.decimal)",
        "numberOfBytes": "32",
        "value": "t_struct(decimal)14473_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Position)8075_storage": {
        "encoding": "inplace",
        "label": "struct ClearingHouse.Position",
        "members": [
          {
            "astId": 8060,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(signedDecimal)15729_storage"
          },
          {
            "astId": 8063,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "margin",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 8066,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "openNotional",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 8069,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "lastUpdatedCumulativePremiumFractionLong",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(signedDecimal)15729_storage"
          },
          {
            "astId": 8072,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "lastUpdatedCumulativePremiumFractionShort",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(signedDecimal)15729_storage"
          },
          {
            "astId": 8074,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "blockNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TotalPositionSize)8085_storage": {
        "encoding": "inplace",
        "label": "struct ClearingHouse.TotalPositionSize",
        "members": [
          {
            "astId": 8078,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "netPositionSize",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(signedDecimal)15729_storage"
          },
          {
            "astId": 8081,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "positionSizeLong",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 8084,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "positionSizeShort",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)14473_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(decimal)14473_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 14472,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(signedDecimal)15729_storage": {
        "encoding": "inplace",
        "label": "struct SignedDecimal.signedDecimal",
        "members": [
          {
            "astId": 15728,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
