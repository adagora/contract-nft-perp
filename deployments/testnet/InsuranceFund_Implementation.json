{
  "address": "0x8DD4e339140CBd8a2C67c310413e78660F3008FC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        }
      ],
      "name": "AmmAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        }
      ],
      "name": "AmmRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "ShutdownAllAmms",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "addAmm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchangeWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAmms",
      "outputs": [
        {
          "internalType": "contract IAmm[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuoteTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationMonitor",
      "outputs": [
        {
          "internalType": "contract IInflationMonitor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "isExistedAmm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract IMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quoteTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "removeAmm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExchangeWrapper",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInflationMonitor",
          "name": "_inflationMonitor",
          "type": "address"
        }
      ],
      "name": "setInflationMonitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMinter",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7fae8de5b4b043457f1f697df6b60917c93dcbbfa6de161bff468c7db33a4ad",
  "receipt": {
    "to": null,
    "from": "0x9be0C47924bBCaFAB9a84fB3D894D0c742cab3EE",
    "contractAddress": "0x8DD4e339140CBd8a2C67c310413e78660F3008FC",
    "transactionIndex": 18,
    "gasUsed": "2008873",
    "logsBloom": "0x
    "blockHash": "0x00d888e0ff55c7480cabe167fcbf78f40c6353d7ef53aee11ab48f959f21ef60",
    "transactionHash": "0xd7fae8de5b4b043457f1f697df6b60917c93dcbbfa6de161bff468c7db33a4ad",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 29758374,
        "transactionHash": "0xd7fae8de5b4b043457f1f697df6b60917c93dcbbfa6de161bff468c7db33a4ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009be0c47924bbcafab9a84fb3d894d0c742cab3ee",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ab496c981f4e100000000000000000000000000000000000000000000000009b377be175700bd000000000000000000000000000000000000000000001872b01186ae2f9deeff00000000000000000000000000000000000000000000000009a8c3274dd50bdc000000000000000000000000000000000000000000001872b01c3b44f91fe3e0",
        "logIndex": 67,
        "blockHash": "0x00d888e0ff55c7480cabe167fcbf78f40c6353d7ef53aee11ab48f959f21ef60"
      }
    ],
    "blockNumber": 29758374,
    "cumulativeGasUsed": "6076950",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac2826b142e515be3df06490dfecc761",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"}],\"name\":\"AmmAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"}],\"name\":\"AmmRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShutdownAllAmms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"addAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchangeWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAmms\",\"outputs\":[{\"internalType\":\"contract IAmm[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuoteTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationMonitor\",\"outputs\":[{\"internalType\":\"contract IInflationMonitor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"isExistedAmm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quoteTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"removeAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExchangeWrapper\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInflationMonitor\",\"name\":\"_inflationMonitor\",\"type\":\"address\"}],\"name\":\"setInflationMonitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAmm(address)\":{\"details\":\"only owner can call\",\"params\":{\"_amm\":\"IAmm address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAmm(address)\":{\"details\":\"only owner can call. no need to call\",\"params\":{\"_amm\":\"IAmm address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,(uint256))\":{\"params\":{\"_amount\":\"the amount of quoteToken caller want to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw(address,(uint256))\":{\"notice\":\"withdraw token to caller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceFund.sol\":\"InsuranceFund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/InsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\npragma experimental ABIEncoderV2;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./utils/Decimal.sol\\\";\\nimport {IExchangeWrapper} from \\\"./interfaces/IExchangeWrapper.sol\\\";\\nimport {IInsuranceFund} from \\\"./interfaces/IInsuranceFund.sol\\\";\\nimport {DecimalERC20} from \\\"./utils/DecimalERC20.sol\\\";\\nimport {IMinter} from \\\"./interfaces/IMinter.sol\\\";\\nimport {IAmm} from \\\"./interfaces/IAmm.sol\\\";\\nimport {IInflationMonitor} from \\\"./interfaces/IInflationMonitor.sol\\\";\\n\\ncontract InsuranceFund is\\n    IInsuranceFund,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DecimalERC20\\n{\\n    using Decimal for Decimal.decimal;\\n\\n    //\\n    // EVENTS\\n    //\\n\\n    event Withdrawn(address withdrawer, uint256 amount);\\n    event TokenAdded(address tokenAddress);\\n    event TokenRemoved(address tokenAddress);\\n    event ShutdownAllAmms(uint256 blockNumber);\\n    event AmmAdded(address amm);\\n    event AmmRemoved(address amm);\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n\\n    mapping(address => bool) private ammMap;\\n    mapping(address => bool) private quoteTokenMap;\\n    IAmm[] private amms;\\n    IERC20[] public quoteTokens;\\n\\n    // contract dependencies\\n    IExchangeWrapper public exchange;\\n    IERC20 public perpToken;\\n    IMinter public minter;\\n    IInflationMonitor public inflationMonitor;\\n    address private beneficiary;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @dev only owner can call\\n     * @param _amm IAmm address\\n     */\\n    function addAmm(IAmm _amm) public onlyOwner {\\n        require(!isExistedAmm(_amm), \\\"amm already added\\\");\\n        ammMap[address(_amm)] = true;\\n        amms.push(_amm);\\n        emit AmmAdded(address(_amm));\\n\\n        // add token if it's new one\\n        IERC20 token = _amm.quoteAsset();\\n        if (!isQuoteTokenExisted(token)) {\\n            quoteTokens.push(token);\\n            quoteTokenMap[address(token)] = true;\\n            emit TokenAdded(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev only owner can call. no need to call\\n     * @param _amm IAmm address\\n     */\\n    function removeAmm(IAmm _amm) external onlyOwner {\\n        require(isExistedAmm(_amm), \\\"amm not existed\\\");\\n        ammMap[address(_amm)] = false;\\n        uint256 ammLength = amms.length;\\n        for (uint256 i = 0; i < ammLength; i++) {\\n            if (amms[i] == _amm) {\\n                amms[i] = amms[ammLength - 1];\\n                amms.pop();\\n                emit AmmRemoved(address(_amm));\\n                break;\\n            }\\n        }\\n    }\\n\\n    function removeToken(IERC20 _token) external onlyOwner {\\n        require(isQuoteTokenExisted(_token), \\\"token not existed\\\");\\n\\n        quoteTokenMap[address(_token)] = false;\\n        uint256 quoteTokensLength = getQuoteTokenLength();\\n        for (uint256 i = 0; i < quoteTokensLength; i++) {\\n            if (quoteTokens[i] == _token) {\\n                if (i < quoteTokensLength - 1) {\\n                    quoteTokens[i] = quoteTokens[quoteTokensLength - 1];\\n                }\\n                quoteTokens.pop();\\n                break;\\n            }\\n        }\\n\\n        // exchange and transfer to the quoteToken with the most value. if no more quoteToken, buy protocol tokens\\n        // TODO use curve or balancer fund token for pooling the fees will be less painful\\n        if (balanceOf(_token).toUint() > 0) {\\n            address outputToken = getTokenWithMaxValue();\\n            if (outputToken == address(0)) {\\n                outputToken = address(perpToken);\\n            }\\n            swapInput(\\n                _token,\\n                IERC20(outputToken),\\n                balanceOf(_token),\\n                Decimal.zero()\\n            );\\n        }\\n\\n        emit TokenRemoved(address(_token));\\n    }\\n\\n    /**\\n     * @notice withdraw token to caller\\n     * @param _amount the amount of quoteToken caller want to withdraw\\n     */\\n    function withdraw(\\n        IERC20 _quoteToken,\\n        Decimal.decimal calldata _amount\\n    ) external override {\\n        require(beneficiary == _msgSender(), \\\"caller is not beneficiary\\\");\\n        require(isQuoteTokenExisted(_quoteToken), \\\"Asset is not supported\\\");\\n\\n        Decimal.decimal memory quoteBalance = balanceOf(_quoteToken);\\n        if (_amount.toUint() > quoteBalance.toUint()) {\\n            Decimal.decimal memory insufficientAmount = _amount.subD(\\n                quoteBalance\\n            );\\n            swapEnoughQuoteAmount(_quoteToken, insufficientAmount);\\n            quoteBalance = balanceOf(_quoteToken);\\n        }\\n        require(quoteBalance.toUint() >= _amount.toUint(), \\\"Fund not enough\\\");\\n\\n        _transfer(_quoteToken, _msgSender(), _amount);\\n        emit Withdrawn(_msgSender(), _amount.toUint());\\n    }\\n\\n    //\\n    // SETTER\\n    //\\n\\n    function setExchange(IExchangeWrapper _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setBeneficiary(address _beneficiary) external onlyOwner {\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function setMinter(IMinter _minter) public onlyOwner {\\n        minter = _minter;\\n        perpToken = minter.getPerpToken();\\n    }\\n\\n    function setInflationMonitor(\\n        IInflationMonitor _inflationMonitor\\n    ) external onlyOwner {\\n        inflationMonitor = _inflationMonitor;\\n    }\\n\\n    function getQuoteTokenLength() public view returns (uint256) {\\n        return quoteTokens.length;\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n\\n    function getTokenWithMaxValue() internal view returns (address) {\\n        uint256 numOfQuoteTokens = quoteTokens.length;\\n        if (numOfQuoteTokens == 0) {\\n            return address(0);\\n        }\\n        if (numOfQuoteTokens == 1) {\\n            return address(quoteTokens[0]);\\n        }\\n\\n        IERC20 denominatedToken = quoteTokens[0];\\n        IERC20 maxValueToken = denominatedToken;\\n        Decimal.decimal memory valueOfMaxValueToken = balanceOf(\\n            denominatedToken\\n        );\\n        for (uint256 i = 1; i < numOfQuoteTokens; i++) {\\n            IERC20 quoteToken = quoteTokens[i];\\n            Decimal.decimal memory quoteTokenValue = exchange.getInputPrice(\\n                quoteToken,\\n                denominatedToken,\\n                balanceOf(quoteToken)\\n            );\\n            if (quoteTokenValue.cmp(valueOfMaxValueToken) > 0) {\\n                maxValueToken = quoteToken;\\n                valueOfMaxValueToken = quoteTokenValue;\\n            }\\n        }\\n        return address(maxValueToken);\\n    }\\n\\n    function swapInput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal memory inputTokenSold,\\n        Decimal.decimal memory minOutputTokenBought\\n    ) internal returns (Decimal.decimal memory received) {\\n        if (inputTokenSold.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        _approve(inputToken, address(exchange), inputTokenSold);\\n        received = exchange.swapInput(\\n            inputToken,\\n            outputToken,\\n            inputTokenSold,\\n            minOutputTokenBought,\\n            Decimal.zero()\\n        );\\n        require(received.toUint() > 0, \\\"Exchange swap error\\\");\\n    }\\n\\n    function swapOutput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal memory outputTokenBought,\\n        Decimal.decimal memory maxInputTokenSold\\n    ) internal returns (Decimal.decimal memory received) {\\n        if (outputTokenBought.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        _approve(inputToken, address(exchange), maxInputTokenSold);\\n        received = exchange.swapOutput(\\n            inputToken,\\n            outputToken,\\n            outputTokenBought,\\n            maxInputTokenSold,\\n            Decimal.zero()\\n        );\\n        require(received.toUint() > 0, \\\"Exchange swap error\\\");\\n    }\\n\\n    function swapEnoughQuoteAmount(\\n        IERC20 _quoteToken,\\n        Decimal.decimal memory _requiredQuoteAmount\\n    ) internal {\\n        IERC20[] memory orderedTokens = getOrderedQuoteTokens(_quoteToken);\\n        for (uint256 i = 0; i < orderedTokens.length; i++) {\\n            // get how many amount of quote token i is still required\\n            Decimal.decimal memory swappedQuoteToken;\\n            Decimal.decimal memory otherQuoteRequiredAmount = exchange\\n                .getOutputPrice(\\n                    orderedTokens[i],\\n                    _quoteToken,\\n                    _requiredQuoteAmount\\n                );\\n\\n            // if balance of token i can afford the left debt, swap and return\\n            if (\\n                otherQuoteRequiredAmount.toUint() <=\\n                balanceOf(orderedTokens[i]).toUint()\\n            ) {\\n                swappedQuoteToken = swapInput(\\n                    orderedTokens[i],\\n                    _quoteToken,\\n                    otherQuoteRequiredAmount,\\n                    Decimal.zero()\\n                );\\n                return;\\n            }\\n\\n            // if balance of token i can't afford the left debt, show hand and move to the next one\\n            swappedQuoteToken = swapInput(\\n                orderedTokens[i],\\n                _quoteToken,\\n                balanceOf(orderedTokens[i]),\\n                Decimal.zero()\\n            );\\n            _requiredQuoteAmount = _requiredQuoteAmount.subD(swappedQuoteToken);\\n        }\\n\\n        // if all the quote tokens can't afford the debt, ask staking token to mint\\n        if (_requiredQuoteAmount.toUint() > 0) {\\n            Decimal.decimal memory requiredPerpAmount = exchange.getOutputPrice(\\n                perpToken,\\n                _quoteToken,\\n                _requiredQuoteAmount\\n            );\\n            minter.mintForLoss(requiredPerpAmount);\\n            swapInput(\\n                perpToken,\\n                _quoteToken,\\n                requiredPerpAmount,\\n                Decimal.zero()\\n            );\\n        }\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function isExistedAmm(IAmm _amm) public view override returns (bool) {\\n        return ammMap[address(_amm)];\\n    }\\n\\n    function getAllAmms() external view override returns (IAmm[] memory) {\\n        return amms;\\n    }\\n\\n    function isQuoteTokenExisted(IERC20 _token) internal view returns (bool) {\\n        return quoteTokenMap[address(_token)];\\n    }\\n\\n    function getOrderedQuoteTokens(\\n        IERC20 _exceptionQuoteToken\\n    ) internal view returns (IERC20[] memory orderedTokens) {\\n        IERC20[] memory tokens = quoteTokens;\\n        // insertion sort\\n        for (uint256 i = 0; i < getQuoteTokenLength(); i++) {\\n            IERC20 currentToken = quoteTokens[i];\\n            Decimal.decimal memory currentPerpValue = exchange.getInputPrice(\\n                currentToken,\\n                perpToken,\\n                balanceOf(currentToken)\\n            );\\n\\n            for (uint256 tokenIndex = i; tokenIndex > 0; tokenIndex--) {\\n                Decimal.decimal memory subsetPerpValue = exchange.getInputPrice(\\n                    tokens[tokenIndex - 1],\\n                    perpToken,\\n                    balanceOf(tokens[tokenIndex - 1])\\n                );\\n                if (currentPerpValue.toUint() > subsetPerpValue.toUint()) {\\n                    tokens[tokenIndex] = tokens[tokenIndex - 1];\\n                    tokens[tokenIndex - 1] = currentToken;\\n                }\\n            }\\n        }\\n\\n        orderedTokens = new IERC20[](tokens.length - 1);\\n        uint256 j;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            // jump to the next token\\n            if (tokens[i] == _exceptionQuoteToken) {\\n                continue;\\n            }\\n            orderedTokens[j] = tokens[i];\\n            j++;\\n        }\\n    }\\n\\n    function balanceOf(\\n        IERC20 _quoteToken\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _balanceOf(_quoteToken, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd33828e94108ef1ecbd0984fecb7d845dcc1e63de3b5c35dc3d176b203d5cc59\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct Ratios {\\n        Decimal.decimal feeRatio;\\n        Decimal.decimal initMarginRatio;\\n        Decimal.decimal maintenanceMarginRatio;\\n        Decimal.decimal partialLiquidationRatio;\\n        Decimal.decimal liquidationFeeRatio;\\n    }\\n\\n    function swapInput(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function settleFunding()\\n        external\\n        returns (\\n            SignedDecimal.signedDecimal memory premiumFraction,\\n            Decimal.decimal memory markPrice,\\n            Decimal.decimal memory indexPrice\\n        );\\n\\n    function repegPrice()\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function repegK(\\n        Decimal.decimal memory _multiplier\\n    )\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function updateFundingRate(\\n        SignedDecimal.signedDecimal memory,\\n        SignedDecimal.signedDecimal memory,\\n        Decimal.decimal memory\\n    ) external;\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function calcFee(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        bool _isOpenPos\\n    ) external view returns (Decimal.decimal memory fees);\\n\\n    function getMarkPrice() external view returns (Decimal.decimal memory);\\n\\n    function getIndexPrice() external view returns (Decimal.decimal memory);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    function getFeeRatio() external view returns (Decimal.decimal memory);\\n\\n    function getInitMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaintenanceMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getPartialLiquidationRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getLiquidationFeeRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaxHoldingBaseAsset()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDelta()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function fundingPeriod() external view returns (uint256);\\n\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    function getRatios() external view returns (Ratios memory);\\n\\n    function calcPriceRepegPnl(\\n        Decimal.decimal memory _repegTo\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function calcKRepegPnl(\\n        Decimal.decimal memory _k\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function isOverFluctuationLimit(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) external view returns (bool);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n\\n    function getInputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n}\\n\",\"keccak256\":\"0xa9c8cf13349b2d473e9df5491aa3ab6a352d683871774e5e5ba29274602886c4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExchangeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchangeWrapper {\\n    function swapInput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata inputTokenSold,\\n        Decimal.decimal calldata minOutputTokenBought,\\n        Decimal.decimal calldata maxPrice\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata outputTokenBought,\\n        Decimal.decimal calldata maxInputTokeSold,\\n        Decimal.decimal calldata maxPrice\\n    ) external returns (Decimal.decimal memory);\\n\\n    function getInputPrice(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata inputTokenSold\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata outputTokenBought\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getSpotPrice(\\n        IERC20 inputToken,\\n        IERC20 outputToken\\n    ) external view returns (Decimal.decimal memory);\\n}\\n\",\"keccak256\":\"0x0bc5b9cf9a10e12bd5cd93bb08a05dc888bc5bb361cbfb79e75cba9069676988\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInflationMonitor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IInflationMonitor {\\n    function isOverMintThreshold() external view returns (bool);\\n\\n    function appendMintedTokenHistory(\\n        Decimal.decimal calldata _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x52133e7a63b70d0df933a8dd441f6d048a8f383b9ead2aa85cd8f211e066e505\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IAmm} from \\\"./IAmm.sol\\\";\\n\\ninterface IInsuranceFund {\\n    function withdraw(\\n        IERC20 _quoteToken,\\n        Decimal.decimal calldata _amount\\n    ) external;\\n\\n    function isExistedAmm(IAmm _amm) external view returns (bool);\\n\\n    function getAllAmms() external view returns (IAmm[] memory);\\n}\\n\",\"keccak256\":\"0x0a8900d40c0e215bc6ccaaf3259cb535c7364126001413b3848b2c237afbecc0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMinter {\\n    function mintReward() external;\\n\\n    function mintForLoss(Decimal.decimal memory _amount) external;\\n\\n    function getPerpToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x1098007222b640dd2e9a006b4f90ddc3ff2818f6d3595c2170712b69bbc728d4\",\"license\":\"GPL-3.0\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        return decimal((x.d * (DecimalMath.unit(18))) % y.d);\\n    }\\n\\n    function cmp(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(decimal memory _y) internal pure returns (decimal memory) {\\n        uint256 y = _y.d * 1e18;\\n        uint256 z;\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return decimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5b42de95ec1faf055f3b13cd7467b7fb9ce57bfe5967407e57fcf6e0411374cf\",\"license\":\"GPL-3.0\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\n/**\\n * @title DecimalERC20\\n * @notice wrapper to interact with erc20 in decimal math\\n */\\nabstract contract DecimalERC20 {\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n\\n    uint256[50] private __gap;\\n\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 rawValue = _toUint(_token, _value);\\n        require(_token.transfer(_to, rawValue), \\\"transfer failed\\\");\\n        _validateBalance(_token, _to, rawValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 rawValue = _toUint(_token, _value);\\n        require(\\n            _token.transferFrom(_from, _to, rawValue),\\n            \\\"transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, rawValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(\\n        IERC20 _token,\\n        address _owner\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(\\n        IERC20 _token\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(\\n        IERC20 _token,\\n        uint256 _number\\n    ) internal view returns (Decimal.decimal memory) {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number / (10 ** (tokenDecimals - 18)));\\n        }\\n\\n        return Decimal.decimal(_number * (10 ** (uint256(18) - tokenDecimals)));\\n    }\\n\\n    function _toUint(\\n        IERC20 _token,\\n        Decimal.decimal memory _decimal\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint() * (10 ** (tokenDecimals - 18));\\n        }\\n        return _decimal.toUint() / (10 ** (uint256(18) - tokenDecimals));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        require(\\n            _token.approve(_spender, _toUint(_token, _value)),\\n            \\\"approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x487de458bb6fbefb856831545822990f1a3e101226be0a1e01673ff23626ae3c\",\"license\":\"GPL-3.0\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nlibrary DecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10 ** uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * y) / (unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0xb9b1495f2a60bdffdcfb0aad70ef3928ec081a094b68151d3845da8535c2460e\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(\\n        signedDecimal memory x\\n    ) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(\\n        signedDecimal memory _y\\n    ) internal pure returns (signedDecimal memory) {\\n        int256 y = _y.d * 1e18;\\n        int256 z;\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return signedDecimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5ed13cc8287d0d38d8e55f0af0c305255ffab19c8beb8df2b300209028b42d9c\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10 ** uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0x44be9eee14568549f21f9cb9066739a5624d895da606e4413878374c21cba993\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612360806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80639cadb3a0116100ad578063cf23097911610071578063cf2309791461027e578063d2f7265a14610291578063d926de1c146102a4578063f2fde38b146102b7578063fca3b5aa146102ca57600080fd5b80639cadb3a01461021f578063b7538c6214610232578063beb0597a14610247578063c68ade3714610258578063ca58b1981461026b57600080fd5b80635fa7b584116100f45780635fa7b584146101d857806367b1f5df146101eb578063715018a6146101fe5780638129fc1c146102065780638da5cb5b1461020e57600080fd5b806307546172146101315780630774a784146101615780631c31f7101461019d578063252978b8146101b25780632c9115c7146101c5575b600080fd5b60d054610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018d61016f366004611efe565b6001600160a01b0316600090815260ca602052604090205460ff1690565b6040519015158152602001610158565b6101b06101ab366004611efe565b6102dd565b005b6101b06101c0366004611f1b565b610307565b6101446101d3366004611f5c565b6104f5565b6101b06101e6366004611efe565b61051f565b6101b06101f9366004611efe565b61076f565b6101b0610799565b6101b06107ad565b6033546001600160a01b0316610144565b60cf54610144906001600160a01b031681565b61023a6108c6565b6040516101589190611f75565b60cd54604051908152602001610158565b6101b0610266366004611efe565b610928565b60d154610144906001600160a01b031681565b6101b061028c366004611efe565b610952565b60ce54610144906001600160a01b031681565b6101b06102b2366004611efe565b610b15565b6101b06102c5366004611efe565b610d37565b6101b06102d8366004611efe565b610dad565b6102e5610e55565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b60d2546001600160a01b031633146103665760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f742062656e65666963696172790000000000000060448201526064015b60405180910390fd5b6001600160a01b038216600090815260cb602052604090205460ff166103c75760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015260640161035d565b60006103d283610eaf565b90506103dc815190565b6103f26103ee3685900385018561200f565b5190565b111561042c5760006104138261040d3686900386018661200f565b90610ece565b905061041f8482610f02565b61042884610eaf565b9150505b61043e6103ee3684900384018461200f565b815110156104805760405162461bcd60e51b815260206004820152600f60248201526e08ceadcc840dcdee840cadcdeeaced608b1b604482015260640161035d565b61049983336104943686900386018661200f565b6111b2565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5336104cd6103ee3686900386018661200f565b604080516001600160a01b0390931683526020830191909152015b60405180910390a1505050565b60cd818154811061050557600080fd5b6000918252602090912001546001600160a01b0316905081565b610527610e55565b6001600160a01b038116600090815260cb602052604090205460ff166105835760405162461bcd60e51b81526020600482015260116024820152701d1bdad95b881b9bdd08195e1a5cdd1959607a1b604482015260640161035d565b6001600160a01b038116600090815260cb60205260408120805460ff1916905560cd54905b818110156106bb57826001600160a01b031660cd82815481106105cd576105cd612033565b6000918252602090912001546001600160a01b0316036106a9576105f260018361205f565b8110156106715760cd61060660018461205f565b8154811061061657610616612033565b60009182526020909120015460cd80546001600160a01b03909216918390811061064257610642612033565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60cd80548061068257610682612076565b600082815260209020810160001990810180546001600160a01b03191690550190556106bb565b806106b38161208c565b9150506105a8565b5060006106ca6103ee84610eaf565b111561072e5760006106da611296565b90506001600160a01b0381166106f8575060cf546001600160a01b03165b61072b838261070686610eaf565b604080516020808201835260009182905282519081019092528152611403565b611403565b50505b6040516001600160a01b03831681527f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3906020015b60405180910390a15050565b610777610e55565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6107a1610e55565b6107ab6000611567565b565b600054610100900460ff16158080156107cd5750600054600160ff909116105b806107e75750303b1580156107e7575060005460ff166001145b61084a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035d565b6000805460ff19166001179055801561086d576000805461ff0019166101001790555b6108756115b9565b61087d6115e8565b80156108c3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b606060cc80548060200260200160405190810160405280929190818152602001828054801561091e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610900575b5050505050905090565b610930610e55565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b61095a610e55565b6001600160a01b038116600090815260ca602052604090205460ff166109b45760405162461bcd60e51b815260206004820152600f60248201526e185b5b481b9bdd08195e1a5cdd1959608a1b604482015260640161035d565b6001600160a01b038116600090815260ca60205260408120805460ff1916905560cc54905b81811015610b1057826001600160a01b031660cc82815481106109fe576109fe612033565b6000918252602090912001546001600160a01b031603610afe5760cc610a2560018461205f565b81548110610a3557610a35612033565b60009182526020909120015460cc80546001600160a01b039092169183908110610a6157610a61612033565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060cc805480610aa057610aa0612076565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03851681527fdaad2af263ebb3abf337a324f20752addc3bf170971ce7b80cc3bfea1fcf30ee91016104e8565b80610b088161208c565b9150506109d9565b505050565b610b1d610e55565b6001600160a01b038116600090815260ca602052604090205460ff1615610b7a5760405162461bcd60e51b8152602060048201526011602482015270185b5b48185b1c9958591e481859191959607a1b604482015260640161035d565b6001600160a01b038116600081815260ca60209081526040808320805460ff1916600190811790915560cc805491820181559093527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe90920180546001600160a01b0319168417905590519182527f10cdbb821aa416c854add806e1d7e8138afe2a538921cebe99b1351362ae38b2910160405180910390a16000816001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7791906120a5565b9050610c9b816001600160a01b0316600090815260cb602052604090205460ff1690565b610d335760cd805460018082019092557f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e0180546001600160a01b0319166001600160a01b038416908117909155600081815260cb6020908152604091829020805460ff1916909417909355519081527f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a49101610763565b5050565b610d3f610e55565b6001600160a01b038116610da45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035d565b6108c381611567565b610db5610e55565b60d080546001600160a01b0319166001600160a01b0383169081179091556040805163eb7c8c2560e01b8152905163eb7c8c25916004808201926020929091908290030181865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906120a5565b60cf80546001600160a01b0319166001600160a01b039290921691909117905550565b6033546001600160a01b031633146107ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035d565b604080516020810190915260008152610ec88230611617565b92915050565b60408051602081019091526000815260408051602081019091526000815282518451610ef9916116a0565b81529392505050565b6000610f0d836116ac565b905060005b815181101561108a5760408051602081019091526000815260ce5483516000916001600160a01b03169063c643ea6390869086908110610f5457610f54612033565b602002602001015188886040518463ffffffff1660e01b8152600401610f7c939291906120c2565b602060405180830381865afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd91906120e5565b9050610fe46103ee858581518110610fd757610fd7612033565b6020026020010151610eaf565b8151116110345761102b84848151811061100057611000612033565b6020026020010151878361072660408051602080820183526000918290528251908101909252815290565b50505050505050565b61106784848151811061104957611049612033565b602002602001015187610706878781518110610fd757610fd7612033565b91506110738583610ece565b9450505080806110829061208c565b915050610f12565b506000611095835190565b1115610b105760ce5460cf5460405163c643ea6360e01b81526000926001600160a01b039081169263c643ea63926110d79290911690889088906004016120c2565b602060405180830381865afa1580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111891906120e5565b60d05460405163b90ffc4160e01b8152825160048201529192506001600160a01b03169063b90ffc4190602401600060405180830381600087803b15801561115f57600080fd5b505af1158015611173573d6000803e3d6000fd5b505060cf546111ab92506001600160a01b03169050858361072660408051602080820183526000918290528251908101909252815290565b5050505050565b6111bb83611a57565b60006111c78484611617565b905060006111d58584611aa1565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192509086169063a9059cbb906044016020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612109565b61128a5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260640161035d565b6111ab85858385611b03565b60cd546000908082036112ab57600091505090565b806001036112e25760cd6000815481106112c7576112c7612033565b6000918252602090912001546001600160a01b031692915050565b600060cd6000815481106112f8576112f8612033565b60009182526020822001546001600160a01b03169150819061131982610eaf565b905060015b848110156113f957600060cd828154811061133b5761133b612033565b600091825260208220015460ce546001600160a01b0391821693501663c1094e5b838861136782610eaf565b6040518463ffffffff1660e01b8152600401611385939291906120c2565b602060405180830381865afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c691906120e5565b905060006113d48286611b77565b60000b13156113e4578194508093505b505080806113f19061208c565b91505061131e565b5090949350505050565b604080516020810190915260008152825160000361143c575060408051602080820183526000918290528251908101909252815261155f565b60ce546114549086906001600160a01b031685611ba8565b60ce546001600160a01b031663e5e75d1e8686868661148a60408051602080820183526000918290528251908101909252815290565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501529051604484015251606483015251608482015260a4016020604051808303816000875af11580156114ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151091906120e5565b9050600061151c825190565b1161155f5760405162461bcd60e51b815260206004820152601360248201527222bc31b430b733b29039bbb0b81032b93937b960691b604482015260640161035d565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115e05760405162461bcd60e51b815260040161035d9061212b565b6107ab611be7565b600054610100900460ff1661160f5760405162461bcd60e51b815260040161035d9061212b565b6107ab611c17565b604080516020810182526000815290516370a0823160e01b81526001600160a01b0383811660048301526116999185918216906370a0823190602401602060405180830381865afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116949190612176565b611c45565b9392505050565b6000611699828461205f565b6060600060cd80548060200260200160405190810160405280929190818152602001828054801561170657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116e8575b5050505050905060005b60cd5481101561195857600060cd828154811061172f5761172f612033565b600091825260208220015460ce5460cf546001600160a01b0392831694509082169163c1094e5b9185911661176382610eaf565b6040518463ffffffff1660e01b8152600401611781939291906120c2565b602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c291906120e5565b9050825b80156119425760ce546000906001600160a01b031663c1094e5b876117ec60018661205f565b815181106117fc576117fc612033565b602090810291909101015160cf546001600160a01b03166118328a61182260018961205f565b81518110610fd757610fd7612033565b6040518463ffffffff1660e01b8152600401611850939291906120c2565b602060405180830381865afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906120e5565b905061189b815190565b8351111561192f57856118af60018461205f565b815181106118bf576118bf612033565b60200260200101518683815181106118d9576118d9612033565b6001600160a01b039092166020928302919091019091015283866118fe60018561205f565b8151811061190e5761190e612033565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061193a8161218f565b9150506117c6565b50505080806119509061208c565b915050611710565b5060018151611967919061205f565b67ffffffffffffffff81111561197f5761197f611fc2565b6040519080825280602002602001820160405280156119a8578160200160208202803683370190505b5091506000805b8251811015611a4f57846001600160a01b03168382815181106119d4576119d4612033565b60200260200101516001600160a01b03160315611a3d578281815181106119fd576119fd612033565b6020026020010151848381518110611a1757611a17612033565b6001600160a01b039092166020928302919091019091015281611a398161208c565b9250505b80611a478161208c565b9150506119af565b505050919050565b6000611a6282611cd8565b6001600160a01b0383166000908152609760205260409020549091508114610d33576001600160a01b0391909116600090815260976020526040902055565b600080611aad84611cd8565b905060128110611ae157611ac260128261205f565b611acd90600a61228a565b8351611ad99190612296565b915050610ec8565b611aec81601261205f565b611af790600a61228a565b835161155f91906122b5565b611b2a611b1a611b138685611c45565b8390611dec565b611b248686611617565b90611b77565b60000b15611b715760405162461bcd60e51b815260206004820152601460248201527318985b185b98d9481a5b98dbdb9cda5cdd195b9d60621b604482015260640161035d565b50505050565b805182516000911015611b8c57506001610ec8565b815183511015611b9f5750600019610ec8565b50600092915050565b611bb183611a57565b611bdc8383611bd760408051602080820183526000918290528251908101909252815290565b611e17565b610b10838383611e17565b600054610100900460ff16611c0e5760405162461bcd60e51b815260040161035d9061212b565b6107ab33611567565b600054610100900460ff16611c3e5760405162461bcd60e51b815260040161035d9061212b565b6001606555565b6040805160208101909152600081526000611c5f84611cd8565b905060128110611ca1576040518060200160405280601283611c81919061205f565b611c8c90600a61228a565b611c9690866122b5565b815250915050610ec8565b6040518060200160405280826012611cb9919061205f565b611cc490600a61228a565b611cce9086612296565b9052949350505050565b6001600160a01b038116600090815260976020526040812054808203610ec85760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03871691611d3b916122d7565b600060405180830381855afa9150503d8060008114611d76576040519150601f19603f3d011682016040523d82523d6000602084013e611d7b565b606091505b5091509150818015611d8d5750805115155b611dcf5760405162461bcd60e51b815260206004820152601360248201527219d95d08191958da5b585b1cc819985a5b1959606a1b604482015260640161035d565b80806020019051810190611de39190612176565b95945050505050565b60408051602081019091526000815260408051602081019091526000815282518451610ef991611edd565b826001600160a01b031663095ea7b383611e318685611aa1565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190612109565b610b105760405162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd994819985a5b195960921b604482015260640161035d565b60006116998284612312565b6001600160a01b03811681146108c357600080fd5b600060208284031215611f1057600080fd5b813561169981611ee9565b6000808284036040811215611f2f57600080fd5b8335611f3a81611ee9565b92506020601f1982011215611f4e57600080fd5b506020830190509250929050565b600060208284031215611f6e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611fb65783516001600160a01b031683529284019291840191600101611f91565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561200957634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561202157600080fd5b612029611fd8565b9135825250919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561207157612071612049565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001820161209e5761209e612049565b5060010190565b6000602082840312156120b757600080fd5b815161169981611ee9565b6001600160a01b0393841681529190921660208201529051604082015260600190565b6000602082840312156120f757600080fd5b6120ff611fd8565b9151825250919050565b60006020828403121561211b57600080fd5b8151801515811461169957600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561218857600080fd5b5051919050565b60008161219e5761219e612049565b506000190190565b600181815b808511156121e15781600019048211156121c7576121c7612049565b808516156121d457918102915b93841c93908002906121ab565b509250929050565b6000826121f857506001610ec8565b8161220557506000610ec8565b816001811461221b576002811461222557612241565b6001915050610ec8565b60ff84111561223657612236612049565b50506001821b610ec8565b5060208310610133831016604e8410600b8410161715612264575081810a610ec8565b61226e83836121a6565b806000190482111561228257612282612049565b029392505050565b600061169983836121e9565b60008160001904831182151516156122b0576122b0612049565b500290565b6000826122d257634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b818110156122f857602081860181015185830152016122de565b81811115612307576000828501525b509190910192915050565b6000821982111561232557612325612049565b50019056fea2646970667358221220e161ea2088c7ee2de7fe047dc190d1c8b23beec35356ca5c2c500e0ad85a2bba64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80639cadb3a0116100ad578063cf23097911610071578063cf2309791461027e578063d2f7265a14610291578063d926de1c146102a4578063f2fde38b146102b7578063fca3b5aa146102ca57600080fd5b80639cadb3a01461021f578063b7538c6214610232578063beb0597a14610247578063c68ade3714610258578063ca58b1981461026b57600080fd5b80635fa7b584116100f45780635fa7b584146101d857806367b1f5df146101eb578063715018a6146101fe5780638129fc1c146102065780638da5cb5b1461020e57600080fd5b806307546172146101315780630774a784146101615780631c31f7101461019d578063252978b8146101b25780632c9115c7146101c5575b600080fd5b60d054610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018d61016f366004611efe565b6001600160a01b0316600090815260ca602052604090205460ff1690565b6040519015158152602001610158565b6101b06101ab366004611efe565b6102dd565b005b6101b06101c0366004611f1b565b610307565b6101446101d3366004611f5c565b6104f5565b6101b06101e6366004611efe565b61051f565b6101b06101f9366004611efe565b61076f565b6101b0610799565b6101b06107ad565b6033546001600160a01b0316610144565b60cf54610144906001600160a01b031681565b61023a6108c6565b6040516101589190611f75565b60cd54604051908152602001610158565b6101b0610266366004611efe565b610928565b60d154610144906001600160a01b031681565b6101b061028c366004611efe565b610952565b60ce54610144906001600160a01b031681565b6101b06102b2366004611efe565b610b15565b6101b06102c5366004611efe565b610d37565b6101b06102d8366004611efe565b610dad565b6102e5610e55565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b60d2546001600160a01b031633146103665760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f742062656e65666963696172790000000000000060448201526064015b60405180910390fd5b6001600160a01b038216600090815260cb602052604090205460ff166103c75760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015260640161035d565b60006103d283610eaf565b90506103dc815190565b6103f26103ee3685900385018561200f565b5190565b111561042c5760006104138261040d3686900386018661200f565b90610ece565b905061041f8482610f02565b61042884610eaf565b9150505b61043e6103ee3684900384018461200f565b815110156104805760405162461bcd60e51b815260206004820152600f60248201526e08ceadcc840dcdee840cadcdeeaced608b1b604482015260640161035d565b61049983336104943686900386018661200f565b6111b2565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5336104cd6103ee3686900386018661200f565b604080516001600160a01b0390931683526020830191909152015b60405180910390a1505050565b60cd818154811061050557600080fd5b6000918252602090912001546001600160a01b0316905081565b610527610e55565b6001600160a01b038116600090815260cb602052604090205460ff166105835760405162461bcd60e51b81526020600482015260116024820152701d1bdad95b881b9bdd08195e1a5cdd1959607a1b604482015260640161035d565b6001600160a01b038116600090815260cb60205260408120805460ff1916905560cd54905b818110156106bb57826001600160a01b031660cd82815481106105cd576105cd612033565b6000918252602090912001546001600160a01b0316036106a9576105f260018361205f565b8110156106715760cd61060660018461205f565b8154811061061657610616612033565b60009182526020909120015460cd80546001600160a01b03909216918390811061064257610642612033565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60cd80548061068257610682612076565b600082815260209020810160001990810180546001600160a01b03191690550190556106bb565b806106b38161208c565b9150506105a8565b5060006106ca6103ee84610eaf565b111561072e5760006106da611296565b90506001600160a01b0381166106f8575060cf546001600160a01b03165b61072b838261070686610eaf565b604080516020808201835260009182905282519081019092528152611403565b611403565b50505b6040516001600160a01b03831681527f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3906020015b60405180910390a15050565b610777610e55565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6107a1610e55565b6107ab6000611567565b565b600054610100900460ff16158080156107cd5750600054600160ff909116105b806107e75750303b1580156107e7575060005460ff166001145b61084a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035d565b6000805460ff19166001179055801561086d576000805461ff0019166101001790555b6108756115b9565b61087d6115e8565b80156108c3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b606060cc80548060200260200160405190810160405280929190818152602001828054801561091e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610900575b5050505050905090565b610930610e55565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b61095a610e55565b6001600160a01b038116600090815260ca602052604090205460ff166109b45760405162461bcd60e51b815260206004820152600f60248201526e185b5b481b9bdd08195e1a5cdd1959608a1b604482015260640161035d565b6001600160a01b038116600090815260ca60205260408120805460ff1916905560cc54905b81811015610b1057826001600160a01b031660cc82815481106109fe576109fe612033565b6000918252602090912001546001600160a01b031603610afe5760cc610a2560018461205f565b81548110610a3557610a35612033565b60009182526020909120015460cc80546001600160a01b039092169183908110610a6157610a61612033565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060cc805480610aa057610aa0612076565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03851681527fdaad2af263ebb3abf337a324f20752addc3bf170971ce7b80cc3bfea1fcf30ee91016104e8565b80610b088161208c565b9150506109d9565b505050565b610b1d610e55565b6001600160a01b038116600090815260ca602052604090205460ff1615610b7a5760405162461bcd60e51b8152602060048201526011602482015270185b5b48185b1c9958591e481859191959607a1b604482015260640161035d565b6001600160a01b038116600081815260ca60209081526040808320805460ff1916600190811790915560cc805491820181559093527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe90920180546001600160a01b0319168417905590519182527f10cdbb821aa416c854add806e1d7e8138afe2a538921cebe99b1351362ae38b2910160405180910390a16000816001600160a01b031663fdf262b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7791906120a5565b9050610c9b816001600160a01b0316600090815260cb602052604090205460ff1690565b610d335760cd805460018082019092557f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e0180546001600160a01b0319166001600160a01b038416908117909155600081815260cb6020908152604091829020805460ff1916909417909355519081527f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a49101610763565b5050565b610d3f610e55565b6001600160a01b038116610da45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035d565b6108c381611567565b610db5610e55565b60d080546001600160a01b0319166001600160a01b0383169081179091556040805163eb7c8c2560e01b8152905163eb7c8c25916004808201926020929091908290030181865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906120a5565b60cf80546001600160a01b0319166001600160a01b039290921691909117905550565b6033546001600160a01b031633146107ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035d565b604080516020810190915260008152610ec88230611617565b92915050565b60408051602081019091526000815260408051602081019091526000815282518451610ef9916116a0565b81529392505050565b6000610f0d836116ac565b905060005b815181101561108a5760408051602081019091526000815260ce5483516000916001600160a01b03169063c643ea6390869086908110610f5457610f54612033565b602002602001015188886040518463ffffffff1660e01b8152600401610f7c939291906120c2565b602060405180830381865afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd91906120e5565b9050610fe46103ee858581518110610fd757610fd7612033565b6020026020010151610eaf565b8151116110345761102b84848151811061100057611000612033565b6020026020010151878361072660408051602080820183526000918290528251908101909252815290565b50505050505050565b61106784848151811061104957611049612033565b602002602001015187610706878781518110610fd757610fd7612033565b91506110738583610ece565b9450505080806110829061208c565b915050610f12565b506000611095835190565b1115610b105760ce5460cf5460405163c643ea6360e01b81526000926001600160a01b039081169263c643ea63926110d79290911690889088906004016120c2565b602060405180830381865afa1580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111891906120e5565b60d05460405163b90ffc4160e01b8152825160048201529192506001600160a01b03169063b90ffc4190602401600060405180830381600087803b15801561115f57600080fd5b505af1158015611173573d6000803e3d6000fd5b505060cf546111ab92506001600160a01b03169050858361072660408051602080820183526000918290528251908101909252815290565b5050505050565b6111bb83611a57565b60006111c78484611617565b905060006111d58584611aa1565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192509086169063a9059cbb906044016020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612109565b61128a5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260640161035d565b6111ab85858385611b03565b60cd546000908082036112ab57600091505090565b806001036112e25760cd6000815481106112c7576112c7612033565b6000918252602090912001546001600160a01b031692915050565b600060cd6000815481106112f8576112f8612033565b60009182526020822001546001600160a01b03169150819061131982610eaf565b905060015b848110156113f957600060cd828154811061133b5761133b612033565b600091825260208220015460ce546001600160a01b0391821693501663c1094e5b838861136782610eaf565b6040518463ffffffff1660e01b8152600401611385939291906120c2565b602060405180830381865afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c691906120e5565b905060006113d48286611b77565b60000b13156113e4578194508093505b505080806113f19061208c565b91505061131e565b5090949350505050565b604080516020810190915260008152825160000361143c575060408051602080820183526000918290528251908101909252815261155f565b60ce546114549086906001600160a01b031685611ba8565b60ce546001600160a01b031663e5e75d1e8686868661148a60408051602080820183526000918290528251908101909252815290565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501529051604484015251606483015251608482015260a4016020604051808303816000875af11580156114ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151091906120e5565b9050600061151c825190565b1161155f5760405162461bcd60e51b815260206004820152601360248201527222bc31b430b733b29039bbb0b81032b93937b960691b604482015260640161035d565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115e05760405162461bcd60e51b815260040161035d9061212b565b6107ab611be7565b600054610100900460ff1661160f5760405162461bcd60e51b815260040161035d9061212b565b6107ab611c17565b604080516020810182526000815290516370a0823160e01b81526001600160a01b0383811660048301526116999185918216906370a0823190602401602060405180830381865afa158015611670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116949190612176565b611c45565b9392505050565b6000611699828461205f565b6060600060cd80548060200260200160405190810160405280929190818152602001828054801561170657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116e8575b5050505050905060005b60cd5481101561195857600060cd828154811061172f5761172f612033565b600091825260208220015460ce5460cf546001600160a01b0392831694509082169163c1094e5b9185911661176382610eaf565b6040518463ffffffff1660e01b8152600401611781939291906120c2565b602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c291906120e5565b9050825b80156119425760ce546000906001600160a01b031663c1094e5b876117ec60018661205f565b815181106117fc576117fc612033565b602090810291909101015160cf546001600160a01b03166118328a61182260018961205f565b81518110610fd757610fd7612033565b6040518463ffffffff1660e01b8152600401611850939291906120c2565b602060405180830381865afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906120e5565b905061189b815190565b8351111561192f57856118af60018461205f565b815181106118bf576118bf612033565b60200260200101518683815181106118d9576118d9612033565b6001600160a01b039092166020928302919091019091015283866118fe60018561205f565b8151811061190e5761190e612033565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061193a8161218f565b9150506117c6565b50505080806119509061208c565b915050611710565b5060018151611967919061205f565b67ffffffffffffffff81111561197f5761197f611fc2565b6040519080825280602002602001820160405280156119a8578160200160208202803683370190505b5091506000805b8251811015611a4f57846001600160a01b03168382815181106119d4576119d4612033565b60200260200101516001600160a01b03160315611a3d578281815181106119fd576119fd612033565b6020026020010151848381518110611a1757611a17612033565b6001600160a01b039092166020928302919091019091015281611a398161208c565b9250505b80611a478161208c565b9150506119af565b505050919050565b6000611a6282611cd8565b6001600160a01b0383166000908152609760205260409020549091508114610d33576001600160a01b0391909116600090815260976020526040902055565b600080611aad84611cd8565b905060128110611ae157611ac260128261205f565b611acd90600a61228a565b8351611ad99190612296565b915050610ec8565b611aec81601261205f565b611af790600a61228a565b835161155f91906122b5565b611b2a611b1a611b138685611c45565b8390611dec565b611b248686611617565b90611b77565b60000b15611b715760405162461bcd60e51b815260206004820152601460248201527318985b185b98d9481a5b98dbdb9cda5cdd195b9d60621b604482015260640161035d565b50505050565b805182516000911015611b8c57506001610ec8565b815183511015611b9f5750600019610ec8565b50600092915050565b611bb183611a57565b611bdc8383611bd760408051602080820183526000918290528251908101909252815290565b611e17565b610b10838383611e17565b600054610100900460ff16611c0e5760405162461bcd60e51b815260040161035d9061212b565b6107ab33611567565b600054610100900460ff16611c3e5760405162461bcd60e51b815260040161035d9061212b565b6001606555565b6040805160208101909152600081526000611c5f84611cd8565b905060128110611ca1576040518060200160405280601283611c81919061205f565b611c8c90600a61228a565b611c9690866122b5565b815250915050610ec8565b6040518060200160405280826012611cb9919061205f565b611cc490600a61228a565b611cce9086612296565b9052949350505050565b6001600160a01b038116600090815260976020526040812054808203610ec85760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916001600160a01b03871691611d3b916122d7565b600060405180830381855afa9150503d8060008114611d76576040519150601f19603f3d011682016040523d82523d6000602084013e611d7b565b606091505b5091509150818015611d8d5750805115155b611dcf5760405162461bcd60e51b815260206004820152601360248201527219d95d08191958da5b585b1cc819985a5b1959606a1b604482015260640161035d565b80806020019051810190611de39190612176565b95945050505050565b60408051602081019091526000815260408051602081019091526000815282518451610ef991611edd565b826001600160a01b031663095ea7b383611e318685611aa1565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190612109565b610b105760405162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd994819985a5b195960921b604482015260640161035d565b60006116998284612312565b6001600160a01b03811681146108c357600080fd5b600060208284031215611f1057600080fd5b813561169981611ee9565b6000808284036040811215611f2f57600080fd5b8335611f3a81611ee9565b92506020601f1982011215611f4e57600080fd5b506020830190509250929050565b600060208284031215611f6e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611fb65783516001600160a01b031683529284019291840191600101611f91565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff8111828210171561200957634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561202157600080fd5b612029611fd8565b9135825250919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561207157612071612049565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001820161209e5761209e612049565b5060010190565b6000602082840312156120b757600080fd5b815161169981611ee9565b6001600160a01b0393841681529190921660208201529051604082015260600190565b6000602082840312156120f757600080fd5b6120ff611fd8565b9151825250919050565b60006020828403121561211b57600080fd5b8151801515811461169957600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561218857600080fd5b5051919050565b60008161219e5761219e612049565b506000190190565b600181815b808511156121e15781600019048211156121c7576121c7612049565b808516156121d457918102915b93841c93908002906121ab565b509250929050565b6000826121f857506001610ec8565b8161220557506000610ec8565b816001811461221b576002811461222557612241565b6001915050610ec8565b60ff84111561223657612236612049565b50506001821b610ec8565b5060208310610133831016604e8410600b8410161715612264575081810a610ec8565b61226e83836121a6565b806000190482111561228257612282612049565b029392505050565b600061169983836121e9565b60008160001904831182151516156122b0576122b0612049565b500290565b6000826122d257634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b818110156122f857602081860181015185830152016122de565b81811115612307576000828501525b509190910192915050565b6000821982111561232557612325612049565b50019056fea2646970667358221220e161ea2088c7ee2de7fe047dc190d1c8b23beec35356ca5c2c500e0ad85a2bba64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAmm(address)": {
        "details": "only owner can call",
        "params": {
          "_amm": "IAmm address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAmm(address)": {
        "details": "only owner can call. no need to call",
        "params": {
          "_amm": "IAmm address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,(uint256))": {
        "params": {
          "_amount": "the amount of quoteToken caller want to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw(address,(uint256))": {
        "notice": "withdraw token to caller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 698,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 372,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2793,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "decimalMap",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2797,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 842,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "ammMap",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 846,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "quoteTokenMap",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 850,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "amms",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_contract(IAmm)2253)dyn_storage"
      },
      {
        "astId": 854,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "quoteTokens",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_contract(IERC20)777)dyn_storage"
      },
      {
        "astId": 857,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "exchange",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IExchangeWrapper)2345"
      },
      {
        "astId": 860,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "perpToken",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 863,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "minter",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IMinter)2418"
      },
      {
        "astId": 866,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "inflationMonitor",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IInflationMonitor)2362"
      },
      {
        "astId": 868,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "beneficiary",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 872,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "211",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IAmm)2253)dyn_storage": {
        "base": "t_contract(IAmm)2253",
        "encoding": "dynamic_array",
        "label": "contract IAmm[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)777)dyn_storage": {
        "base": "t_contract(IERC20)777",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAmm)2253": {
        "encoding": "inplace",
        "label": "contract IAmm",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchangeWrapper)2345": {
        "encoding": "inplace",
        "label": "contract IExchangeWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(IInflationMonitor)2362": {
        "encoding": "inplace",
        "label": "contract IInflationMonitor",
        "numberOfBytes": "20"
      },
      "t_contract(IMinter)2418": {
        "encoding": "inplace",
        "label": "contract IMinter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
