{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/InsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\npragma experimental ABIEncoderV2;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Decimal} from \"./utils/Decimal.sol\";\nimport {IExchangeWrapper} from \"./interfaces/IExchangeWrapper.sol\";\nimport {IInsuranceFund} from \"./interfaces/IInsuranceFund.sol\";\nimport {DecimalERC20} from \"./utils/DecimalERC20.sol\";\nimport {IMinter} from \"./interfaces/IMinter.sol\";\nimport {IAmm} from \"./interfaces/IAmm.sol\";\nimport {IInflationMonitor} from \"./interfaces/IInflationMonitor.sol\";\n\ncontract InsuranceFund is\n    IInsuranceFund,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    DecimalERC20\n{\n    using Decimal for Decimal.decimal;\n\n    //\n    // EVENTS\n    //\n\n    event Withdrawn(address withdrawer, uint256 amount);\n    event TokenAdded(address tokenAddress);\n    event TokenRemoved(address tokenAddress);\n    event ShutdownAllAmms(uint256 blockNumber);\n    event AmmAdded(address amm);\n    event AmmRemoved(address amm);\n\n    //**********************************************************//\n    //    The below state variables can not change the order    //\n    //**********************************************************//\n\n    mapping(address => bool) private ammMap;\n    mapping(address => bool) private quoteTokenMap;\n    IAmm[] private amms;\n    IERC20[] public quoteTokens;\n\n    // contract dependencies\n    IExchangeWrapper public exchange;\n    IERC20 public perpToken;\n    IMinter public minter;\n    IInflationMonitor public inflationMonitor;\n    address private beneficiary;\n\n    //**********************************************************//\n    //    The above state variables can not change the order    //\n    //**********************************************************//\n\n    //◥◤◥◤◥◤◥◤◥◤◥◤◥◤◥◤ add state variables below ◥◤◥◤◥◤◥◤◥◤◥◤◥◤◥◤//\n\n    //◢◣◢◣◢◣◢◣◢◣◢◣◢◣◢◣ add state variables above ◢◣◢◣◢◣◢◣◢◣◢◣◢◣◢◣//\n    uint256[50] private __gap;\n\n    //\n    // FUNCTIONS\n    //\n\n    function initialize() external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n    }\n\n    /**\n     * @dev only owner can call\n     * @param _amm IAmm address\n     */\n    function addAmm(IAmm _amm) public onlyOwner {\n        require(!isExistedAmm(_amm), \"amm already added\");\n        ammMap[address(_amm)] = true;\n        amms.push(_amm);\n        emit AmmAdded(address(_amm));\n\n        // add token if it's new one\n        IERC20 token = _amm.quoteAsset();\n        if (!isQuoteTokenExisted(token)) {\n            quoteTokens.push(token);\n            quoteTokenMap[address(token)] = true;\n            emit TokenAdded(address(token));\n        }\n    }\n\n    /**\n     * @dev only owner can call. no need to call\n     * @param _amm IAmm address\n     */\n    function removeAmm(IAmm _amm) external onlyOwner {\n        require(isExistedAmm(_amm), \"amm not existed\");\n        ammMap[address(_amm)] = false;\n        uint256 ammLength = amms.length;\n        for (uint256 i = 0; i < ammLength; i++) {\n            if (amms[i] == _amm) {\n                amms[i] = amms[ammLength - 1];\n                amms.pop();\n                emit AmmRemoved(address(_amm));\n                break;\n            }\n        }\n    }\n\n    function removeToken(IERC20 _token) external onlyOwner {\n        require(isQuoteTokenExisted(_token), \"token not existed\");\n\n        quoteTokenMap[address(_token)] = false;\n        uint256 quoteTokensLength = getQuoteTokenLength();\n        for (uint256 i = 0; i < quoteTokensLength; i++) {\n            if (quoteTokens[i] == _token) {\n                if (i < quoteTokensLength - 1) {\n                    quoteTokens[i] = quoteTokens[quoteTokensLength - 1];\n                }\n                quoteTokens.pop();\n                break;\n            }\n        }\n\n        // exchange and transfer to the quoteToken with the most value. if no more quoteToken, buy protocol tokens\n        // TODO use curve or balancer fund token for pooling the fees will be less painful\n        if (balanceOf(_token).toUint() > 0) {\n            address outputToken = getTokenWithMaxValue();\n            if (outputToken == address(0)) {\n                outputToken = address(perpToken);\n            }\n            swapInput(\n                _token,\n                IERC20(outputToken),\n                balanceOf(_token),\n                Decimal.zero()\n            );\n        }\n\n        emit TokenRemoved(address(_token));\n    }\n\n    /**\n     * @notice withdraw token to caller\n     * @param _amount the amount of quoteToken caller want to withdraw\n     */\n    function withdraw(\n        IERC20 _quoteToken,\n        Decimal.decimal calldata _amount\n    ) external override {\n        require(beneficiary == _msgSender(), \"caller is not beneficiary\");\n        require(isQuoteTokenExisted(_quoteToken), \"Asset is not supported\");\n\n        Decimal.decimal memory quoteBalance = balanceOf(_quoteToken);\n        if (_amount.toUint() > quoteBalance.toUint()) {\n            Decimal.decimal memory insufficientAmount = _amount.subD(\n                quoteBalance\n            );\n            swapEnoughQuoteAmount(_quoteToken, insufficientAmount);\n            quoteBalance = balanceOf(_quoteToken);\n        }\n        require(quoteBalance.toUint() >= _amount.toUint(), \"Fund not enough\");\n\n        _transfer(_quoteToken, _msgSender(), _amount);\n        emit Withdrawn(_msgSender(), _amount.toUint());\n    }\n\n    //\n    // SETTER\n    //\n\n    function setExchange(IExchangeWrapper _exchange) external onlyOwner {\n        exchange = _exchange;\n    }\n\n    function setBeneficiary(address _beneficiary) external onlyOwner {\n        beneficiary = _beneficiary;\n    }\n\n    function setMinter(IMinter _minter) public onlyOwner {\n        minter = _minter;\n        perpToken = minter.getPerpToken();\n    }\n\n    function setInflationMonitor(\n        IInflationMonitor _inflationMonitor\n    ) external onlyOwner {\n        inflationMonitor = _inflationMonitor;\n    }\n\n    function getQuoteTokenLength() public view returns (uint256) {\n        return quoteTokens.length;\n    }\n\n    //\n    // INTERNAL FUNCTIONS\n    //\n\n    function getTokenWithMaxValue() internal view returns (address) {\n        uint256 numOfQuoteTokens = quoteTokens.length;\n        if (numOfQuoteTokens == 0) {\n            return address(0);\n        }\n        if (numOfQuoteTokens == 1) {\n            return address(quoteTokens[0]);\n        }\n\n        IERC20 denominatedToken = quoteTokens[0];\n        IERC20 maxValueToken = denominatedToken;\n        Decimal.decimal memory valueOfMaxValueToken = balanceOf(\n            denominatedToken\n        );\n        for (uint256 i = 1; i < numOfQuoteTokens; i++) {\n            IERC20 quoteToken = quoteTokens[i];\n            Decimal.decimal memory quoteTokenValue = exchange.getInputPrice(\n                quoteToken,\n                denominatedToken,\n                balanceOf(quoteToken)\n            );\n            if (quoteTokenValue.cmp(valueOfMaxValueToken) > 0) {\n                maxValueToken = quoteToken;\n                valueOfMaxValueToken = quoteTokenValue;\n            }\n        }\n        return address(maxValueToken);\n    }\n\n    function swapInput(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal memory inputTokenSold,\n        Decimal.decimal memory minOutputTokenBought\n    ) internal returns (Decimal.decimal memory received) {\n        if (inputTokenSold.toUint() == 0) {\n            return Decimal.zero();\n        }\n        _approve(inputToken, address(exchange), inputTokenSold);\n        received = exchange.swapInput(\n            inputToken,\n            outputToken,\n            inputTokenSold,\n            minOutputTokenBought,\n            Decimal.zero()\n        );\n        require(received.toUint() > 0, \"Exchange swap error\");\n    }\n\n    function swapOutput(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal memory outputTokenBought,\n        Decimal.decimal memory maxInputTokenSold\n    ) internal returns (Decimal.decimal memory received) {\n        if (outputTokenBought.toUint() == 0) {\n            return Decimal.zero();\n        }\n        _approve(inputToken, address(exchange), maxInputTokenSold);\n        received = exchange.swapOutput(\n            inputToken,\n            outputToken,\n            outputTokenBought,\n            maxInputTokenSold,\n            Decimal.zero()\n        );\n        require(received.toUint() > 0, \"Exchange swap error\");\n    }\n\n    function swapEnoughQuoteAmount(\n        IERC20 _quoteToken,\n        Decimal.decimal memory _requiredQuoteAmount\n    ) internal {\n        IERC20[] memory orderedTokens = getOrderedQuoteTokens(_quoteToken);\n        for (uint256 i = 0; i < orderedTokens.length; i++) {\n            // get how many amount of quote token i is still required\n            Decimal.decimal memory swappedQuoteToken;\n            Decimal.decimal memory otherQuoteRequiredAmount = exchange\n                .getOutputPrice(\n                    orderedTokens[i],\n                    _quoteToken,\n                    _requiredQuoteAmount\n                );\n\n            // if balance of token i can afford the left debt, swap and return\n            if (\n                otherQuoteRequiredAmount.toUint() <=\n                balanceOf(orderedTokens[i]).toUint()\n            ) {\n                swappedQuoteToken = swapInput(\n                    orderedTokens[i],\n                    _quoteToken,\n                    otherQuoteRequiredAmount,\n                    Decimal.zero()\n                );\n                return;\n            }\n\n            // if balance of token i can't afford the left debt, show hand and move to the next one\n            swappedQuoteToken = swapInput(\n                orderedTokens[i],\n                _quoteToken,\n                balanceOf(orderedTokens[i]),\n                Decimal.zero()\n            );\n            _requiredQuoteAmount = _requiredQuoteAmount.subD(swappedQuoteToken);\n        }\n\n        // if all the quote tokens can't afford the debt, ask staking token to mint\n        if (_requiredQuoteAmount.toUint() > 0) {\n            Decimal.decimal memory requiredPerpAmount = exchange.getOutputPrice(\n                perpToken,\n                _quoteToken,\n                _requiredQuoteAmount\n            );\n            minter.mintForLoss(requiredPerpAmount);\n            swapInput(\n                perpToken,\n                _quoteToken,\n                requiredPerpAmount,\n                Decimal.zero()\n            );\n        }\n    }\n\n    //\n    // VIEW\n    //\n    function isExistedAmm(IAmm _amm) public view override returns (bool) {\n        return ammMap[address(_amm)];\n    }\n\n    function getAllAmms() external view override returns (IAmm[] memory) {\n        return amms;\n    }\n\n    function isQuoteTokenExisted(IERC20 _token) internal view returns (bool) {\n        return quoteTokenMap[address(_token)];\n    }\n\n    function getOrderedQuoteTokens(\n        IERC20 _exceptionQuoteToken\n    ) internal view returns (IERC20[] memory orderedTokens) {\n        IERC20[] memory tokens = quoteTokens;\n        // insertion sort\n        for (uint256 i = 0; i < getQuoteTokenLength(); i++) {\n            IERC20 currentToken = quoteTokens[i];\n            Decimal.decimal memory currentPerpValue = exchange.getInputPrice(\n                currentToken,\n                perpToken,\n                balanceOf(currentToken)\n            );\n\n            for (uint256 tokenIndex = i; tokenIndex > 0; tokenIndex--) {\n                Decimal.decimal memory subsetPerpValue = exchange.getInputPrice(\n                    tokens[tokenIndex - 1],\n                    perpToken,\n                    balanceOf(tokens[tokenIndex - 1])\n                );\n                if (currentPerpValue.toUint() > subsetPerpValue.toUint()) {\n                    tokens[tokenIndex] = tokens[tokenIndex - 1];\n                    tokens[tokenIndex - 1] = currentToken;\n                }\n            }\n        }\n\n        orderedTokens = new IERC20[](tokens.length - 1);\n        uint256 j;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            // jump to the next token\n            if (tokens[i] == _exceptionQuoteToken) {\n                continue;\n            }\n            orderedTokens[j] = tokens[i];\n            j++;\n        }\n    }\n\n    function balanceOf(\n        IERC20 _quoteToken\n    ) internal view returns (Decimal.decimal memory) {\n        return _balanceOf(_quoteToken, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IAmm.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Decimal} from \"../utils/Decimal.sol\";\nimport {SignedDecimal} from \"../utils/SignedDecimal.sol\";\n\ninterface IAmm {\n    /**\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\n     * @param ADD_TO_AMM add asset to Amm\n     * @param REMOVE_FROM_AMM remove asset from Amm\n     */\n    enum Dir {\n        ADD_TO_AMM,\n        REMOVE_FROM_AMM\n    }\n\n    struct Ratios {\n        Decimal.decimal feeRatio;\n        Decimal.decimal initMarginRatio;\n        Decimal.decimal maintenanceMarginRatio;\n        Decimal.decimal partialLiquidationRatio;\n        Decimal.decimal liquidationFeeRatio;\n    }\n\n    function swapInput(\n        Dir _dirOfQuote,\n        Decimal.decimal calldata _quoteAssetAmount,\n        Decimal.decimal calldata _baseAssetAmountLimit,\n        bool _canOverFluctuationLimit\n    ) external returns (Decimal.decimal memory);\n\n    function swapOutput(\n        Dir _dirOfBase,\n        Decimal.decimal calldata _baseAssetAmount,\n        Decimal.decimal calldata _quoteAssetAmountLimit\n    ) external returns (Decimal.decimal memory);\n\n    function settleFunding()\n        external\n        returns (\n            SignedDecimal.signedDecimal memory premiumFraction,\n            Decimal.decimal memory markPrice,\n            Decimal.decimal memory indexPrice\n        );\n\n    function repegPrice()\n        external\n        returns (\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            SignedDecimal.signedDecimal memory\n        );\n\n    function repegK(\n        Decimal.decimal memory _multiplier\n    )\n        external\n        returns (\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            Decimal.decimal memory,\n            SignedDecimal.signedDecimal memory\n        );\n\n    function updateFundingRate(\n        SignedDecimal.signedDecimal memory,\n        SignedDecimal.signedDecimal memory,\n        Decimal.decimal memory\n    ) external;\n\n    //\n    // VIEW\n    //\n\n    function calcFee(\n        Dir _dirOfQuote,\n        Decimal.decimal calldata _quoteAssetAmount,\n        bool _isOpenPos\n    ) external view returns (Decimal.decimal memory fees);\n\n    function getMarkPrice() external view returns (Decimal.decimal memory);\n\n    function getIndexPrice() external view returns (Decimal.decimal memory);\n\n    function getReserves()\n        external\n        view\n        returns (Decimal.decimal memory, Decimal.decimal memory);\n\n    function getFeeRatio() external view returns (Decimal.decimal memory);\n\n    function getInitMarginRatio()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getMaintenanceMarginRatio()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getPartialLiquidationRatio()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getLiquidationFeeRatio()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getMaxHoldingBaseAsset()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getOpenInterestNotionalCap()\n        external\n        view\n        returns (Decimal.decimal memory);\n\n    function getBaseAssetDelta()\n        external\n        view\n        returns (SignedDecimal.signedDecimal memory);\n\n    function getCumulativeNotional()\n        external\n        view\n        returns (SignedDecimal.signedDecimal memory);\n\n    function fundingPeriod() external view returns (uint256);\n\n    function quoteAsset() external view returns (IERC20);\n\n    function open() external view returns (bool);\n\n    function getRatios() external view returns (Ratios memory);\n\n    function calcPriceRepegPnl(\n        Decimal.decimal memory _repegTo\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\n\n    function calcKRepegPnl(\n        Decimal.decimal memory _k\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\n\n    function isOverFluctuationLimit(\n        Dir _dirOfBase,\n        Decimal.decimal memory _baseAssetAmount\n    ) external view returns (bool);\n\n    function isOverSpreadLimit() external view returns (bool);\n\n    function getInputTwap(\n        Dir _dir,\n        Decimal.decimal calldata _quoteAssetAmount\n    ) external view returns (Decimal.decimal memory);\n\n    function getOutputTwap(\n        Dir _dir,\n        Decimal.decimal calldata _baseAssetAmount\n    ) external view returns (Decimal.decimal memory);\n\n    function getInputPrice(\n        Dir _dir,\n        Decimal.decimal calldata _quoteAssetAmount\n    ) external view returns (Decimal.decimal memory);\n\n    function getOutputPrice(\n        Dir _dir,\n        Decimal.decimal calldata _baseAssetAmount\n    ) external view returns (Decimal.decimal memory);\n\n    function getInputPriceWithReserves(\n        Dir _dir,\n        Decimal.decimal memory _quoteAssetAmount,\n        Decimal.decimal memory _quoteAssetPoolAmount,\n        Decimal.decimal memory _baseAssetPoolAmount\n    ) external view returns (Decimal.decimal memory);\n\n    function getOutputPriceWithReserves(\n        Dir _dir,\n        Decimal.decimal memory _baseAssetAmount,\n        Decimal.decimal memory _quoteAssetPoolAmount,\n        Decimal.decimal memory _baseAssetPoolAmount\n    ) external view returns (Decimal.decimal memory);\n}\n"
    },
    "contracts/interfaces/IExchangeWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\npragma experimental ABIEncoderV2;\n\nimport {Decimal} from \"../utils/Decimal.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IExchangeWrapper {\n    function swapInput(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal calldata inputTokenSold,\n        Decimal.decimal calldata minOutputTokenBought,\n        Decimal.decimal calldata maxPrice\n    ) external returns (Decimal.decimal memory);\n\n    function swapOutput(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal calldata outputTokenBought,\n        Decimal.decimal calldata maxInputTokeSold,\n        Decimal.decimal calldata maxPrice\n    ) external returns (Decimal.decimal memory);\n\n    function getInputPrice(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal calldata inputTokenSold\n    ) external view returns (Decimal.decimal memory);\n\n    function getOutputPrice(\n        IERC20 inputToken,\n        IERC20 outputToken,\n        Decimal.decimal calldata outputTokenBought\n    ) external view returns (Decimal.decimal memory);\n\n    function getSpotPrice(\n        IERC20 inputToken,\n        IERC20 outputToken\n    ) external view returns (Decimal.decimal memory);\n}\n"
    },
    "contracts/interfaces/IInflationMonitor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\npragma experimental ABIEncoderV2;\n\nimport {Decimal} from \"../utils/Decimal.sol\";\n\ninterface IInflationMonitor {\n    function isOverMintThreshold() external view returns (bool);\n\n    function appendMintedTokenHistory(\n        Decimal.decimal calldata _amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IInsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Decimal} from \"../utils/Decimal.sol\";\nimport {IAmm} from \"./IAmm.sol\";\n\ninterface IInsuranceFund {\n    function withdraw(\n        IERC20 _quoteToken,\n        Decimal.decimal calldata _amount\n    ) external;\n\n    function isExistedAmm(IAmm _amm) external view returns (bool);\n\n    function getAllAmms() external view returns (IAmm[] memory);\n}\n"
    },
    "contracts/interfaces/IMinter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\npragma experimental ABIEncoderV2;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Decimal} from \"../utils/Decimal.sol\";\n\ninterface IMinter {\n    function mintReward() external;\n\n    function mintForLoss(Decimal.decimal memory _amount) external;\n\n    function getPerpToken() external view returns (IERC20);\n}\n"
    },
    "contracts/utils/Decimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {DecimalMath} from \"./DecimalMath.sol\";\n\nlibrary Decimal {\n    using DecimalMath for uint256;\n\n    struct decimal {\n        uint256 d;\n    }\n\n    function zero() internal pure returns (decimal memory) {\n        return decimal(0);\n    }\n\n    function one() internal pure returns (decimal memory) {\n        return decimal(DecimalMath.unit(18));\n    }\n\n    function toUint(decimal memory x) internal pure returns (uint256) {\n        return x.d;\n    }\n\n    function modD(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (decimal memory) {\n        return decimal((x.d * (DecimalMath.unit(18))) % y.d);\n    }\n\n    function cmp(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (int8) {\n        if (x.d > y.d) {\n            return 1;\n        } else if (x.d < y.d) {\n            return -1;\n        }\n        return 0;\n    }\n\n    /// @dev add two decimals\n    function addD(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d.addd(y.d);\n        return t;\n    }\n\n    /// @dev subtract two decimals\n    function subD(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d.subd(y.d);\n        return t;\n    }\n\n    /// @dev multiple two decimals\n    function mulD(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d.muld(y.d);\n        return t;\n    }\n\n    /// @dev multiple a decimal by a uint256\n    function mulScalar(\n        decimal memory x,\n        uint256 y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d * y;\n        return t;\n    }\n\n    /// @dev divide two decimals\n    function divD(\n        decimal memory x,\n        decimal memory y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d.divd(y.d);\n        return t;\n    }\n\n    /// @dev divide a decimal by a uint256\n    function divScalar(\n        decimal memory x,\n        uint256 y\n    ) internal pure returns (decimal memory) {\n        decimal memory t;\n        t.d = x.d / y;\n        return t;\n    }\n\n    /// @dev square root\n    function sqrt(decimal memory _y) internal pure returns (decimal memory) {\n        uint256 y = _y.d * 1e18;\n        uint256 z;\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        return decimal(z);\n    }\n}\n"
    },
    "contracts/utils/DecimalERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Decimal} from \"./Decimal.sol\";\n\n/**\n * @title DecimalERC20\n * @notice wrapper to interact with erc20 in decimal math\n */\nabstract contract DecimalERC20 {\n    using Decimal for Decimal.decimal;\n\n    mapping(address => uint256) private decimalMap;\n\n    //◥◤◥◤◥◤◥◤◥◤◥◤◥◤◥◤ add state variables below ◥◤◥◤◥◤◥◤◥◤◥◤◥◤◥◤//\n\n    //◢◣◢◣◢◣◢◣◢◣◢◣◢◣◢◣ add state variables above ◢◣◢◣◢◣◢◣◢◣◢◣◢◣◢◣//\n\n    uint256[50] private __gap;\n\n    function _transfer(\n        IERC20 _token,\n        address _to,\n        Decimal.decimal memory _value\n    ) internal {\n        _updateDecimal(address(_token));\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\n        uint256 rawValue = _toUint(_token, _value);\n        require(_token.transfer(_to, rawValue), \"transfer failed\");\n        _validateBalance(_token, _to, rawValue, balanceBefore);\n    }\n\n    function _transferFrom(\n        IERC20 _token,\n        address _from,\n        address _to,\n        Decimal.decimal memory _value\n    ) internal {\n        _updateDecimal(address(_token));\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\n        uint256 rawValue = _toUint(_token, _value);\n        require(\n            _token.transferFrom(_from, _to, rawValue),\n            \"transferFrom failed\"\n        );\n        _validateBalance(_token, _to, rawValue, balanceBefore);\n    }\n\n    function _approve(\n        IERC20 _token,\n        address _spender,\n        Decimal.decimal memory _value\n    ) internal {\n        _updateDecimal(address(_token));\n        // to be compatible with some erc20 tokens like USDT\n        __approve(_token, _spender, Decimal.zero());\n        __approve(_token, _spender, _value);\n    }\n\n    //\n    // VIEW\n    //\n    function _allowance(\n        IERC20 _token,\n        address _owner,\n        address _spender\n    ) internal view returns (Decimal.decimal memory) {\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\n    }\n\n    function _balanceOf(\n        IERC20 _token,\n        address _owner\n    ) internal view returns (Decimal.decimal memory) {\n        return _toDecimal(_token, _token.balanceOf(_owner));\n    }\n\n    function _totalSupply(\n        IERC20 _token\n    ) internal view returns (Decimal.decimal memory) {\n        return _toDecimal(_token, _token.totalSupply());\n    }\n\n    function _toDecimal(\n        IERC20 _token,\n        uint256 _number\n    ) internal view returns (Decimal.decimal memory) {\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\n        if (tokenDecimals >= 18) {\n            return Decimal.decimal(_number / (10 ** (tokenDecimals - 18)));\n        }\n\n        return Decimal.decimal(_number * (10 ** (uint256(18) - tokenDecimals)));\n    }\n\n    function _toUint(\n        IERC20 _token,\n        Decimal.decimal memory _decimal\n    ) internal view returns (uint256) {\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\n        if (tokenDecimals >= 18) {\n            return _decimal.toUint() * (10 ** (tokenDecimals - 18));\n        }\n        return _decimal.toUint() / (10 ** (uint256(18) - tokenDecimals));\n    }\n\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\n        uint256 tokenDecimals = decimalMap[_token];\n        if (tokenDecimals == 0) {\n            (bool success, bytes memory data) = _token.staticcall(\n                abi.encodeWithSignature(\"decimals()\")\n            );\n            require(success && data.length != 0, \"get decimals failed\");\n            tokenDecimals = abi.decode(data, (uint256));\n        }\n        return tokenDecimals;\n    }\n\n    //\n    // PRIVATE\n    //\n    function _updateDecimal(address _token) private {\n        uint256 tokenDecimals = _getTokenDecimals(_token);\n        if (decimalMap[_token] != tokenDecimals) {\n            decimalMap[_token] = tokenDecimals;\n        }\n    }\n\n    function __approve(\n        IERC20 _token,\n        address _spender,\n        Decimal.decimal memory _value\n    ) private {\n        require(\n            _token.approve(_spender, _toUint(_token, _value)),\n            \"approve failed\"\n        );\n    }\n\n    // To prevent from deflationary token, check receiver's balance is as expectation.\n    function _validateBalance(\n        IERC20 _token,\n        address _to,\n        uint256 _roundedDownValue,\n        Decimal.decimal memory _balanceBefore\n    ) private view {\n        require(\n            _balanceOf(_token, _to).cmp(\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\n            ) == 0,\n            \"balance inconsistent\"\n        );\n    }\n}\n"
    },
    "contracts/utils/DecimalMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nlibrary DecimalMath {\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\n    function unit(uint8 decimals) internal pure returns (uint256) {\n        return 10 ** uint256(decimals);\n    }\n\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x + y;\n    }\n\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x - y;\n    }\n\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\n        return muld(x, y, 18);\n    }\n\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\n    function muld(\n        uint256 x,\n        uint256 y,\n        uint8 decimals\n    ) internal pure returns (uint256) {\n        return (x * y) / (unit(decimals));\n    }\n\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\n        return divd(x, y, 18);\n    }\n\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\n    function divd(\n        uint256 x,\n        uint256 y,\n        uint8 decimals\n    ) internal pure returns (uint256) {\n        return (x * unit(decimals)) / (y);\n    }\n}\n"
    },
    "contracts/utils/SignedDecimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {SignedDecimalMath} from \"./SignedDecimalMath.sol\";\nimport {Decimal} from \"./Decimal.sol\";\n\nlibrary SignedDecimal {\n    using SignedDecimalMath for int256;\n\n    struct signedDecimal {\n        int256 d;\n    }\n\n    function zero() internal pure returns (signedDecimal memory) {\n        return signedDecimal(0);\n    }\n\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\n        return x.d;\n    }\n\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\n        if (x.d < 0) {\n            return true;\n        }\n        return false;\n    }\n\n    function abs(\n        signedDecimal memory x\n    ) internal pure returns (Decimal.decimal memory) {\n        Decimal.decimal memory t;\n        if (x.d < 0) {\n            t.d = uint256(0 - x.d);\n        } else {\n            t.d = uint256(x.d);\n        }\n        return t;\n    }\n\n    /// @dev add two decimals\n    function addD(\n        signedDecimal memory x,\n        signedDecimal memory y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d.addd(y.d);\n        return t;\n    }\n\n    /// @dev subtract two decimals\n    function subD(\n        signedDecimal memory x,\n        signedDecimal memory y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d.subd(y.d);\n        return t;\n    }\n\n    /// @dev multiple two decimals\n    function mulD(\n        signedDecimal memory x,\n        signedDecimal memory y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d.muld(y.d);\n        return t;\n    }\n\n    /// @dev multiple a signedDecimal by a int256\n    function mulScalar(\n        signedDecimal memory x,\n        int256 y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d * y;\n        return t;\n    }\n\n    /// @dev divide two decimals\n    function divD(\n        signedDecimal memory x,\n        signedDecimal memory y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d.divd(y.d);\n        return t;\n    }\n\n    /// @dev divide a signedDecimal by a int256\n    function divScalar(\n        signedDecimal memory x,\n        int256 y\n    ) internal pure returns (signedDecimal memory) {\n        signedDecimal memory t;\n        t.d = x.d / y;\n        return t;\n    }\n\n    /// @dev square root\n    function sqrt(\n        signedDecimal memory _y\n    ) internal pure returns (signedDecimal memory) {\n        int256 y = _y.d * 1e18;\n        int256 z;\n        if (y > 3) {\n            z = y;\n            int256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        return signedDecimal(z);\n    }\n}\n"
    },
    "contracts/utils/SignedDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\nlibrary SignedDecimalMath {\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\n    function unit(uint8 decimals) internal pure returns (int256) {\n        return int256(10 ** uint256(decimals));\n    }\n\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\n    function addd(int256 x, int256 y) internal pure returns (int256) {\n        return x + y;\n    }\n\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\n    function subd(int256 x, int256 y) internal pure returns (int256) {\n        return x - y;\n    }\n\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\n    function muld(int256 x, int256 y) internal pure returns (int256) {\n        return muld(x, y, 18);\n    }\n\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\n    function muld(\n        int256 x,\n        int256 y,\n        uint8 decimals\n    ) internal pure returns (int256) {\n        return (x * y) / unit(decimals);\n    }\n\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\n    function divd(int256 x, int256 y) internal pure returns (int256) {\n        return divd(x, y, 18);\n    }\n\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\n    function divd(\n        int256 x,\n        int256 y,\n        uint8 decimals\n    ) internal pure returns (int256) {\n        return (x * unit(decimals)) / (y);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
