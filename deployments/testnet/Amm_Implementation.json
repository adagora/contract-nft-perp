{
  "address": "0x3af75DEAbE628Cb0713EC6Cb4c2D15Bfad4bAdb5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxHoldingBaseAsset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestNotionalCap",
          "type": "uint256"
        }
      ],
      "name": "CapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "FeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "FluctuationLimitRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundingPeriod",
          "type": "uint256"
        }
      ],
      "name": "FundingPeriodChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateLong",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRateShort",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingPrice",
          "type": "uint256"
        }
      ],
      "name": "FundingRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "InitMarginRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "divergenceThresholdRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInFavorRatio",
          "type": "uint256"
        }
      ],
      "name": "Level1DynamicFeeSettingsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "divergenceThresholdRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInFavorRatio",
          "type": "uint256"
        }
      ],
      "name": "Level2DynamicFeeSettingsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "MaintenanceMarginRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "PartialLiquidationRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserveBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserveBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserveAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserveAfter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "repegPnl",
          "type": "int256"
        }
      ],
      "name": "Repeg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReserveSnapshotted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IAmm.Dir",
          "name": "dir",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IAmm.Dir",
          "name": "dir",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapOutput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "TradeLimitRatioChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_x0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_y0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAssetDeltaThisFundingPeriod",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_isOpenPos",
          "type": "bool"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "fees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_k",
          "type": "tuple"
        }
      ],
      "name": "calcKRepegPnl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "repegPnl",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_repegTo",
          "type": "tuple"
        }
      ],
      "name": "calcPriceRepegPnl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "repegPnl",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterParty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fluctuationLimitRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingBufferPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "fundingRateLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "fundingRateShort",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAssetDelta",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulativeNotional",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIndexPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitMarginRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetPoolAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetPoolAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputPriceWithReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputTwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationFeeRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaintenanceMarginRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxHoldingBaseAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenInterestNotionalCap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetPoolAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetPoolAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputPriceWithReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputTwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPartialLiquidationRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRatios",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "feeRatio",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "initMarginRatio",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "maintenanceMarginRatio",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "partialLiquidationRatio",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "liquidationFeeRatio",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAmm.Ratios",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnapshotLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intervalInSeconds",
          "type": "uint256"
        }
      ],
      "name": "getTwapPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAssetReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeLimitRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fluctuationLimitRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "isOverFluctuationLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverSpreadLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRepegTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "level1DynamicFeeSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "divergenceThresholdRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "feeRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "feeInFavorRatio",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "level2DynamicFeeSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "divergenceThresholdRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "feeRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "feeInFavorRatio",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "markPriceTwapInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextFundingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repegBufferPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_multiplier",
          "type": "tuple"
        }
      ],
      "name": "repegK",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repegPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveSnapshots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "quoteAssetReserve",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "baseAssetReserve",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_maxHoldingBaseAsset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_openInterestNotionalCap",
          "type": "tuple"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterParty",
          "type": "address"
        }
      ],
      "name": "setCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_feeRatio",
          "type": "tuple"
        }
      ],
      "name": "setFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_fluctuationLimitRatio",
          "type": "tuple"
        }
      ],
      "name": "setFluctuationLimitRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setFundingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_initMarginRatio",
          "type": "tuple"
        }
      ],
      "name": "setInitMarginRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_divergenceThresholdRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_feeRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_feeInFavorRatio",
          "type": "tuple"
        }
      ],
      "name": "setLevel1DynamicFeeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_divergenceThresholdRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_feeRatio",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_feeInFavorRatio",
          "type": "tuple"
        }
      ],
      "name": "setLevel2DynamicFeeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_liquidationFeeRatio",
          "type": "tuple"
        }
      ],
      "name": "setLiquidationFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_maintenanceMarginRatio",
          "type": "tuple"
        }
      ],
      "name": "setMaintenanceMarginRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "setMarkPriceTwapInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "setOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_partialLiquidationRatio",
          "type": "tuple"
        }
      ],
      "name": "setPartialLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_repegBufferPeriod",
          "type": "uint256"
        }
      ],
      "name": "setRepegBufferPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_tradeLimitRatio",
          "type": "tuple"
        }
      ],
      "name": "setTradeLimitRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleFunding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "premiumFraction",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "markPrice",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "indexPrice",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmountLimit",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_canOverFluctuationLimit",
          "type": "bool"
        }
      ],
      "name": "swapInput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "swapOutput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeLimitRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "_premiumFractionLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "_premiumFractionShort",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_underlyingPrice",
          "type": "tuple"
        }
      ],
      "name": "updateFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab4b09bafb97e908d63d39b9589320e340114de85778d8d83947637818680f52",
  "receipt": {
    "to": null,
    "from": "0x9be0C47924bBCaFAB9a84fB3D894D0c742cab3EE",
    "contractAddress": "0x3af75DEAbE628Cb0713EC6Cb4c2D15Bfad4bAdb5",
    "transactionIndex": 28,
    "gasUsed": "3993673",
    "logsBloom": "0x
    "blockHash": "0xfab418b81fe6983b07a9a5cd25a63cd453b390a763ebe3831da1187348327052",
    "transactionHash": "0xab4b09bafb97e908d63d39b9589320e340114de85778d8d83947637818680f52",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 29758529,
        "transactionHash": "0xab4b09bafb97e908d63d39b9589320e340114de85778d8d83947637818680f52",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009be0c47924bbcafab9a84fb3d894d0c742cab3ee",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001548562d1ad5010000000000000000000000000000000000000000000000000979d8dcea400fd6000000000000000000000000000000000000000000000bc90ebbccde3b8482db00000000000000000000000000000000000000000000000009649086bd253ad5000000000000000000000000000000000000000000000bc90ed11534689f57dc",
        "logIndex": 94,
        "blockHash": "0xfab418b81fe6983b07a9a5cd25a63cd453b390a763ebe3831da1187348327052"
      }
    ],
    "blockNumber": 29758529,
    "cumulativeGasUsed": "10930375",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c69ce91694fafa3e2985b51488ae5dc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHoldingBaseAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestNotionalCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"FeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"FluctuationLimitRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingPeriod\",\"type\":\"uint256\"}],\"name\":\"FundingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateLong\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRateShort\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"name\":\"FundingRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"InitMarginRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divergenceThresholdRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInFavorRatio\",\"type\":\"uint256\"}],\"name\":\"Level1DynamicFeeSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divergenceThresholdRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInFavorRatio\",\"type\":\"uint256\"}],\"name\":\"Level2DynamicFeeSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidationFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"MaintenanceMarginRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"PartialLiquidationRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserveBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserveBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserveAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserveAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"repegPnl\",\"type\":\"int256\"}],\"name\":\"Repeg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReserveSnapshotted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IAmm.Dir\",\"name\":\"dir\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"}],\"name\":\"SwapInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IAmm.Dir\",\"name\":\"dir\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"}],\"name\":\"SwapOutput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"TradeLimitRatioChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_x0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_y0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAssetDeltaThisFundingPeriod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isOpenPos\",\"type\":\"bool\"}],\"name\":\"calcFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"fees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_k\",\"type\":\"tuple\"}],\"name\":\"calcKRepegPnl\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"repegPnl\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_repegTo\",\"type\":\"tuple\"}],\"name\":\"calcPriceRepegPnl\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"repegPnl\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluctuationLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingBufferPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRate\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"fundingRateLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"fundingRateShort\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAssetDelta\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeNotional\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndexPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitMarginRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getInputPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetPoolAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetPoolAmount\",\"type\":\"tuple\"}],\"name\":\"getInputPriceWithReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getInputTwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationFeeRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaintenanceMarginRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxHoldingBaseAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenInterestNotionalCap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetPoolAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetPoolAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputPriceWithReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputTwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartialLiquidationRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatios\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"feeRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"initMarginRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"maintenanceMarginRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"partialLiquidationRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"liquidationFeeRatio\",\"type\":\"tuple\"}],\"internalType\":\"struct IAmm.Ratios\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalInSeconds\",\"type\":\"uint256\"}],\"name\":\"getTwapPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAssetReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeLimitRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fluctuationLimitRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"isOverFluctuationLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverSpreadLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRepegTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level1DynamicFeeSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"divergenceThresholdRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"feeRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"feeInFavorRatio\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level2DynamicFeeSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"divergenceThresholdRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"feeRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"feeInFavorRatio\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markPriceTwapInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFundingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repegBufferPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_multiplier\",\"type\":\"tuple\"}],\"name\":\"repegK\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repegPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSnapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"quoteAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"baseAssetReserve\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_maxHoldingBaseAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_openInterestNotionalCap\",\"type\":\"tuple\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterParty\",\"type\":\"address\"}],\"name\":\"setCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_feeRatio\",\"type\":\"tuple\"}],\"name\":\"setFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_fluctuationLimitRatio\",\"type\":\"tuple\"}],\"name\":\"setFluctuationLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingPeriod\",\"type\":\"uint256\"}],\"name\":\"setFundingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_initMarginRatio\",\"type\":\"tuple\"}],\"name\":\"setInitMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_divergenceThresholdRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_feeRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_feeInFavorRatio\",\"type\":\"tuple\"}],\"name\":\"setLevel1DynamicFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_divergenceThresholdRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_feeRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_feeInFavorRatio\",\"type\":\"tuple\"}],\"name\":\"setLevel2DynamicFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_liquidationFeeRatio\",\"type\":\"tuple\"}],\"name\":\"setLiquidationFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_maintenanceMarginRatio\",\"type\":\"tuple\"}],\"name\":\"setMaintenanceMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setMarkPriceTwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_partialLiquidationRatio\",\"type\":\"tuple\"}],\"name\":\"setPartialLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repegBufferPeriod\",\"type\":\"uint256\"}],\"name\":\"setRepegBufferPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_tradeLimitRatio\",\"type\":\"tuple\"}],\"name\":\"setTradeLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleFunding\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"premiumFraction\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"markPrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"indexPrice\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmountLimit\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_canOverFluctuationLimit\",\"type\":\"bool\"}],\"name\":\"swapInput\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"swapOutput\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"_premiumFractionLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"_premiumFractionShort\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_underlyingPrice\",\"type\":\"tuple\"}],\"name\":\"updateFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcFee(uint8,(uint256),bool)\":{\"params\":{\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short\",\"_isOpenPos\":\"whether is opening a new position\",\"_quoteAssetAmount\":\"quoteAssetAmount\"},\"returns\":{\"fees\":\"fees to be levied on trade\"}},\"calcPriceRepegPnl((uint256))\":{\"params\":{\"_repegTo\":\"price to repeg to\"},\"returns\":{\"repegPnl\":\"total pnl incurred on vault positions after repeg\"}},\"getIndexPrice()\":{\"returns\":{\"_0\":\"index price\"}},\"getInputPrice(uint8,(uint256))\":{\"params\":{\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"getInputTwap(uint8,(uint256))\":{\"params\":{\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"getMarkPrice()\":{\"returns\":{\"_0\":\"mark price\"}},\"getOutputPrice(uint8,(uint256))\":{\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`.\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"getOutputTwap(uint8,(uint256))\":{\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`.\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"getReserves()\":{\"returns\":{\"_0\":\"(quote asset reserve, base asset reserve)\"}},\"isOverFluctuationLimit(uint8,(uint256))\":{\"params\":{\"_dirOfBase\":\"ADD_TO_AMM for closing long, REMOVE_FROM_AMM for closing short\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repegK((uint256))\":{\"details\":\"only clearing house can call\"},\"repegPrice()\":{\"details\":\"only clearing house can call\"},\"setCap((uint256),(uint256))\":{\"details\":\"only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm\",\"params\":{\"_maxHoldingBaseAsset\":\"max position size that traders can hold in 18 digits\",\"_openInterestNotionalCap\":\"open interest cap, denominated in quoteToken\"}},\"setCounterParty(address)\":{\"details\":\"only owner can call this function\",\"params\":{\"_counterParty\":\"address of counter party\"}},\"setFeeRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_feeRatio\":\"new ratio\"}},\"setFluctuationLimitRatio((uint256))\":{\"details\":\"only owner can call this function\",\"params\":{\"_fluctuationLimitRatio\":\"fluctuation limit rate in 18 digits, 0 means skip the checking\"}},\"setFundingPeriod(uint256)\":{\"details\":\"only owner\",\"params\":{\"_fundingPeriod\":\"new funding period\"}},\"setInitMarginRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_initMarginRatio\":\"new maintenance margin ratio in 18 digits\"}},\"setLevel1DynamicFeeSettings((uint256),(uint256),(uint256))\":{\"details\":\"set threshold as 0 to disable\"},\"setLevel2DynamicFeeSettings((uint256),(uint256),(uint256))\":{\"details\":\"set threshold as 0 to disable\"},\"setLiquidationFeeRatio((uint256))\":{\"details\":\"if margin ratio falls below liquidation fee ratio, entire position is liquidatedonly owner can call\",\"params\":{\"_liquidationFeeRatio\":\"new ratio\"}},\"setMaintenanceMarginRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_maintenanceMarginRatio\":\"new maintenance margin ratio in 18 digits\"}},\"setMarkPriceTwapInterval(uint256)\":{\"details\":\"only owner can call this function\",\"params\":{\"_interval\":\"time interval in seconds\"}},\"setOpen(bool)\":{\"details\":\"only owner can call this function\",\"params\":{\"_open\":\"open to trade is true, otherwise is false.\"}},\"setPartialLiquidationRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_partialLiquidationRatio\":\"new ratio\"}},\"setPriceFeed(address)\":{\"details\":\"only owner can call\",\"params\":{\"_priceFeed\":\"new price feed for this AMM\"}},\"setRepegBufferPeriod(uint256)\":{\"details\":\"only owner\",\"params\":{\"_repegBufferPeriod\":\"new repeg buffer period\"}},\"setTradeLimitRatio((uint256))\":{\"details\":\"only owner\",\"params\":{\"_tradeLimitRatio\":\"new ratio\"}},\"settleFunding()\":{\"details\":\"only allow to update while reaching `nextFundingTime`\",\"returns\":{\"indexPrice\":\"of this period in 18 digits\",\"markPrice\":\"of this period in 18 digits\",\"premiumFraction\":\"of this period in 18 digits\"}},\"swapInput(uint8,(uint256),(uint256),bool)\":{\"details\":\"Only clearingHouse can call this function\",\"params\":{\"_baseAssetAmountLimit\":\"minimum base asset amount expected to get to prevent front running\",\"_canOverFluctuationLimit\":\"if tx can go over fluctuation limit once; for partial liquidation\",\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"swapOutput(uint8,(uint256),(uint256))\":{\"details\":\"only clearingHouse can call this function\",\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput\",\"_quoteAssetAmountLimit\":\"limit of quote asset amount; for slippage protection\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcFee(uint8,(uint256),bool)\":{\"notice\":\"dynamic fee mechanism (only on open position, not on close) - if trade leaves mark price to be within 2.5% range of index price, then fee percent = 0.3% (standard) - if trade leaves mark price to be over 2.5% range of index price, then fee percent = 1% (surged) - if trade leaves mark price to be over 5.0% range of index price, then fee percent = 5% (surged) - this ensures that traders act towards maintaining pegcalculate fees to be levied on the trade\"},\"calcPriceRepegPnl((uint256))\":{\"notice\":\"calculate repeg pnl\"},\"getIndexPrice()\":{\"notice\":\"get index price provided by oracle\"},\"getInputPrice(uint8,(uint256))\":{\"notice\":\"get input amount. returns how many base asset you will get with the input quote amount.\"},\"getInputTwap(uint8,(uint256))\":{\"notice\":\"get input twap amount. returns how many base asset you will get with the input quote amount based on twap price.\"},\"getMarkPrice()\":{\"notice\":\"get mark price based on current quote/base asset reserve.\"},\"getOutputPrice(uint8,(uint256))\":{\"notice\":\"get output price. return how many quote asset you will get with the input base amount\"},\"getOutputTwap(uint8,(uint256))\":{\"notice\":\"get output twap amount. return how many quote asset you will get with the input base amount on twap price.\"},\"getRatios()\":{\"notice\":\"too avoid too many ratio calls in clearing house\"},\"getReserves()\":{\"notice\":\"get current quote/base asset reserve.\"},\"getTwapPrice(uint256)\":{\"notice\":\"get twap price\"},\"initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256)\":{\"notice\":\"upgradeable constructor, can only be inited once\"},\"isOverFluctuationLimit(uint8,(uint256))\":{\"notice\":\"check if close trade goes over fluctuation limit\"},\"repegK((uint256))\":{\"notice\":\"adjust liquidity depth\"},\"repegPrice()\":{\"notice\":\"repeg mark price to index price\"},\"setCap((uint256),(uint256))\":{\"notice\":\"set new cap during guarded period, which is max position size that traders can hold\"},\"setCounterParty(address)\":{\"notice\":\"set counter party\"},\"setFeeRatio((uint256))\":{\"notice\":\"set new fee ratio\"},\"setFluctuationLimitRatio((uint256))\":{\"notice\":\"set fluctuation limit rate. Default value is `1 / max leverage`\"},\"setFundingPeriod(uint256)\":{\"notice\":\"set funding period\"},\"setInitMarginRatio((uint256))\":{\"notice\":\"set init margin ratio\"},\"setLevel1DynamicFeeSettings((uint256),(uint256),(uint256))\":{\"notice\":\"Set level 1 dynamic fee settings only owner\"},\"setLevel2DynamicFeeSettings((uint256),(uint256),(uint256))\":{\"notice\":\"Set level 2 dynamic fee settings only owner\"},\"setLiquidationFeeRatio((uint256))\":{\"notice\":\"set liquidation fee ratio\"},\"setMaintenanceMarginRatio((uint256))\":{\"notice\":\"set maintenance margin ratio\"},\"setMarkPriceTwapInterval(uint256)\":{\"notice\":\"set time interval for twap calculation, default is 1 hour\"},\"setOpen(bool)\":{\"notice\":\"set `open` flag. Amm is open to trade if `open` is true. Default is false.\"},\"setPartialLiquidationRatio((uint256))\":{\"notice\":\"set the margin ratio after deleveraging\"},\"setPriceFeed(address)\":{\"notice\":\"set priceFeed address\"},\"setRepegBufferPeriod(uint256)\":{\"notice\":\"set repeg buffer period\"},\"setTradeLimitRatio((uint256))\":{\"notice\":\"set new trade limit ratio\"},\"settleFunding()\":{\"notice\":\"update funding rate\"},\"swapInput(uint8,(uint256),(uint256),bool)\":{\"notice\":\"Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`\"},\"swapOutput(uint8,(uint256),(uint256))\":{\"notice\":\"swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Amm.sol\":\"Amm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Amm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IPriceFeed} from \\\"./interfaces/IPriceFeed.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./utils/SignedDecimal.sol\\\";\\nimport {MixedDecimal} from \\\"./utils/MixedDecimal.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IAmm} from \\\"./interfaces/IAmm.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\ncontract Amm is IAmm, OwnableUpgradeable {\\n    using Decimal for Decimal.decimal;\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using MixedDecimal for SignedDecimal.signedDecimal;\\n\\n    enum QuoteAssetDir {\\n        QUOTE_IN,\\n        QUOTE_OUT\\n    }\\n\\n    enum TwapCalcOption {\\n        RESERVE_ASSET,\\n        INPUT_ASSET\\n    }\\n\\n    struct ReserveSnapshot {\\n        Decimal.decimal quoteAssetReserve;\\n        Decimal.decimal baseAssetReserve;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n    struct TwapInputAsset {\\n        Dir dir;\\n        Decimal.decimal assetAmount;\\n        QuoteAssetDir inOrOut;\\n    }\\n\\n    struct TwapPriceCalcParams {\\n        TwapCalcOption opt;\\n        uint256 snapshotIndex;\\n        TwapInputAsset asset;\\n    }\\n\\n    struct DynamicFeeSettings {\\n        Decimal.decimal divergenceThresholdRatio;\\n        Decimal.decimal feeRatio;\\n        Decimal.decimal feeInFavorRatio;\\n    }\\n\\n    struct FundingRate {\\n        SignedDecimal.signedDecimal fundingRateLong;\\n        SignedDecimal.signedDecimal fundingRateShort;\\n    }\\n\\n    /**\\n     * below state variables cannot change their order\\n     */\\n\\n    // ratios\\n    Decimal.decimal internal feeRatio;\\n    Decimal.decimal public tradeLimitRatio;\\n    Decimal.decimal public fluctuationLimitRatio;\\n    Decimal.decimal internal initMarginRatio;\\n    Decimal.decimal internal maintenanceMarginRatio;\\n    Decimal.decimal internal partialLiquidationRatio;\\n    Decimal.decimal internal liquidationFeeRatio;\\n\\n    // dynamic fees\\n    DynamicFeeSettings public level1DynamicFeeSettings;\\n    DynamicFeeSettings public level2DynamicFeeSettings;\\n\\n    // funding rate\\n    FundingRate public fundingRate;\\n\\n    // x and y\\n    Decimal.decimal public quoteAssetReserve;\\n    Decimal.decimal public baseAssetReserve;\\n    Decimal.decimal public k;\\n\\n    // caps\\n    Decimal.decimal internal maxHoldingBaseAsset;\\n    Decimal.decimal internal openInterestNotionalCap;\\n\\n    SignedDecimal.signedDecimal public totalPositionSize;\\n    SignedDecimal.signedDecimal public cumulativeNotional;\\n    SignedDecimal.signedDecimal public baseAssetDeltaThisFundingPeriod;\\n    Decimal.decimal public _x0;\\n    Decimal.decimal public _y0;\\n\\n    uint256 public override fundingPeriod;\\n    uint256 public markPriceTwapInterval;\\n    uint256 public nextFundingTime;\\n    uint256 public fundingBufferPeriod;\\n    uint256 public lastRepegTimestamp;\\n    uint256 public repegBufferPeriod;\\n    IPriceFeed public priceFeed;\\n    bytes32 public priceFeedKey;\\n    address public counterParty;\\n    IERC20 public override quoteAsset;\\n    bool public override open;\\n\\n    ReserveSnapshot[] public reserveSnapshots;\\n\\n    // events\\n    event Open(bool indexed open);\\n    event SwapInput(Dir dir, uint256 quoteAssetAmount, uint256 baseAssetAmount);\\n    event SwapOutput(\\n        Dir dir,\\n        uint256 quoteAssetAmount,\\n        uint256 baseAssetAmount\\n    );\\n    event FundingRateUpdated(\\n        int256 fundingRateLong,\\n        int256 fundingRateShort,\\n        uint256 underlyingPrice\\n    );\\n    event ReserveSnapshotted(\\n        uint256 quoteAssetReserve,\\n        uint256 baseAssetReserve,\\n        uint256 timestamp\\n    );\\n    event FeeRatioChanged(uint256 ratio);\\n    event TradeLimitRatioChanged(uint256 ratio);\\n    event FluctuationLimitRatioChanged(uint256 ratio);\\n    event InitMarginRatioChanged(uint256 ratio);\\n    event MaintenanceMarginRatioChanged(uint256 ratio);\\n    event PartialLiquidationRatioChanged(uint256 ratio);\\n    event LiquidationFeeRatioChanged(uint256 ratio);\\n    event Level1DynamicFeeSettingsChanged(\\n        uint256 divergenceThresholdRatio,\\n        uint256 feeRatio,\\n        uint256 feeInFavorRatio\\n    );\\n    event Level2DynamicFeeSettingsChanged(\\n        uint256 divergenceThresholdRatio,\\n        uint256 feeRatio,\\n        uint256 feeInFavorRatio\\n    );\\n    event FundingPeriodChanged(uint256 fundingPeriod);\\n    event CapChanged(\\n        uint256 maxHoldingBaseAsset,\\n        uint256 openInterestNotionalCap\\n    );\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event Repeg(\\n        uint256 quoteAssetReserveBefore,\\n        uint256 baseAssetReserveBefore,\\n        uint256 quoteAssetReserveAfter,\\n        uint256 baseAssetReserveAfter,\\n        int256 repegPnl\\n    );\\n\\n    modifier onlyOpen() {\\n        require(open, \\\"amm was closed\\\");\\n        _;\\n    }\\n\\n    modifier onlyCounterParty() {\\n        require(counterParty == _msgSender(), \\\"caller is not counterParty\\\");\\n        _;\\n    }\\n\\n    //\\n    // EXTERNAL\\n    //\\n\\n    /**\\n     * upgradeable constructor, can only be inited once\\n     */\\n    function initialize(\\n        uint256 _quoteAssetReserve,\\n        uint256 _baseAssetReserve,\\n        uint256 _tradeLimitRatio,\\n        uint256 _fundingPeriod,\\n        IPriceFeed _priceFeed,\\n        bytes32 _priceFeedKey,\\n        address _quoteAsset,\\n        uint256 _fluctuationLimitRatio,\\n        uint256 _feeRatio\\n    ) public initializer {\\n        require(\\n            _quoteAssetReserve != 0 &&\\n                _tradeLimitRatio != 0 &&\\n                _baseAssetReserve != 0 &&\\n                _fundingPeriod != 0 &&\\n                address(_priceFeed) != address(0) &&\\n                _quoteAsset != address(0),\\n            \\\"invalid input\\\"\\n        );\\n        __Ownable_init();\\n\\n        quoteAssetReserve = Decimal.decimal(_quoteAssetReserve);\\n        baseAssetReserve = Decimal.decimal(_baseAssetReserve);\\n        k = quoteAssetReserve.mulD(baseAssetReserve);\\n        tradeLimitRatio = Decimal.decimal(_tradeLimitRatio);\\n        feeRatio = Decimal.decimal(_feeRatio);\\n        fluctuationLimitRatio = Decimal.decimal(_fluctuationLimitRatio);\\n        fundingPeriod = _fundingPeriod;\\n        fundingBufferPeriod = _fundingPeriod / 2;\\n        repegBufferPeriod = 12 hours;\\n        markPriceTwapInterval = fundingPeriod;\\n        priceFeedKey = _priceFeedKey;\\n        quoteAsset = IERC20(_quoteAsset);\\n        priceFeed = _priceFeed;\\n        reserveSnapshots.push(\\n            ReserveSnapshot(\\n                quoteAssetReserve,\\n                baseAssetReserve,\\n                block.timestamp,\\n                block.number\\n            )\\n        );\\n        emit ReserveSnapshotted(\\n            quoteAssetReserve.toUint(),\\n            baseAssetReserve.toUint(),\\n            block.timestamp\\n        );\\n        _x0 = Decimal.decimal(_baseAssetReserve);\\n        _y0 = Decimal.decimal(_quoteAssetReserve);\\n    }\\n\\n    /**\\n     * @notice Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`\\n     * @dev Only clearingHouse can call this function\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short\\n     * @param _quoteAssetAmount quote asset amount\\n     * @param _baseAssetAmountLimit minimum base asset amount expected to get to prevent front running\\n     * @param _canOverFluctuationLimit if tx can go over fluctuation limit once; for partial liquidation\\n     * @return base asset amount\\n     */\\n    function swapInput(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    )\\n        external\\n        override\\n        onlyOpen\\n        onlyCounterParty\\n        returns (Decimal.decimal memory)\\n    {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        if (_dirOfQuote == Dir.REMOVE_FROM_AMM) {\\n            require(\\n                quoteAssetReserve.mulD(tradeLimitRatio).toUint() >=\\n                    _quoteAssetAmount.toUint(),\\n                \\\"over trading limit\\\"\\n            );\\n        }\\n\\n        Decimal.decimal memory baseAssetAmount = getInputPrice(\\n            _dirOfQuote,\\n            _quoteAssetAmount\\n        );\\n        // If LONG, exchanged base amount should be more than _baseAssetAmountLimit,\\n        // otherwise(SHORT), exchanged base amount should be less than _baseAssetAmountLimit.\\n        // In SHORT case, more position means more debt so should not be larger than _baseAssetAmountLimit\\n        if (_baseAssetAmountLimit.toUint() != 0) {\\n            if (_dirOfQuote == Dir.ADD_TO_AMM) {\\n                require(\\n                    baseAssetAmount.toUint() >= _baseAssetAmountLimit.toUint(),\\n                    \\\"Less than minimal base token\\\"\\n                );\\n            } else {\\n                require(\\n                    baseAssetAmount.toUint() <= _baseAssetAmountLimit.toUint(),\\n                    \\\"More than maximal base token\\\"\\n                );\\n            }\\n        }\\n\\n        _updateReserve(\\n            _dirOfQuote,\\n            _quoteAssetAmount,\\n            baseAssetAmount,\\n            _canOverFluctuationLimit\\n        );\\n        emit SwapInput(\\n            _dirOfQuote,\\n            _quoteAssetAmount.toUint(),\\n            baseAssetAmount.toUint()\\n        );\\n        return baseAssetAmount;\\n    }\\n\\n    /**\\n     * @notice swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit\\n     * @dev only clearingHouse can call this function\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput\\n     * @param _baseAssetAmount base asset amount\\n     * @param _quoteAssetAmountLimit limit of quote asset amount; for slippage protection\\n     * @return quote asset amount\\n     */\\n    function swapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    )\\n        external\\n        override\\n        onlyOpen\\n        onlyCounterParty\\n        returns (Decimal.decimal memory)\\n    {\\n        return\\n            implSwapOutput(\\n                _dirOfBase,\\n                _baseAssetAmount,\\n                _quoteAssetAmountLimit\\n            );\\n    }\\n\\n    /**\\n     * @notice update funding rate\\n     * @dev only allow to update while reaching `nextFundingTime`\\n     * @return premiumFraction of this period in 18 digits\\n     * @return markPrice of this period in 18 digits\\n     * @return indexPrice of this period in 18 digits\\n     */\\n    function settleFunding()\\n        external\\n        override\\n        onlyOpen\\n        onlyCounterParty\\n        returns (\\n            SignedDecimal.signedDecimal memory premiumFraction,\\n            Decimal.decimal memory markPrice,\\n            Decimal.decimal memory indexPrice\\n        )\\n    {\\n        require(block.timestamp >= nextFundingTime, \\\"settle funding too early\\\");\\n\\n        // premium = twapMarketPrice - twapIndexPrice\\n        // timeFraction = fundingPeriod(1 hour) / 1 day\\n        // premiumFraction = premium * timeFraction\\n        markPrice = getTwapPrice(markPriceTwapInterval);\\n        indexPrice = getIndexPrice();\\n\\n        SignedDecimal.signedDecimal memory premium = MixedDecimal\\n            .fromDecimal(markPrice)\\n            .subD(indexPrice);\\n\\n        premiumFraction = premium.mulScalar(fundingPeriod).divScalar(\\n            int256(1 days)\\n        );\\n\\n        // in order to prevent multiple funding settlement during very short time after network congestion\\n        uint256 minNextValidFundingTime = block.timestamp + fundingBufferPeriod;\\n\\n        // floor((nextFundingTime + fundingPeriod) / 3600) * 3600\\n        uint256 nextFundingTimeOnHourStart = ((nextFundingTime +\\n            fundingPeriod) / 1 hours) * 1 hours;\\n\\n        // max(nextFundingTimeOnHourStart, minNextValidFundingTime)\\n        nextFundingTime = nextFundingTimeOnHourStart > minNextValidFundingTime\\n            ? nextFundingTimeOnHourStart\\n            : minNextValidFundingTime;\\n\\n        // DEPRECATED only for backward compatibility before we upgrade ClearingHouse\\n        // reset funding related states\\n        baseAssetDeltaThisFundingPeriod = SignedDecimal.zero();\\n    }\\n\\n    /**\\n     * @notice repeg mark price to index price\\n     * @dev only clearing house can call\\n     */\\n    function repegPrice()\\n        external\\n        override\\n        onlyOpen\\n        onlyCounterParty\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        )\\n    {\\n        require(\\n            block.timestamp >= lastRepegTimestamp + repegBufferPeriod,\\n            \\\"repeg interval too small\\\"\\n        );\\n        Decimal.decimal memory indexPrice = getIndexPrice();\\n\\n        // calculation must be done before repeg\\n        SignedDecimal.signedDecimal memory repegPnl = calcPriceRepegPnl(\\n            indexPrice\\n        );\\n\\n        // REPEG, y / x = price, y = price * x\\n        Decimal.decimal memory quoteAssetReserveBefore = quoteAssetReserve;\\n        quoteAssetReserve = indexPrice.mulD(baseAssetReserve);\\n        k = quoteAssetReserve.mulD(baseAssetReserve);\\n        lastRepegTimestamp = block.timestamp;\\n\\n        // update repeg checkpoints\\n        _y0 = quoteAssetReserve;\\n        _x0 = baseAssetReserve;\\n\\n        // add reserve snapshot, should be only after updating reserves\\n        _addReserveSnapshot();\\n\\n        emit Repeg(\\n            quoteAssetReserveBefore.toUint(),\\n            baseAssetReserve.toUint(),\\n            quoteAssetReserve.toUint(),\\n            baseAssetReserve.toUint(),\\n            repegPnl.toInt()\\n        );\\n        return (\\n            quoteAssetReserveBefore,\\n            baseAssetReserve,\\n            quoteAssetReserve,\\n            baseAssetReserve,\\n            repegPnl\\n        );\\n    }\\n\\n    /**\\n     * @notice adjust liquidity depth\\n     * @dev only clearing house can call\\n     */\\n    function repegK(\\n        Decimal.decimal memory _multiplier\\n    )\\n        external\\n        override\\n        onlyOpen\\n        onlyCounterParty\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        )\\n    {\\n        require(\\n            block.timestamp >= lastRepegTimestamp + repegBufferPeriod,\\n            \\\"repeg interval too small\\\"\\n        );\\n\\n        Decimal.decimal memory multiplierSqrt = _multiplier.sqrt();\\n\\n        Decimal.decimal memory quoteAssetReserveBefore = quoteAssetReserve;\\n        Decimal.decimal memory baseAssetReserveBefore = baseAssetReserve;\\n\\n        Decimal.decimal memory quoteAssetReserveAfter = quoteAssetReserveBefore\\n            .mulD(multiplierSqrt);\\n        Decimal.decimal memory baseAssetReserveAfter = baseAssetReserveBefore\\n            .mulD(multiplierSqrt);\\n        Decimal.decimal memory _k = quoteAssetReserveAfter.mulD(\\n            baseAssetReserveAfter\\n        );\\n\\n        // calculation must be done before repeg\\n        SignedDecimal.signedDecimal memory repegPnl = calcKRepegPnl(_k);\\n\\n        // REPEG\\n        quoteAssetReserve = quoteAssetReserveAfter;\\n        baseAssetReserve = baseAssetReserveAfter;\\n        k = _k;\\n        lastRepegTimestamp = block.timestamp;\\n\\n        // update repeg checkpoints\\n        _y0 = quoteAssetReserveAfter;\\n        _x0 = baseAssetReserveAfter;\\n\\n        // add reserve snapshot, should be only after updating reserves\\n        _addReserveSnapshot();\\n\\n        emit Repeg(\\n            quoteAssetReserveBefore.toUint(),\\n            baseAssetReserveBefore.toUint(),\\n            quoteAssetReserveAfter.toUint(),\\n            baseAssetReserveAfter.toUint(),\\n            repegPnl.toInt()\\n        );\\n\\n        return (\\n            quoteAssetReserveBefore,\\n            baseAssetReserveBefore,\\n            quoteAssetReserveAfter,\\n            baseAssetReserveAfter,\\n            repegPnl\\n        );\\n    }\\n\\n    // update funding rate = premiumFraction / twapIndexPrice\\n    function updateFundingRate(\\n        SignedDecimal.signedDecimal memory _premiumFractionLong,\\n        SignedDecimal.signedDecimal memory _premiumFractionShort,\\n        Decimal.decimal memory _underlyingPrice\\n    ) external override onlyOpen onlyCounterParty {\\n        fundingRate.fundingRateLong = _premiumFractionLong.divD(\\n            _underlyingPrice\\n        );\\n        fundingRate.fundingRateShort = _premiumFractionShort.divD(\\n            _underlyingPrice\\n        );\\n        emit FundingRateUpdated(\\n            fundingRate.fundingRateLong.toInt(),\\n            fundingRate.fundingRateShort.toInt(),\\n            _underlyingPrice.toUint()\\n        );\\n    }\\n\\n    /**\\n     * @notice set counter party\\n     * @dev only owner can call this function\\n     * @param _counterParty address of counter party\\n     */\\n    function setCounterParty(address _counterParty) external onlyOwner {\\n        counterParty = _counterParty;\\n    }\\n\\n    /**\\n     * @notice set `open` flag. Amm is open to trade if `open` is true. Default is false.\\n     * @dev only owner can call this function\\n     * @param _open open to trade is true, otherwise is false.\\n     */\\n    function setOpen(bool _open) external onlyOwner {\\n        if (open == _open) return;\\n\\n        open = _open;\\n        if (_open) {\\n            nextFundingTime =\\n                ((block.timestamp + fundingPeriod) / 1 hours) *\\n                1 hours;\\n        }\\n        emit Open(_open);\\n    }\\n\\n    /**\\n     * @notice set new fee ratio\\n     * @dev only owner can call\\n     * @param _feeRatio new ratio\\n     */\\n    function setFeeRatio(Decimal.decimal memory _feeRatio) external onlyOwner {\\n        feeRatio = _feeRatio;\\n        emit FeeRatioChanged(feeRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set new trade limit ratio\\n     * @dev only owner\\n     * @param _tradeLimitRatio new ratio\\n     */\\n    function setTradeLimitRatio(\\n        Decimal.decimal memory _tradeLimitRatio\\n    ) external onlyOwner {\\n        _requireValidRatio(_tradeLimitRatio);\\n        tradeLimitRatio = _tradeLimitRatio;\\n        emit TradeLimitRatioChanged(tradeLimitRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set fluctuation limit rate. Default value is `1 / max leverage`\\n     * @dev only owner can call this function\\n     * @param _fluctuationLimitRatio fluctuation limit rate in 18 digits, 0 means skip the checking\\n     */\\n    function setFluctuationLimitRatio(\\n        Decimal.decimal memory _fluctuationLimitRatio\\n    ) external onlyOwner {\\n        fluctuationLimitRatio = _fluctuationLimitRatio;\\n        emit FluctuationLimitRatioChanged(fluctuationLimitRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set init margin ratio\\n     * @dev only owner can call\\n     * @param _initMarginRatio new maintenance margin ratio in 18 digits\\n     */\\n    function setInitMarginRatio(\\n        Decimal.decimal memory _initMarginRatio\\n    ) external onlyOwner {\\n        _requireValidRatio(_initMarginRatio);\\n        initMarginRatio = _initMarginRatio;\\n        emit InitMarginRatioChanged(initMarginRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set maintenance margin ratio\\n     * @dev only owner can call\\n     * @param _maintenanceMarginRatio new maintenance margin ratio in 18 digits\\n     */\\n    function setMaintenanceMarginRatio(\\n        Decimal.decimal memory _maintenanceMarginRatio\\n    ) external onlyOwner {\\n        _requireValidRatio(_maintenanceMarginRatio);\\n        maintenanceMarginRatio = _maintenanceMarginRatio;\\n        emit MaintenanceMarginRatioChanged(maintenanceMarginRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set the margin ratio after deleveraging\\n     * @dev only owner can call\\n     * @param _partialLiquidationRatio new ratio\\n     */\\n    function setPartialLiquidationRatio(\\n        Decimal.decimal memory _partialLiquidationRatio\\n    ) external onlyOwner {\\n        _requireValidRatio(_partialLiquidationRatio);\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _partialLiquidationRatio.cmp(Decimal.one()) < 0,\\n            \\\"partial liq ratio should be less than 1\\\"\\n        );\\n        partialLiquidationRatio = _partialLiquidationRatio;\\n        emit PartialLiquidationRatioChanged(partialLiquidationRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set liquidation fee ratio\\n     * @dev if margin ratio falls below liquidation fee ratio, entire position is liquidated\\n     * @dev only owner can call\\n     * @param _liquidationFeeRatio new ratio\\n     */\\n    function setLiquidationFeeRatio(\\n        Decimal.decimal memory _liquidationFeeRatio\\n    ) external onlyOwner {\\n        _requireValidRatio(_liquidationFeeRatio);\\n        liquidationFeeRatio = _liquidationFeeRatio;\\n        emit LiquidationFeeRatioChanged(liquidationFeeRatio.toUint());\\n    }\\n\\n    /**\\n     * Set level 1 dynamic fee settings\\n     * only owner\\n     * @dev set threshold as 0 to disable\\n     */\\n    function setLevel1DynamicFeeSettings(\\n        Decimal.decimal memory _divergenceThresholdRatio,\\n        Decimal.decimal memory _feeRatio,\\n        Decimal.decimal memory _feeInFavorRatio\\n    ) external onlyOwner {\\n        level1DynamicFeeSettings = DynamicFeeSettings(\\n            _divergenceThresholdRatio,\\n            _feeRatio,\\n            _feeInFavorRatio\\n        );\\n        emit Level1DynamicFeeSettingsChanged(\\n            _divergenceThresholdRatio.toUint(),\\n            _feeRatio.toUint(),\\n            _feeInFavorRatio.toUint()\\n        );\\n    }\\n\\n    /**\\n     * Set level 2 dynamic fee settings\\n     * only owner\\n     * @dev set threshold as 0 to disable\\n     */\\n    function setLevel2DynamicFeeSettings(\\n        Decimal.decimal memory _divergenceThresholdRatio,\\n        Decimal.decimal memory _feeRatio,\\n        Decimal.decimal memory _feeInFavorRatio\\n    ) external onlyOwner {\\n        level2DynamicFeeSettings = DynamicFeeSettings(\\n            _divergenceThresholdRatio,\\n            _feeRatio,\\n            _feeInFavorRatio\\n        );\\n        emit Level2DynamicFeeSettingsChanged(\\n            _divergenceThresholdRatio.toUint(),\\n            _feeRatio.toUint(),\\n            _feeInFavorRatio.toUint()\\n        );\\n    }\\n\\n    /**\\n     * @notice set new cap during guarded period, which is max position size that traders can hold\\n     * @dev only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm\\n     * @param _maxHoldingBaseAsset max position size that traders can hold in 18 digits\\n     * @param _openInterestNotionalCap open interest cap, denominated in quoteToken\\n     */\\n    function setCap(\\n        Decimal.decimal memory _maxHoldingBaseAsset,\\n        Decimal.decimal memory _openInterestNotionalCap\\n    ) external onlyOwner {\\n        maxHoldingBaseAsset = _maxHoldingBaseAsset;\\n        openInterestNotionalCap = _openInterestNotionalCap;\\n        emit CapChanged(\\n            maxHoldingBaseAsset.toUint(),\\n            openInterestNotionalCap.toUint()\\n        );\\n    }\\n\\n    /**\\n     * @notice set funding period\\n     * @dev only owner\\n     * @param _fundingPeriod new funding period\\n     */\\n    function setFundingPeriod(uint256 _fundingPeriod) external onlyOwner {\\n        fundingPeriod = _fundingPeriod;\\n        fundingBufferPeriod = _fundingPeriod / 2;\\n        emit FundingPeriodChanged(_fundingPeriod);\\n    }\\n\\n    /**\\n     * @notice set repeg buffer period\\n     * @dev only owner\\n     * @param _repegBufferPeriod new repeg buffer period\\n     */\\n    function setRepegBufferPeriod(\\n        uint256 _repegBufferPeriod\\n    ) external onlyOwner {\\n        repegBufferPeriod = _repegBufferPeriod;\\n    }\\n\\n    /**\\n     * @notice set time interval for twap calculation, default is 1 hour\\n     * @dev only owner can call this function\\n     * @param _interval time interval in seconds\\n     */\\n    function setMarkPriceTwapInterval(uint256 _interval) external onlyOwner {\\n        require(_interval != 0, \\\"can not set interval to 0\\\");\\n        markPriceTwapInterval = _interval;\\n    }\\n\\n    /**\\n     * @notice set priceFeed address\\n     * @dev only owner can call\\n     * @param _priceFeed new price feed for this AMM\\n     */\\n    function setPriceFeed(IPriceFeed _priceFeed) external onlyOwner {\\n        require(address(_priceFeed) != address(0), \\\"invalid PriceFeed address\\\");\\n        priceFeed = _priceFeed;\\n        emit PriceFeedUpdated(address(priceFeed));\\n    }\\n\\n    /**\\n     * @notice dynamic fee mechanism (only on open position, not on close)\\n     * - if trade leaves mark price to be within 2.5% range of index price, then fee percent = 0.3% (standard)\\n     * - if trade leaves mark price to be over 2.5% range of index price, then fee percent = 1% (surged)\\n     * - if trade leaves mark price to be over 5.0% range of index price, then fee percent = 5% (surged)\\n     * - this ensures that traders act towards maintaining peg\\n     * @notice calculate fees to be levied on the trade\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short\\n     * @param _quoteAssetAmount quoteAssetAmount\\n     * @param _isOpenPos whether is opening a new position\\n     * @return fees fees to be levied on trade\\n     */\\n    function calcFee(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        bool _isOpenPos\\n    ) external view override returns (Decimal.decimal memory fees) {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        Decimal.decimal memory indexPrice = getIndexPrice();\\n        Decimal.decimal memory markPrice = getMarkPrice();\\n\\n        uint256 divergenceRatio = MixedDecimal\\n            .fromDecimal(indexPrice)\\n            .subD(markPrice)\\n            .abs()\\n            .divD(indexPrice)\\n            .toUint();\\n\\n        bool isConvergingTrade = (\\n            markPrice.toUint() < indexPrice.toUint()\\n                ? Dir.ADD_TO_AMM\\n                : Dir.REMOVE_FROM_AMM\\n        ) == _dirOfQuote;\\n\\n        Decimal.decimal memory _feeRatio = feeRatio;\\n\\n        // implying surge fee pricing only on open position\\n        if (_isOpenPos) {\\n            if (\\n                level2DynamicFeeSettings.divergenceThresholdRatio.toUint() !=\\n                0 && // 0 means unset/disabled\\n                divergenceRatio >\\n                level2DynamicFeeSettings.divergenceThresholdRatio.toUint()\\n            ) {\\n                if (isConvergingTrade)\\n                    _feeRatio = level2DynamicFeeSettings.feeInFavorRatio;\\n                else _feeRatio = level2DynamicFeeSettings.feeRatio;\\n            } else if (\\n                level1DynamicFeeSettings.divergenceThresholdRatio.toUint() !=\\n                0 &&\\n                divergenceRatio >\\n                level1DynamicFeeSettings.divergenceThresholdRatio.toUint()\\n            ) {\\n                if (isConvergingTrade)\\n                    _feeRatio = level1DynamicFeeSettings.feeInFavorRatio;\\n                else _feeRatio = level1DynamicFeeSettings.feeRatio;\\n            }\\n        }\\n        fees = _quoteAssetAmount.mulD(_feeRatio);\\n    }\\n\\n    /**\\n     * @notice get input twap amount.\\n     * returns how many base asset you will get with the input quote amount based on twap price.\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\\n     * @param _quoteAssetAmount quote asset amount\\n     * @return base asset amount\\n     */\\n    function getInputTwap(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount\\n    ) external view override returns (Decimal.decimal memory) {\\n        return\\n            _implGetInputAssetTwapPrice(\\n                _dirOfQuote,\\n                _quoteAssetAmount,\\n                QuoteAssetDir.QUOTE_IN,\\n                15 minutes\\n            );\\n    }\\n\\n    /**\\n     * @notice calculate repeg pnl\\n     * @param _repegTo price to repeg to\\n     * @return repegPnl total pnl incurred on vault positions after repeg\\n     */\\n    function calcPriceRepegPnl(\\n        Decimal.decimal memory _repegTo\\n    ) public view returns (SignedDecimal.signedDecimal memory repegPnl) {\\n        SignedDecimal.signedDecimal memory y0 = MixedDecimal.fromDecimal(_y0);\\n        SignedDecimal.signedDecimal memory x0 = MixedDecimal.fromDecimal(_x0);\\n        SignedDecimal.signedDecimal memory p0 = y0.divD(x0);\\n        SignedDecimal.signedDecimal memory p1 = MixedDecimal.fromDecimal(\\n            getMarkPrice()\\n        );\\n        SignedDecimal.signedDecimal memory p2 = MixedDecimal.fromDecimal(\\n            _repegTo\\n        );\\n        repegPnl = y0.mulD(\\n            p2\\n                .divD(p1)\\n                .addD(p1.divD(p0).sqrt())\\n                .subD(p2.divD(p1.mulD(p0).sqrt()))\\n                .subD(Decimal.one())\\n        );\\n    }\\n\\n    function calcKRepegPnl(\\n        Decimal.decimal memory _k\\n    ) public view returns (SignedDecimal.signedDecimal memory repegPnl) {\\n        SignedDecimal.signedDecimal memory x0 = MixedDecimal.fromDecimal(_x0);\\n        SignedDecimal.signedDecimal memory y0 = MixedDecimal.fromDecimal(_y0);\\n        SignedDecimal.signedDecimal memory p0 = y0.divD(x0);\\n        SignedDecimal.signedDecimal memory k0 = y0.mulD(x0);\\n        SignedDecimal.signedDecimal memory p1 = MixedDecimal.fromDecimal(\\n            getMarkPrice()\\n        );\\n        SignedDecimal.signedDecimal memory k1 = MixedDecimal.fromDecimal(_k);\\n        SignedDecimal.signedDecimal memory firstDenom = k1\\n            .divD(p1)\\n            .sqrt()\\n            .subD(k0.divD(p1).sqrt())\\n            .addD(k0.divD(p0).sqrt());\\n        repegPnl = k1\\n            .divD(firstDenom)\\n            .subD(k1.mulD(p1).sqrt())\\n            .subD(k0.mulD(p0).sqrt())\\n            .addD(k0.mulD(p1).sqrt());\\n    }\\n\\n    /**\\n     * @notice get output twap amount.\\n     * return how many quote asset you will get with the input base amount on twap price.\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`.\\n     * @param _baseAssetAmount base asset amount\\n     * @return quote asset amount\\n     */\\n    function getOutputTwap(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) external view override returns (Decimal.decimal memory) {\\n        return\\n            _implGetInputAssetTwapPrice(\\n                _dirOfBase,\\n                _baseAssetAmount,\\n                QuoteAssetDir.QUOTE_OUT,\\n                15 minutes\\n            );\\n    }\\n\\n    /**\\n     * @notice check if close trade goes over fluctuation limit\\n     * @param _dirOfBase ADD_TO_AMM for closing long, REMOVE_FROM_AMM for closing short\\n     */\\n    function isOverFluctuationLimit(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) external view override returns (bool) {\\n        // Skip the check if the limit is 0\\n        if (fluctuationLimitRatio.toUint() == 0) {\\n            return false;\\n        }\\n\\n        (\\n            Decimal.decimal memory upperLimit,\\n            Decimal.decimal memory lowerLimit\\n        ) = _getPriceBoundariesOfLastBlock();\\n\\n        Decimal.decimal memory quoteAssetExchanged = getOutputPrice(\\n            _dirOfBase,\\n            _baseAssetAmount\\n        );\\n        Decimal.decimal memory price = (_dirOfBase == Dir.REMOVE_FROM_AMM)\\n            ? quoteAssetReserve.addD(quoteAssetExchanged).divD(\\n                baseAssetReserve.subD(_baseAssetAmount)\\n            )\\n            : quoteAssetReserve.subD(quoteAssetExchanged).divD(\\n                baseAssetReserve.addD(_baseAssetAmount)\\n            );\\n\\n        if (price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function isOverSpreadLimit() external view override returns (bool) {\\n        Decimal.decimal memory oraclePrice = getIndexPrice();\\n        require(oraclePrice.toUint() > 0, \\\"index price is 0\\\");\\n        Decimal.decimal memory marketPrice = getMarkPrice();\\n        Decimal.decimal memory oracleSpreadRatioAbs = MixedDecimal\\n            .fromDecimal(marketPrice)\\n            .subD(oraclePrice)\\n            .divD(oraclePrice)\\n            .abs();\\n        // TODO move to variable\\n        return oracleSpreadRatioAbs.toUint() >= 1e17; // 10%\\n    }\\n\\n    function getSnapshotLen() external view returns (uint256) {\\n        return reserveSnapshots.length;\\n    }\\n\\n    function getFeeRatio()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return feeRatio;\\n    }\\n\\n    function getInitMarginRatio()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return initMarginRatio;\\n    }\\n\\n    function getMaintenanceMarginRatio()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return maintenanceMarginRatio;\\n    }\\n\\n    function getPartialLiquidationRatio()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return partialLiquidationRatio;\\n    }\\n\\n    function getLiquidationFeeRatio()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return liquidationFeeRatio;\\n    }\\n\\n    /**\\n     * too avoid too many ratio calls in clearing house\\n     */\\n    function getRatios() external view override returns (Ratios memory) {\\n        return\\n            Ratios(\\n                feeRatio,\\n                initMarginRatio,\\n                maintenanceMarginRatio,\\n                partialLiquidationRatio,\\n                liquidationFeeRatio\\n            );\\n    }\\n\\n    /**\\n     * @notice get current quote/base asset reserve.\\n     * @return (quote asset reserve, base asset reserve)\\n     */\\n    function getReserves()\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory)\\n    {\\n        return (quoteAssetReserve, baseAssetReserve);\\n    }\\n\\n    function getMaxHoldingBaseAsset()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return maxHoldingBaseAsset;\\n    }\\n\\n    function getOpenInterestNotionalCap()\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return openInterestNotionalCap;\\n    }\\n\\n    function getBaseAssetDelta()\\n        external\\n        view\\n        override\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return totalPositionSize;\\n    }\\n\\n    function getCumulativeNotional()\\n        external\\n        view\\n        override\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return cumulativeNotional;\\n    }\\n\\n    //\\n    // PUBLIC\\n    //\\n\\n    /**\\n     * @notice get input amount. returns how many base asset you will get with the input quote amount.\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\\n     * @param _quoteAssetAmount quote asset amount\\n     * @return base asset amount\\n     */\\n    function getInputPrice(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount\\n    ) public view override returns (Decimal.decimal memory) {\\n        return\\n            getInputPriceWithReserves(\\n                _dirOfQuote,\\n                _quoteAssetAmount,\\n                quoteAssetReserve,\\n                baseAssetReserve\\n            );\\n    }\\n\\n    /**\\n     * @notice get output price. return how many quote asset you will get with the input base amount\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`.\\n     * @param _baseAssetAmount base asset amount\\n     * @return quote asset amount\\n     */\\n    function getOutputPrice(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) public view override returns (Decimal.decimal memory) {\\n        return\\n            getOutputPriceWithReserves(\\n                _dirOfBase,\\n                _baseAssetAmount,\\n                quoteAssetReserve,\\n                baseAssetReserve\\n            );\\n    }\\n\\n    /**\\n     * @notice get mark price based on current quote/base asset reserve.\\n     * @return mark price\\n     */\\n    function getMarkPrice()\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return quoteAssetReserve.divD(baseAssetReserve);\\n    }\\n\\n    /**\\n     * @notice get index price provided by oracle\\n     * @return index price\\n     */\\n    function getIndexPrice()\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return Decimal.decimal(priceFeed.getPrice(priceFeedKey));\\n    }\\n\\n    /**\\n     * @notice get twap price\\n     */\\n    function getTwapPrice(\\n        uint256 _intervalInSeconds\\n    ) public view returns (Decimal.decimal memory) {\\n        return _implGetReserveTwapPrice(_intervalInSeconds);\\n    }\\n\\n    /*       plus/minus 1 while the amount is not dividable\\n     *\\n     *        getInputPrice                         getOutputPrice\\n     *\\n     *     \\uff21\\uff24\\uff24      (amount - 1)              (amount + 1)   \\uff32\\uff25\\uff2d\\uff2f\\uff36\\uff25\\n     *      \\u25e5\\u25e4            \\u25b2                         |             \\u25e2\\u25e3\\n     *      \\u25e5\\u25e4  ------->  |                         \\u25bc  <--------  \\u25e2\\u25e3\\n     *    -------      -------                   -------        -------\\n     *    |  Q  |      |  B  |                   |  Q  |        |  B  |\\n     *    -------      -------                   -------        -------\\n     *      \\u25e5\\u25e4  ------->  \\u25b2                         |  <--------  \\u25e2\\u25e3\\n     *      \\u25e5\\u25e4            |                         \\u25bc             \\u25e2\\u25e3\\n     *   \\uff32\\uff25\\uff2d\\uff2f\\uff36\\uff25  (amount + 1)              (amount + 1)      \\uff21\\uff24\\uff24\\n     **/\\n\\n    function getInputPriceWithReserves(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) public view override returns (Decimal.decimal memory) {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n\\n        bool isAddToAmm = _dirOfQuote == Dir.ADD_TO_AMM;\\n\\n        SignedDecimal.signedDecimal memory baseAssetAfter;\\n        Decimal.decimal memory quoteAssetAfter;\\n        Decimal.decimal memory baseAssetBought;\\n\\n        if (isAddToAmm) {\\n            quoteAssetAfter = _quoteAssetPoolAmount.addD(_quoteAssetAmount);\\n        } else {\\n            quoteAssetAfter = _quoteAssetPoolAmount.subD(_quoteAssetAmount);\\n        }\\n        require(quoteAssetAfter.toUint() != 0, \\\"quote asset after is 0\\\");\\n\\n        baseAssetAfter = MixedDecimal.fromDecimal(k).divD(quoteAssetAfter);\\n        baseAssetBought = baseAssetAfter.subD(_baseAssetPoolAmount).abs();\\n\\n        return baseAssetBought;\\n    }\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) public view override returns (Decimal.decimal memory) {\\n        if (_baseAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n\\n        bool isAddToAmm = _dirOfBase == Dir.ADD_TO_AMM;\\n\\n        SignedDecimal.signedDecimal memory quoteAssetAfter;\\n        Decimal.decimal memory baseAssetAfter;\\n        Decimal.decimal memory quoteAssetSold;\\n\\n        if (isAddToAmm) {\\n            baseAssetAfter = _baseAssetPoolAmount.addD(_baseAssetAmount);\\n        } else {\\n            baseAssetAfter = _baseAssetPoolAmount.subD(_baseAssetAmount);\\n        }\\n        require(baseAssetAfter.toUint() != 0, \\\"base asset after is 0\\\");\\n\\n        quoteAssetAfter = MixedDecimal.fromDecimal(k).divD(baseAssetAfter);\\n        quoteAssetSold = quoteAssetAfter.subD(_quoteAssetPoolAmount).abs();\\n\\n        return quoteAssetSold;\\n    }\\n\\n    //\\n    // INTERNAL\\n    //\\n\\n    function _addReserveSnapshot() internal {\\n        uint256 currentBlock = block.number;\\n        ReserveSnapshot storage latestSnapshot = reserveSnapshots[\\n            reserveSnapshots.length - 1\\n        ];\\n        // update values in snapshot if in the same block\\n        if (currentBlock == latestSnapshot.blockNumber) {\\n            latestSnapshot.quoteAssetReserve = quoteAssetReserve;\\n            latestSnapshot.baseAssetReserve = baseAssetReserve;\\n        } else {\\n            reserveSnapshots.push(\\n                ReserveSnapshot(\\n                    quoteAssetReserve,\\n                    baseAssetReserve,\\n                    block.timestamp,\\n                    currentBlock\\n                )\\n            );\\n        }\\n        emit ReserveSnapshotted(\\n            quoteAssetReserve.toUint(),\\n            baseAssetReserve.toUint(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function implSwapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) internal returns (Decimal.decimal memory) {\\n        if (_baseAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        if (_dirOfBase == Dir.REMOVE_FROM_AMM) {\\n            require(\\n                baseAssetReserve.mulD(tradeLimitRatio).toUint() >=\\n                    _baseAssetAmount.toUint(),\\n                \\\"over trading limit\\\"\\n            );\\n        }\\n\\n        Decimal.decimal memory quoteAssetAmount = getOutputPrice(\\n            _dirOfBase,\\n            _baseAssetAmount\\n        );\\n        Dir dirOfQuote = _dirOfBase == Dir.ADD_TO_AMM\\n            ? Dir.REMOVE_FROM_AMM\\n            : Dir.ADD_TO_AMM;\\n        // If SHORT, exchanged quote amount should be less than _quoteAssetAmountLimit,\\n        // otherwise(LONG), exchanged base amount should be more than _quoteAssetAmountLimit.\\n        // In the SHORT case, more quote assets means more payment so should not be more than _quoteAssetAmountLimit\\n        if (_quoteAssetAmountLimit.toUint() != 0) {\\n            if (dirOfQuote == Dir.REMOVE_FROM_AMM) {\\n                // SHORT\\n                require(\\n                    quoteAssetAmount.toUint() >=\\n                        _quoteAssetAmountLimit.toUint(),\\n                    \\\"Less than minimal quote token\\\"\\n                );\\n            } else {\\n                // LONG\\n                require(\\n                    quoteAssetAmount.toUint() <=\\n                        _quoteAssetAmountLimit.toUint(),\\n                    \\\"More than maximal quote token\\\"\\n                );\\n            }\\n        }\\n\\n        // as mentioned in swapOutput(), it always allows going over fluctuation limit because\\n        // it is only used by close/liquidate positions\\n        _updateReserve(dirOfQuote, quoteAssetAmount, _baseAssetAmount, true);\\n        emit SwapOutput(\\n            _dirOfBase,\\n            quoteAssetAmount.toUint(),\\n            _baseAssetAmount.toUint()\\n        );\\n        return quoteAssetAmount;\\n    }\\n\\n    // the direction is in quote asset\\n    function _updateReserve(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _baseAssetAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal {\\n        // check if it's over fluctuationLimitRatio\\n        // this check should be before reserves being updated\\n        _checkIsOverBlockFluctuationLimit(\\n            _dirOfQuote,\\n            _quoteAssetAmount,\\n            _baseAssetAmount,\\n            _canOverFluctuationLimit\\n        );\\n\\n        if (_dirOfQuote == Dir.ADD_TO_AMM) {\\n            quoteAssetReserve = quoteAssetReserve.addD(_quoteAssetAmount);\\n            baseAssetReserve = baseAssetReserve.subD(_baseAssetAmount);\\n            baseAssetDeltaThisFundingPeriod = baseAssetDeltaThisFundingPeriod\\n                .subD(_baseAssetAmount);\\n            totalPositionSize = totalPositionSize.addD(_baseAssetAmount);\\n            cumulativeNotional = cumulativeNotional.addD(_quoteAssetAmount);\\n        } else {\\n            quoteAssetReserve = quoteAssetReserve.subD(_quoteAssetAmount);\\n            baseAssetReserve = baseAssetReserve.addD(_baseAssetAmount);\\n            baseAssetDeltaThisFundingPeriod = baseAssetDeltaThisFundingPeriod\\n                .addD(_baseAssetAmount);\\n            totalPositionSize = totalPositionSize.subD(_baseAssetAmount);\\n            cumulativeNotional = cumulativeNotional.subD(_quoteAssetAmount);\\n        }\\n\\n        // _addReserveSnapshot must be after checking price fluctuation\\n        _addReserveSnapshot();\\n    }\\n\\n    function _implGetInputAssetTwapPrice(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _assetAmount,\\n        QuoteAssetDir _inOut,\\n        uint256 _interval\\n    ) internal view returns (Decimal.decimal memory) {\\n        TwapPriceCalcParams memory params;\\n        params.opt = TwapCalcOption.INPUT_ASSET;\\n        params.snapshotIndex = reserveSnapshots.length - 1;\\n        params.asset.dir = _dirOfQuote;\\n        params.asset.assetAmount = _assetAmount;\\n        params.asset.inOrOut = _inOut;\\n        return _calcTwap(params, _interval);\\n    }\\n\\n    function _implGetReserveTwapPrice(\\n        uint256 _interval\\n    ) internal view returns (Decimal.decimal memory) {\\n        TwapPriceCalcParams memory params;\\n        params.opt = TwapCalcOption.RESERVE_ASSET;\\n        params.snapshotIndex = reserveSnapshots.length - 1;\\n        return _calcTwap(params, _interval);\\n    }\\n\\n    function _calcTwap(\\n        TwapPriceCalcParams memory _params,\\n        uint256 _interval\\n    ) internal view returns (Decimal.decimal memory) {\\n        Decimal.decimal memory currentPrice = _getPriceWithSpecificSnapshot(\\n            _params\\n        );\\n        if (_interval == 0) {\\n            return currentPrice;\\n        }\\n\\n        uint256 baseTimestamp = block.timestamp - _interval;\\n        ReserveSnapshot memory currentSnapshot = reserveSnapshots[\\n            _params.snapshotIndex\\n        ];\\n        // return the latest snapshot price directly\\n        // if only one snapshot or the timestamp of latest snapshot is earlier than asking for\\n        if (\\n            reserveSnapshots.length == 1 ||\\n            currentSnapshot.timestamp <= baseTimestamp\\n        ) {\\n            return currentPrice;\\n        }\\n\\n        uint256 previousTimestamp = currentSnapshot.timestamp;\\n        uint256 period = block.timestamp - previousTimestamp;\\n        Decimal.decimal memory weightedPrice = currentPrice.mulScalar(period);\\n        while (true) {\\n            // if snapshot history is too short\\n            if (_params.snapshotIndex == 0) {\\n                return weightedPrice.divScalar(period);\\n            }\\n\\n            _params.snapshotIndex = _params.snapshotIndex - 1;\\n            currentSnapshot = reserveSnapshots[_params.snapshotIndex];\\n            currentPrice = _getPriceWithSpecificSnapshot(_params);\\n\\n            // check if current round timestamp is earlier than target timestamp\\n            if (currentSnapshot.timestamp <= baseTimestamp) {\\n                // weighted time period will be (target timestamp - previous timestamp). For example,\\n                // now is 1000, _interval is 100, then target timestamp is 900. If timestamp of current round is 970,\\n                // and timestamp of NEXT round is 880, then the weighted time period will be (970 - 900) = 70,\\n                // instead of (970 - 880)\\n                weightedPrice = weightedPrice.addD(\\n                    currentPrice.mulScalar(previousTimestamp - baseTimestamp)\\n                );\\n                break;\\n            }\\n\\n            uint256 timeFraction = previousTimestamp -\\n                currentSnapshot.timestamp;\\n            weightedPrice = weightedPrice.addD(\\n                currentPrice.mulScalar(timeFraction)\\n            );\\n            period = period + timeFraction;\\n            previousTimestamp = currentSnapshot.timestamp;\\n        }\\n        return weightedPrice.divScalar(_interval);\\n    }\\n\\n    function _getPriceWithSpecificSnapshot(\\n        TwapPriceCalcParams memory params\\n    ) internal view virtual returns (Decimal.decimal memory) {\\n        ReserveSnapshot memory snapshot = reserveSnapshots[\\n            params.snapshotIndex\\n        ];\\n\\n        // RESERVE_ASSET means price comes from quoteAssetReserve/baseAssetReserve\\n        // INPUT_ASSET means getInput/Output price with snapshot's reserve\\n        if (params.opt == TwapCalcOption.RESERVE_ASSET) {\\n            return snapshot.quoteAssetReserve.divD(snapshot.baseAssetReserve);\\n        } else if (params.opt == TwapCalcOption.INPUT_ASSET) {\\n            if (params.asset.assetAmount.toUint() == 0) {\\n                return Decimal.zero();\\n            }\\n            if (params.asset.inOrOut == QuoteAssetDir.QUOTE_IN) {\\n                return\\n                    getInputPriceWithReserves(\\n                        params.asset.dir,\\n                        params.asset.assetAmount,\\n                        snapshot.quoteAssetReserve,\\n                        snapshot.baseAssetReserve\\n                    );\\n            } else if (params.asset.inOrOut == QuoteAssetDir.QUOTE_OUT) {\\n                return\\n                    getOutputPriceWithReserves(\\n                        params.asset.dir,\\n                        params.asset.assetAmount,\\n                        snapshot.quoteAssetReserve,\\n                        snapshot.baseAssetReserve\\n                    );\\n            }\\n        }\\n        revert(\\\"not supported option\\\");\\n    }\\n\\n    function _getPriceBoundariesOfLastBlock()\\n        internal\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory)\\n    {\\n        uint256 len = reserveSnapshots.length;\\n        ReserveSnapshot memory latestSnapshot = reserveSnapshots[len - 1];\\n        // if the latest snapshot is the same as current block, get the previous one\\n        if (latestSnapshot.blockNumber == block.number && len > 1) {\\n            latestSnapshot = reserveSnapshots[len - 2];\\n        }\\n\\n        Decimal.decimal memory lastPrice = latestSnapshot\\n            .quoteAssetReserve\\n            .divD(latestSnapshot.baseAssetReserve);\\n        Decimal.decimal memory upperLimit = lastPrice.mulD(\\n            Decimal.one().addD(fluctuationLimitRatio)\\n        );\\n        Decimal.decimal memory lowerLimit = lastPrice.mulD(\\n            Decimal.one().subD(fluctuationLimitRatio)\\n        );\\n        return (upperLimit, lowerLimit);\\n    }\\n\\n    /**\\n     * @notice there can only be one tx in a block can skip the fluctuation check\\n     *         otherwise, some positions can never be closed or liquidated\\n     * @param _canOverFluctuationLimit if true, can skip fluctuation check for once; else, can never skip\\n     */\\n    function _checkIsOverBlockFluctuationLimit(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _baseAssetAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal view {\\n        // Skip the check if the limit is 0\\n        if (fluctuationLimitRatio.toUint() == 0) {\\n            return;\\n        }\\n\\n        //\\n        // assume the price of the last block is 10, fluctuation limit ratio is 5%, then\\n        //\\n        //          current price\\n        //  --+---------+-----------+---\\n        //   9.5        10         10.5\\n        // lower limit           upper limit\\n        //\\n        // when `openPosition`, the price can only be between 9.5 - 10.5\\n        // when `liquidate` and `closePosition`, the price can exceed the boundary once\\n        // (either lower than 9.5 or higher than 10.5)\\n        // once it exceeds the boundary, all the rest txs in this block fail\\n        //\\n\\n        (\\n            Decimal.decimal memory upperLimit,\\n            Decimal.decimal memory lowerLimit\\n        ) = _getPriceBoundariesOfLastBlock();\\n\\n        Decimal.decimal memory price = quoteAssetReserve.divD(baseAssetReserve);\\n        // solhint-disable-next-line reason-string\\n        require(\\n            price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0,\\n            \\\"price is already over fluctuation limit\\\"\\n        );\\n\\n        if (!_canOverFluctuationLimit) {\\n            price = (_dirOfQuote == Dir.ADD_TO_AMM)\\n                ? quoteAssetReserve.addD(_quoteAssetAmount).divD(\\n                    baseAssetReserve.subD(_baseAssetAmount)\\n                )\\n                : quoteAssetReserve.subD(_quoteAssetAmount).divD(\\n                    baseAssetReserve.addD(_baseAssetAmount)\\n                );\\n            require(\\n                price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0,\\n                \\\"price is over fluctuation limit\\\"\\n            );\\n        }\\n    }\\n\\n    function _requireValidRatio(Decimal.decimal memory _ratio) internal pure {\\n        require(_ratio.cmp(Decimal.one()) <= 0, \\\"invalid ratio\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x83d79ba577e3a068ffaf9aa633aaeca08e31d643d9fcb91f309bd858dc5151d5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct Ratios {\\n        Decimal.decimal feeRatio;\\n        Decimal.decimal initMarginRatio;\\n        Decimal.decimal maintenanceMarginRatio;\\n        Decimal.decimal partialLiquidationRatio;\\n        Decimal.decimal liquidationFeeRatio;\\n    }\\n\\n    function swapInput(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function settleFunding()\\n        external\\n        returns (\\n            SignedDecimal.signedDecimal memory premiumFraction,\\n            Decimal.decimal memory markPrice,\\n            Decimal.decimal memory indexPrice\\n        );\\n\\n    function repegPrice()\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function repegK(\\n        Decimal.decimal memory _multiplier\\n    )\\n        external\\n        returns (\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            Decimal.decimal memory,\\n            SignedDecimal.signedDecimal memory\\n        );\\n\\n    function updateFundingRate(\\n        SignedDecimal.signedDecimal memory,\\n        SignedDecimal.signedDecimal memory,\\n        Decimal.decimal memory\\n    ) external;\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function calcFee(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        bool _isOpenPos\\n    ) external view returns (Decimal.decimal memory fees);\\n\\n    function getMarkPrice() external view returns (Decimal.decimal memory);\\n\\n    function getIndexPrice() external view returns (Decimal.decimal memory);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    function getFeeRatio() external view returns (Decimal.decimal memory);\\n\\n    function getInitMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaintenanceMarginRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getPartialLiquidationRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getLiquidationFeeRatio()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getMaxHoldingBaseAsset()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap()\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDelta()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function fundingPeriod() external view returns (uint256);\\n\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    function getRatios() external view returns (Ratios memory);\\n\\n    function calcPriceRepegPnl(\\n        Decimal.decimal memory _repegTo\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function calcKRepegPnl(\\n        Decimal.decimal memory _k\\n    ) external view returns (SignedDecimal.signedDecimal memory repegPnl);\\n\\n    function isOverFluctuationLimit(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount\\n    ) external view returns (bool);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n\\n    function getInputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external view returns (Decimal.decimal memory);\\n}\\n\",\"keccak256\":\"0xa9c8cf13349b2d473e9df5491aa3ab6a352d683871774e5e5ba29274602886c4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\ninterface IPriceFeed {\\n    // get latest price\\n    function getPrice(bytes32 _priceFeedKey) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcdf6c7dc880d4ed2ffcf2fc88db1b0082fc0b213dd3e03046def56f0f25637aa\",\"license\":\"GPL-3.0\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        return decimal((x.d * (DecimalMath.unit(18))) % y.d);\\n    }\\n\\n    function cmp(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        decimal memory x,\\n        decimal memory y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(\\n        decimal memory x,\\n        uint256 y\\n    ) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(decimal memory _y) internal pure returns (decimal memory) {\\n        uint256 y = _y.d * 1e18;\\n        uint256 z;\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return decimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5b42de95ec1faf055f3b13cd7467b7fb9ce57bfe5967407e57fcf6e0411374cf\",\"license\":\"GPL-3.0\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nlibrary DecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10 ** uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * y) / (unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0xb9b1495f2a60bdffdcfb0aad70ef3928ec081a094b68151d3845da8535c2460e\",\"license\":\"GPL-3.0\"},\"contracts/utils/MixedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./SignedDecimal.sol\\\";\\n\\n/// @dev To handle a signedDecimal add/sub/mul/div a decimal and provide convert decimal to signedDecimal helper\\nlibrary MixedDecimal {\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n\\n    uint256 private constant _INT256_MAX = 2 ** 255 - 1;\\n    string private constant ERROR_NON_CONVERTIBLE =\\n        \\\"MixedDecimal: uint value is bigger than _INT256_MAX\\\";\\n\\n    modifier convertible(Decimal.decimal memory x) {\\n        require(_INT256_MAX >= x.d, ERROR_NON_CONVERTIBLE);\\n        _;\\n    }\\n\\n    function fromDecimal(\\n        Decimal.decimal memory x\\n    )\\n        internal\\n        pure\\n        convertible(x)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return SignedDecimal.signedDecimal(int256(x.d));\\n    }\\n\\n    function toUint(\\n        SignedDecimal.signedDecimal memory x\\n    ) internal pure returns (uint256) {\\n        return x.abs().d;\\n    }\\n\\n    /// @dev add SignedDecimal.signedDecimal and Decimal.decimal, using SignedSafeMath directly\\n    function addD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d + int256(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract SignedDecimal.signedDecimal by Decimal.decimal, using SignedSafeMath directly\\n    function subD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d - int256(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by Decimal.decimal\\n    function mulD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by a uint256\\n    function mulScalar(\\n        SignedDecimal.signedDecimal memory x,\\n        uint256 y\\n    ) internal pure returns (SignedDecimal.signedDecimal memory) {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulScalar(int256(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a Decimal.decimal\\n    function divD(\\n        SignedDecimal.signedDecimal memory x,\\n        Decimal.decimal memory y\\n    )\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a uint256\\n    function divScalar(\\n        SignedDecimal.signedDecimal memory x,\\n        uint256 y\\n    ) internal pure returns (SignedDecimal.signedDecimal memory) {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divScalar(int256(y));\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x0c5d397c27f9a6bd7500a068495b1b293d9da0abd19015c2c4f643202b386fda\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(\\n        signedDecimal memory x\\n    ) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.addd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.subd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d * y;\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(\\n        signedDecimal memory x,\\n        signedDecimal memory y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(\\n        signedDecimal memory x,\\n        int256 y\\n    ) internal pure returns (signedDecimal memory) {\\n        signedDecimal memory t;\\n        t.d = x.d / y;\\n        return t;\\n    }\\n\\n    /// @dev square root\\n    function sqrt(\\n        signedDecimal memory _y\\n    ) internal pure returns (signedDecimal memory) {\\n        int256 y = _y.d * 1e18;\\n        int256 z;\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return signedDecimal(z);\\n    }\\n}\\n\",\"keccak256\":\"0x5ed13cc8287d0d38d8e55f0af0c305255ffab19c8beb8df2b300209028b42d9c\",\"license\":\"GPL-3.0\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.13;\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10 ** uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x + y;\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x - y;\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / (y);\\n    }\\n}\\n\",\"keccak256\":\"0x44be9eee14568549f21f9cb9066739a5624d895da606e4413878374c21cba993\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614745806100206000396000f3fe608060405234801561001057600080fd5b506004361061045e5760003560e01c8063715018a61161024c578063b42baf3e11610146578063df7d2759116100c3578063f1b5df8611610087578063f1b5df8614610acf578063f2fde38b14610ae2578063f4fe3e9c14610af5578063fcfff16f14610afe578063fdf262b714610b1257600080fd5b8063df7d275914610a8e578063e0037a6c14610aa1578063e1f1027f14610aaa578063e4bc2eb914610abd578063ed83d79c14610ac757600080fd5b8063d48f271d1161010a578063d48f271d14610a38578063d56f2fda14610a42578063d71ec2ad14610a55578063da0c592714610a68578063de8b319214610a7b57600080fd5b8063b42baf3e146109d7578063b4f40c6114610a08578063c2de442f14610a12578063c9566fcc14610a1b578063c9dde75614610a2557600080fd5b80638f40d932116101d4578063a6174e5611610198578063a6174e561461094f578063a7b774a014610958578063a8f8be4e1461096b578063b0919abe1461097e578063b13c86a31461098857600080fd5b80638f40d93214610904578063918a8d321461090e5780639bf5d1d4146109215780639e010362146109345780639ece77c81461093c57600080fd5b806375df63891161021b57806375df6389146108b05780637cb9dcee146108c35780637fd44dae146108d6578063862c04e3146108e05780638da5cb5b146108f357600080fd5b8063715018a614610879578063724e78da14610881578063741bef1a1461089457806374d7c62b146108a757600080fd5b80632d77407d1161035d57806350799c81116102e557806360409632116102a957806360409632146108165780636c1274461461081e5780636d206d6d146108315780636fa42ede146108535780636fdca5e01461086657600080fd5b806350799c81146107ae57806352545410146107c157806358a4c3dc146107e357806358c0994a146107ec57806359362b88146107f457600080fd5b8063385b50f41161032c578063385b50f41461074257806341d3c84c14610764578063471be2fa146107885780634894d183146107915780634cb876f2146107a457600080fd5b80632d77407d146106b85780632d7cb219146107055780632f84885914610718578063332b82fa1461073a57600080fd5b806311377394116103eb57806321e00985116103af57806321e0098514610612578063252a4ba51461064557806329f9b17b146106585780632a5aa2921461067a5780632c453bdf1461068d57600080fd5b8063113773941461059d578063130234cf146105bf5780631d3acb44146105e25780631e1ff13b146105ec578063203b3788146105ff57600080fd5b8063053077031161043257806305307703146105005780630902f1ac146105225780630aa33fa91461056d5780630d451c8f146105825780630dd68c701461058a57600080fd5b806298f34d14610463578063013dd7951461049557806301905e98146104d5578063021bd8ea146104ed575b600080fd5b60408051602080820183526000909152815190810190915260685481525b604051905181526020015b60405180910390f35b6104a86104a3366004613fc6565b610b25565b6040805195518652935160208601529151928401929092529051606083015251608082015260a00161048c565b607b546104df9081565b60405190815260200161048c565b6104816104fb366004613fc6565b610d20565b604080516020808201835260009091528151908101909152606b548152610481565b60408051602080820183526000918290528251808201845291909152815180820183526074548152825191820190925260755481525b6040805192518352905160208301520161048c565b61058061057b366004613fc6565b610e06565b005b6088546104df565b610580610598366004613fe2565b610e64565b6040805160208082018352600090915281519081019091526077548152610481565b6105d26105cd36600461402b565b610ece565b604051901515815260200161048c565b6067546104df9081565b6105806105fa366004614047565b610ff2565b61058061060d366004613fc6565b610fff565b610625610620366004614047565b61104c565b60408051945185529251602085015291830152606082015260800161048c565b610580610653366004614060565b61109d565b604080516020808201835260009091528151908101909152607a548152610481565b610580610688366004614047565b61111d565b6086546106a0906001600160a01b031681565b6040516001600160a01b03909116815260200161048c565b6040805160208082018352606f548252825180820184526070548152835191820190935260715481526106e9929083565b604080519351845291516020840152519082015260600161048c565b610580610713366004613fc6565b611168565b6040805160208082018352600090915281519081019091526079548152610481565b6104a86111ac565b6040805160208082018352600090915281519081019091526069548152610481565b60408051602080820183526072548252825190810190925260735482526105589182565b6104df607f5481565b61048161079f36600461402b565b6113e1565b6079546104df9081565b6104816107bc3660046140a6565b611406565b6040805160208082018352600090915281519081019091526078548152610481565b6104df60855481565b610481611543565b6040805160208082018352600090915281519081019091526065548152610481565b6104816115d4565b61058061082c366004613fc6565b61160f565b604080516020808201835260009091528151908101909152606a548152610481565b61048161086136600461402b565b61165c565b61058061087436600461410d565b61167a565b610580611718565b61058061088f36600461413d565b61172c565b6084546106a0906001600160a01b031681565b6104df607e5481565b6104816108be366004614172565b6117d4565b6105806108d1366004614060565b611a8b565b607d546104df9081565b6105806108ee366004613fc6565b611ae3565b6033546001600160a01b03166106a0565b6066546104df9081565b61058061091c3660046141bd565b611ba4565b61048161092f3660046140a6565b611f7e565b6105d261209d565b61058061094a36600461413d565b612133565b6104df60835481565b61048161096636600461423a565b61215d565b610580610979366004613fc6565b61231d565b607c546104df9081565b610990612361565b60405161048c9190600060a0820190508251518252602083015151602083015260408301515160408301526060830151516060830152608083015151608083015292915050565b6040805160208082018352606c54825282518082018452606d5481528351918201909352606e5481526106e9929083565b6076546104df9081565b6104df60815481565b6075546104df9081565b610580610a33366004613fc6565b612421565b607a546104df9081565b610580610a50366004614060565b61246e565b610481610a63366004614275565b612524565b610481610a7636600461402b565b6125ad565b610580610a89366004614047565b6125e6565b610481610a9c366004613fc6565b612643565b6104df60805481565b610481610ab836600461402b565b612732565b6074546104df9081565b6106e961276b565b610481610add366004614047565b612904565b610580610af036600461413d565b61291c565b6104df60825481565b6087546105d290600160a01b900460ff1681565b6087546106a0906001600160a01b031681565b604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152608754600160a01b900460ff16610ba25760405162461bcd60e51b8152600401610b99906142b1565b60405180910390fd5b6086546001600160a01b03163314610bcc5760405162461bcd60e51b8152600401610b99906142d9565b608354608254610bdc9190614326565b421015610c265760405162461bcd60e51b81526020600482015260186024820152771c995c1959c81a5b9d195c9d985b081d1bdbc81cdb585b1b60421b6044820152606401610b99565b6000610c3187612992565b60408051602080820183526074548252825190810190925260755482529192506000610c5d8385612a38565b90506000610c6b8386612a38565b90506000610c798383612a38565b90506000610c8682612643565b8451607481905584516075819055845160765542608255607d91909155607c559050610cb0612a6c565b7ff793c87aa8955ca27e2a318cdc9a5c97d6196b4eab42c2a9265c97e5ff244306610cd9875190565b8651865186518551604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a1949c939b5091995097509195509350505050565b6040805160208101909152600081526040805160208101909152607d548152600090610d4b90612c02565b6040805160208101909152607c548152909150600090610d6a90612c02565b90506000610d788383612c6d565b90506000610d8c610d876115d4565b612c02565b90506000610d9987612c02565b9050610dfb610df4610da9612c98565b610dee610dc8610dc1610dbc888a612cbc565b612ce7565b8690612c6d565b610de8610dd8610dbc898b612c6d565b610de2888a612c6d565b90612d68565b90612d93565b90612dbe565b8690612cbc565b979650505050505050565b610e0e612e3c565b610e1781612e96565b8051606681905560408051602081019091528190527f413bcf24bd99a421ccaf50a4a1dba0cfd78558ceb34625206d2e6dfa1a53ff27905b6040519081526020015b60405180910390a150565b610e6c612e3c565b81516077819055815160788190556040805160208082018352908490528151808201835283905281519384528301919091527f7338f3784ceb8f9456bac0c4a69f1c6354dc325fa6455e3e3f6a8a9bf9249a7c91015b60405180910390a15050565b604080516020810190915260675490819052600090600003610ef257506000610fec565b600080610efd612ee4565b915091506000610f0d86866125ad565b905060006001876001811115610f2557610f2561433e565b14610f6d5760408051602081019091526075548152610f6890610f489088613087565b60408051602081019091526074548152610f6290856130b2565b906130dd565b610fa5565b60408051602081019091526075548152610fa590610f8b90886130b2565b60408051602081019091526074548152610f629085613087565b90506000610fb38286613108565b60000b13158015610fd157506000610fcb8285613108565b60000b12155b15610fe3576000945050505050610fec565b60019450505050505b92915050565b610ffa612e3c565b608355565b611007612e3c565b61101081612e96565b8051606b81905560408051602081019091528190527f6f825f18b787836f7cf974799b160538ab237aa0d14af3611fa69683a40c6d2290610e4f565b6088818154811061105c57600080fd5b600091825260209182902060408051808501825260049093029091018054835281519384019091526001810154835260028101546003909101549193509084565b6110a5612e3c565b6040805160608101825284815260208101849052018190528251606c558151606d558051606e557fdb990bcf88f23a71d18373867e3602c89a209902f2bb7fda7691dd32152871346110f5845190565b83515b83516040805193845260208401929092529082015260600160405180910390a1505050565b611125612e3c565b607e81905561113560028261436a565b6081556040518181527f6ce6315004c92b2957244860cf57179c165f8c77755f841dcd1a7e315dc76afb90602001610e59565b611170612e3c565b8051606581905560408051602081019091528190527f42fb40f05167879d1c8fddb6b4cd334f303e50aaf387b80b3c27633933dac15790610e4f565b604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152608754600160a01b900460ff166112205760405162461bcd60e51b8152600401610b99906142b1565b6086546001600160a01b0316331461124a5760405162461bcd60e51b8152600401610b99906142d9565b60835460825461125a9190614326565b4210156112a45760405162461bcd60e51b81526020600482015260186024820152771c995c1959c81a5b9d195c9d985b081d1bdbc81cdb585b1b60421b6044820152606401610b99565b60006112ae611543565b905060006112bb82610d20565b60408051602080820183526074548252825190810190925260755482529192506112e6908490612a38565b51607481905560408051602080820183526075548252825190810190925291815261131091612a38565b5160765542608255607454607d55607554607c5561132c612a6c565b7ff793c87aa8955ca27e2a318cdc9a5c97d6196b4eab42c2a9265c97e5ff244306611355825190565b604080516020808201835260755491829052825180820184526074549081905283518083018552839052875184519586529185018390528484015260608401919091526080830152519081900360a00190a16040805160208082018352607554808352835180830185526074548152845192830190945281529299509750955093509150509091929394565b6040805160208101909152600081526113ff83836000610384613139565b9392505050565b6040805160208101909152600081528351600003611441576040805160208082018352600091829052825190810190925281525b905061153b565b6000808660018111156114565761145661433e565b14905061146f6040518060200160405280600081525090565b60408051602081019091526000815260408051602081019091526000815283156114a45761149d8789613087565b91506114b1565b6114ae87896130b2565b91505b81516000036114fb5760405162461bcd60e51b8152602060048201526016602482015275071756f746520617373657420616674657220697320360541b6044820152606401610b99565b6040805160208101909152607654815261152090839061151a90612c02565b906131df565b925061153461152f8488612dbe565b61325a565b9450505050505b949350505050565b6040805160208101909152600081526040805160208101918290526084546085546331d98b3f60e01b90935260248201929092529081906001600160a01b03166331d98b3f60448301602060405180830381865afa1580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd919061437e565b9052919050565b604080516020810190915260008152604080516020808201835260755482528251908101909252607454825261160a91906130dd565b905090565b611617612e3c565b61162081612e96565b8051606981905560408051602081019091528190527fe75e3e311afafb466335ae8af3bf1d55443d8937fb5ada14583f4fca729c0fa890610e4f565b6040805160208101909152600081526113ff83836001610384613139565b611682612e3c565b60875460ff600160a01b90910416151581151514611715576087805482158015600160a01b0260ff60a01b19909216919091179091556116e757610e10607e54426116cd9190614326565b6116d7919061436a565b6116e390610e10614397565b6080555b604051811515907fc15f25c4eb6ac5b9dc23661b850cbdb3ee36aebed198ad870ab929bae77142de90600090a25b50565b611720612e3c565b61172a600061329e565b565b611734612e3c565b6001600160a01b03811661178a5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964205072696365466565642061646472657373000000000000006044820152606401610b99565b608480546001600160a01b0319166001600160a01b0383169081179091556040517fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e690600090a250565b604080516020810190915260008152608754600160a01b900460ff1661180c5760405162461bcd60e51b8152600401610b99906142b1565b6086546001600160a01b031633146118365760405162461bcd60e51b8152600401610b99906142d9565b61184c61184836869003860186613fc6565b5190565b6000036118735760408051602080820183526000918290528251908101909252815261143a565b60018560018111156118875761188761433e565b0361190b5761189e61184836869003860186613fc6565b60408051602080820183526066548252825190810190925260745482526118c89161184891612a38565b101561190b5760405162461bcd60e51b81526020600482015260126024820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b6044820152606401610b99565b600061192086610ab836889003880188613fc6565b905061193461184836869003860186613fc6565b15611a1b57600086600181111561194d5761194d61433e565b036119b95761196461184836869003860186613fc6565b815110156119b45760405162461bcd60e51b815260206004820152601c60248201527f4c657373207468616e206d696e696d616c206261736520746f6b656e000000006044820152606401610b99565b611a1b565b6119cb61184836869003860186613fc6565b81511115611a1b5760405162461bcd60e51b815260206004820152601c60248201527f4d6f7265207468616e206d6178696d616c206261736520746f6b656e000000006044820152606401610b99565b611a3586611a2e36889003880188613fc6565b83866132f0565b7fae6a2b946841d9afc0e1e19a94ae4af26f01125b87b5095bbfb177a9741a2ede86611a6961184836899003890189613fc6565b8351604051611a7a939291906143b6565b60405180910390a195945050505050565b611a93612e3c565b6040805160608101825284815260208101849052018190528251606f55815160705580516071557fd12c16549241d3cde1b026616ce24879c1f8573a0d6e6066d6cb88d339a01f756110f5845190565b611aeb612e3c565b611af481612e96565b6000611b08611b01612c98565b8390613108565b60000b12611b685760405162461bcd60e51b815260206004820152602760248201527f7061727469616c206c697120726174696f2073686f756c64206265206c657373604482015266207468616e203160c81b6064820152608401610b99565b8051606a81905560408051602081019091528190527f879382899c61e679db091d48ae2646f0021988fe20a18f21e1b856acbc57bb5c90610e4f565b600054610100900460ff1615808015611bc45750600054600160ff909116105b80611bde5750303b158015611bde575060005460ff166001145b611c415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b99565b6000805460ff191660011790558015611c64576000805461ff0019166101001790555b8915801590611c7257508715155b8015611c7d57508815155b8015611c8857508615155b8015611c9c57506001600160a01b03861615155b8015611cb057506001600160a01b03841615155b611cec5760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610b99565b611cf4613455565b6040805160208082018352908c905260748c9055815180820183528b905260758b9055815180820183528b815282519182019092528b8152611d3591612a38565b516076556040805160208082018352908a905260668a905581518082018352849052606584905581519081019091528390526067839055607e879055611d7c60028861436a565b60815561a8c0608355607e54607f556085859055608780546001600160a01b038681166001600160a01b03199283161790925560848054928916929091169190911790556040805160a0810182526074805460808301908152825282516020808201855260758054835281850192835242858701818152436060808901918252608880546001810182556000919091529851516004999099027f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf68101999099559551517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf789015590517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf8880155517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf99096019590955585518083018752935493849052855180830187529054908190528551938452908301528184019290925291517f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe905159281900390910190a16040805160208082018352908b9052607c8b905581519081019091528a9052607d8a90558015611f72576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6040805160208101909152600081528351600003611fb65760408051602080820183526000918290528251908101909252815261143a565b600080866001811115611fcb57611fcb61433e565b149050611fe46040518060200160405280600081525090565b6040805160208101909152600081526040805160208101909152600081528315612019576120128689613087565b9150612026565b61202386896130b2565b91505b815160000361206f5760405162461bcd60e51b8152602060048201526015602482015274062617365206173736574206166746572206973203605c1b6044820152606401610b99565b6040805160208101909152607654815261208e90839061151a90612c02565b925061153461152f8489612dbe565b6000806120a8611543565b905060006120b4825190565b116120f45760405162461bcd60e51b815260206004820152601060248201526f0696e64657820707269636520697320360841b6044820152606401610b99565b60006120fe6115d4565b9050600061211661152f8461151a86610dee87612c02565b905067016345785d8a0000612129825190565b1015935050505090565b61213b612e3c565b608680546001600160a01b0319166001600160a01b0392909216919091179055565b60408051602081019091526000815261217e61184836859003850185613fc6565b6000036121a8576040805160208082018352600091829052825190810190925281525b90506113ff565b60006121b2611543565b905060006121be6115d4565b905060006121d961184884610f6261152f86610dee89612c02565b905060008760018111156121ef576121ef61433e565b84518451106121ff576001612202565b60005b60018111156122135761221361433e565b604080516020810190915260655481529114915086156122f7576040805160208101909152606f54908190521580159061225d57506040805160208101909152606f549081905283115b1561229457811561227e5750604080516020810190915260715481526122f7565b50604080516020810190915260705481526122f7565b6040805160208101909152606c5490819052158015906122c457506040805160208101909152606c549081905283115b156122f75781156122e557506040805160208101909152606e5481526122f7565b506040805160208101909152606d5481525b6123108161230a368b90038b018b613fc6565b90612a38565b9998505050505050505050565b612325612e3c565b8051606781905560408051602081019091528190527f878cd65339a771e627bc9856c713f02fec044bd7607db61e3858f8d56e4ea4f590610e4f565b6123bc6040805160c081018252600060a0820181815282528251602080820185528282528084019190915283518082018552828152838501528351808201855282815260608401528351908101909352825290608082015290565b506040805160c08101825260655460a0820190815281528151602081810184526068548252808301919091528251808201845260695481528284015282518082018452606a54815260608301528251908101909252606b548252608081019190915290565b612429612e3c565b61243281612e96565b8051606881905560408051602081019091528190527fd67453718fc57aad470d91be51568530ed02cc941c846cd9e281dc56b300e95e90610e4f565b608754600160a01b900460ff166124975760405162461bcd60e51b8152600401610b99906142b1565b6086546001600160a01b031633146124c15760405162461bcd60e51b8152600401610b99906142d9565b6124cb83826131df565b516072556124d982826131df565b5160738190556040805160208082018352607254918290528251908101909252908290527fc57b3a3cd4f9b755410fcb52f146d4f7e06805a4bafdf9da9f0ec270a90002c9916110f8565b604080516020810190915260008152608754600160a01b900460ff1661255c5760405162461bcd60e51b8152600401610b99906142b1565b6086546001600160a01b031633146125865760405162461bcd60e51b8152600401610b99906142d9565b61153b8461259936869003860186613fc6565b6125a836869003860186613fc6565b613484565b60408051602081019091526000815260408051602080820183526074548252825190810190925260755482526113ff9185918591611f7e565b6125ee612e3c565b8060000361263e5760405162461bcd60e51b815260206004820152601960248201527f63616e206e6f742073657420696e74657276616c20746f2030000000000000006044820152606401610b99565b607f55565b6040805160208101909152600081526040805160208101909152607c54815260009061266e90612c02565b6040805160208101909152607d54815290915060009061268d90612c02565b9050600061269b8284612c6d565b905060006126a98385612cbc565b905060006126b8610d876115d4565b905060006126c588612c02565b905060006126f66126d9610dbc8688612c6d565b610de26126e9610dbc8888612c6d565b610de8610dbc8789612c6d565b9050612310612708610dbc8686612cbc565b610de2612718610dbc888a612cbc565b610de8612728610dbc888a612cbc565b610de88888612c6d565b60408051602081019091526000815260408051602080820183526074548252825190810190925260755482526113ff9185918591611406565b604080516020810190915260008152604080516020810190915260008152604080516020810190915260008152608754600160a01b900460ff166127c15760405162461bcd60e51b8152600401610b99906142b1565b6086546001600160a01b031633146127eb5760405162461bcd60e51b8152600401610b99906142d9565b60805442101561283d5760405162461bcd60e51b815260206004820152601860248201527f736574746c652066756e64696e6720746f6f206561726c7900000000000000006044820152606401610b99565b612848607f54612904565b9150612852611543565b9050600061286382610dee85612c02565b905061288762015180612881607e54846136a090919063ffffffff16565b9061370b565b93506000608154426128999190614326565b90506000610e10607e546080546128b09190614326565b6128ba919061436a565b6128c690610e10614397565b90508181116128d557816128d7565b805b60805550506040805160208082018352600091829052825190810190925290819052607b55509192909190565b604080516020810190915260008152610fec82613736565b612924612e3c565b6001600160a01b0381166129895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b99565b6117158161329e565b6040805160208101909152600080825282516129b690670de0b6b3a7640000614397565b905060006003821115612a1957508060006129d260028361436a565b6129dd906001614326565b90505b81811015612a13579050806002816129f8818661436a565b612a029190614326565b612a0c919061436a565b90506129e0565b50612a23565b8115612a23575060015b60408051602081019091529081529392505050565b60408051602081019091526000815260408051602081019091526000815282518451612a639161376f565b81529392505050565b608880544391600091612a81906001906143ec565b81548110612a9157612a91614403565b9060005260206000209060040201905080600301548203612abe5760745481556075546001820155612ba7565b6040805160a081018252607454608082019081528152815160208082018452607554825282019081524292820192835260608201858152608880546001810182556000919091529251517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf66004909402938401559051517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf783015591517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf882015590517f7ef464cf5a521d70c933977510816a0355b91a50eca2778837fb82da8448ecf9909101555b604080516020808201835260745491829052825180820184526075549081905283519283529082015242918101919091527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe9051590606001610ec2565b6040805160208101909152600081528180600001516001600160ff1b0310156040518060600160405280603381526020016146dd6033913990612c585760405162461bcd60e51b8152600401610b999190614419565b50506040805160208101909152915182525090565b60408051602081019091526000815260408051602081019091526000815282518451612a639161377d565b60408051602081019091526000815260405180602001604052806115cd601261378b565b60408051602081019091526000815260408051602081019091526000815282518451612a639161379b565b604080516020810190915260008082528251612d0b90670de0b6b3a764000061446e565b905060006003821315612a195750806000612d276002836144f3565b612d32906001614521565b90505b81811215612a1357905080600281612d4d81866144f3565b612d579190614521565b612d6191906144f3565b9050612d35565b60408051602081019091526000815260408051602081019091526000815282518451612a63916137a9565b60408051602081019091526000815260408051602081019091526000815282518451612a63916137b5565b6040805160208101909152600081528180600001516001600160ff1b0310156040518060600160405280603381526020016146dd6033913990612e145760405162461bcd60e51b8152600401610b999190614419565b5060408051602081019091526000815283518551612e329190614562565b8152949350505050565b6033546001600160a01b0316331461172a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b99565b6000612ea3611b01612c98565b60000b13156117155760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420726174696f60981b6044820152606401610b99565b6040805160208101909152600081526040805160208101909152600081526088805490600090612f156001846143ec565b81548110612f2557612f25614403565b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152938301939093526002830154908201526003909101546060820181905290915043148015612f895750600182115b15612fff576088612f9b6002846143ec565b81548110612fab57612fab614403565b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290505b6020810151815160009161301391906130dd565b604080516020810190915260675481529091506000906130469061303f90613039612c98565b90613087565b8390612a38565b60408051602081019091526067548152909150600090613079906130729061306c612c98565b906130b2565b8490612a38565b919791965090945050505050565b60408051602081019091526000815260408051602081019091526000815282518451612a63916137c1565b60408051602081019091526000815260408051602081019091526000815282518451612a63916137cd565b60408051602081019091526000815260408051602081019091526000815282518451612a63916137d9565b80518251600091101561311d57506001610fec565b8151835110156131305750600019610fec565b50600092915050565b604080516020810190915260008152613150613f24565b600180825260885461316291906143ec565b6020820152604081015186600181111561317e5761317e61433e565b908160018111156131915761319161433e565b9052506040808201805160200187905251018460018111156131b5576131b561433e565b908160018111156131c8576131c861433e565b9052506131d581846137e7565b9695505050505050565b6040805160208101909152600081528180600001516001600160ff1b0310156040518060600160405280603381526020016146dd60339139906132355760405162461bcd60e51b8152600401610b999190614419565b50604080516020810190915260008152613251610dc185612c02565b95945050505050565b60408051602081019091526000815260408051602081019091526000815282516000131561329657825161328f906000614562565b8152610fec565b915182525090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6132fc848484846139fc565b60008460018111156133105761331061433e565b036133b0576040805160208101909152607454815261332f9084613087565b516074556040805160208101909152607554815261334d90836130b2565b516075556040805160208101909152607b54815261336b9083612dbe565b51607b55604080516020810190915260795481526133899083613bea565b516079556040805160208101909152607a5481526133a79084613bea565b51607a55613447565b604080516020810190915260745481526133ca90846130b2565b51607455604080516020810190915260755481526133e89083613087565b516075556040805160208101909152607b5481526134069083613bea565b51607b55604080516020810190915260795481526134249083612dbe565b516079556040805160208101909152607a5481526134429084612dbe565b51607a555b61344f612a6c565b50505050565b600054610100900460ff1661347c5760405162461bcd60e51b8152600401610b99906145a1565b61172a613c5e565b60408051602081019091526000815282516000036134bc576040805160208082018352600091829052825190810190925281526121a1565b60018460018111156134d0576134d061433e565b0361354457825160408051602080820183526066548252825190810190925260755482526135019161184891612a38565b10156135445760405162461bcd60e51b81526020600482015260126024820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b6044820152606401610b99565b600061355085856125ad565b90506000808660018111156135675761356761433e565b14613573576000613576565b60015b9050613580845190565b156136475760018160018111156135995761359961433e565b036135f5578351825110156135f05760405162461bcd60e51b815260206004820152601d60248201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e0000006044820152606401610b99565b613647565b8351825111156136475760405162461bcd60e51b815260206004820152601d60248201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e0000006044820152606401610b99565b61365481838760016132f0565b7f0dd4066b1a6ce97fb670c3e4201e908c644193f38cbdaffd0229d7e26da3e5338661367e845190565b875160405161368f939291906143b6565b60405180910390a150949350505050565b604080516020810190915260008152816001600160ff1b0310156040518060600160405280603381526020016146dd60339139906136f15760405162461bcd60e51b8152600401610b999190614419565b5060408051602081019091526000815261153b8484613c8e565b6040805160208101909152600081526040805160208101909152600081528351612a639084906144f3565b60408051602081019091526000815261374d613f24565b60008152608854613760906001906143ec565b60208201526113ff81846137e7565b60006113ff83836012613cb9565b60006113ff83836012613cd8565b6000610fec60ff8316600a6146d0565b60006113ff83836012613cf8565b60006113ff8284614521565b60006113ff8284614562565b60006113ff8284614326565b60006113ff82846143ec565b60006113ff83836012613d0d565b604080516020810190915260008152600061380184613d23565b905082600003613812579050610fec565b600061381e84426143ec565b90506000608886602001518154811061383957613839614403565b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600180830154825294840152600281015491830191909152600301546060820152608854909250148061389f575081816040015111155b156138af57829350505050610fec565b604081015160006138c082426143ec565b905060006138ce8683613ec9565b90505b88602001516000036138f4576138e78183613ef4565b9650505050505050610fec565b6001896020015161390591906143ec565b60208a0181905260888054909190811061392157613921614403565b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152938301939093526002830154908201526003909101546060820152935061397d89613d23565b9550848460400151116139af576139a86139a161399a87866143ec565b8890613ec9565b8290613087565b90506139f2565b60008460400151846139c191906143ec565b90506139d76139d08883613ec9565b8390613087565b91506139e38184614326565b925084604001519350506138d1565b6123108189613ef4565b6040805160208101909152606754908190521561344f57600080613a1e612ee4565b6040805160208082018352607554825282519081019092526074548252929450909250600091613a4e91906130dd565b90506000613a5c8285613108565b60000b13158015613a7a57506000613a748284613108565b60000b12155b613ad65760405162461bcd60e51b815260206004820152602760248201527f707269636520697320616c7265616479206f76657220666c756374756174696f6044820152661b881b1a5b5a5d60ca1b6064820152608401610b99565b83613be1576000876001811115613aef57613aef61433e565b14613b315760408051602081019091526075548152613b2c90613b129087613087565b60408051602081019091526074548152610f6290896130b2565b613b69565b60408051602081019091526075548152613b6990613b4f90876130b2565b60408051602081019091526074548152610f629089613087565b90506000613b778285613108565b60000b13158015613b9557506000613b8f8284613108565b60000b12155b613be15760405162461bcd60e51b815260206004820152601f60248201527f7072696365206973206f76657220666c756374756174696f6e206c696d6974006044820152606401610b99565b50505050505050565b6040805160208101909152600081528180600001516001600160ff1b0310156040518060600160405280603381526020016146dd6033913990613c405760405162461bcd60e51b8152600401610b999190614419565b5060408051602081019091526000815283518551612e329190614521565b600054610100900460ff16613c855760405162461bcd60e51b8152600401610b99906145a1565b61172a3361329e565b6040805160208101909152600081526040805160208101909152600081528351612a6390849061446e565b6000613cc48261378b565b613cce8486614397565b61153b919061436a565b600082613ce48361378b565b613cee908661446e565b61153b91906144f3565b6000613d038261378b565b613cee848661446e565b600082613d198361378b565b613cce9086614397565b60408051602081019091526000815260006088836020015181548110613d4b57613d4b614403565b600091825260208083206040805160a08101825260049094029091018054608085019081528452815180840183526001820154815292840192909252600282015490830152600301546060820152915083516001811115613dae57613dae61433e565b03613dc357602081015181516113ff916130dd565b600183516001811115613dd857613dd861433e565b03613e8a5760408301516020015151600003613e0e576040805160208082018352600091829052825190810190925281526113ff565b60008360400151604001516001811115613e2a57613e2a61433e565b03613e4c57604083015180516020918201518351928401516113ff9390611406565b60018360400151604001516001811115613e6857613e6861433e565b03613e8a57604083015180516020918201518351928401516113ff9390611f7e565b60405162461bcd60e51b81526020600482015260146024820152733737ba1039bab83837b93a32b21037b83a34b7b760611b6044820152606401610b99565b6040805160208101909152600081526040805160208101909152600081528351612a63908490614397565b6040805160208101909152600081526040805160208101909152600081528351612a6390849061436a565b905290565b6040805160608101909152806000815260200160008152602001613f1f60408051606081019091528060008152602001613f6a6040518060200160405280600081525090565b81526020016000905290565b600060208284031215613f8857600080fd5b6040516020810181811067ffffffffffffffff82111715613fb957634e487b7160e01b600052604160045260246000fd5b6040529135825250919050565b600060208284031215613fd857600080fd5b6113ff8383613f76565b60008060408385031215613ff557600080fd5b613fff8484613f76565b915061400e8460208501613f76565b90509250929050565b80356002811061402657600080fd5b919050565b6000806040838503121561403e57600080fd5b613fff83614017565b60006020828403121561405957600080fd5b5035919050565b60008060006060848603121561407557600080fd5b61407f8585613f76565b925061408e8560208601613f76565b915061409d8560408601613f76565b90509250925092565b600080600080608085870312156140bc57600080fd5b6140c585614017565b93506140d48660208701613f76565b92506140e38660408701613f76565b91506140f28660608701613f76565b905092959194509250565b8035801515811461402657600080fd5b60006020828403121561411f57600080fd5b6113ff826140fd565b6001600160a01b038116811461171557600080fd5b60006020828403121561414f57600080fd5b81356113ff81614128565b60006020828403121561416c57600080fd5b50919050565b6000806000806080858703121561418857600080fd5b61419185614017565b93506141a0866020870161415a565b92506141af866040870161415a565b91506140f2606086016140fd565b60008060008060008060008060006101208a8c0312156141dc57600080fd5b8935985060208a0135975060408a0135965060608a0135955060808a013561420381614128565b945060a08a0135935060c08a013561421a81614128565b8093505060e08a013591506101008a013590509295985092959850929598565b60008060006060848603121561424f57600080fd5b61425884614017565b9250614267856020860161415a565b915061409d604085016140fd565b60008060006060848603121561428a57600080fd5b61429384614017565b92506142a2856020860161415a565b915061409d856040860161415a565b6020808252600e908201526d185b5b481dd85cc818db1bdcd95960921b604082015260600190565b6020808252601a908201527f63616c6c6572206973206e6f7420636f756e7465725061727479000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561433957614339614310565b500190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261437957614379614354565b500490565b60006020828403121561439057600080fd5b5051919050565b60008160001904831182151516156143b1576143b1614310565b500290565b60608101600285106143d857634e487b7160e01b600052602160045260246000fd5b938152602081019290925260409091015290565b6000828210156143fe576143fe614310565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208083528351808285015260005b818110156144465785810183015185820160400152820161442a565b81811115614458576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160ff1b038184138284138082168684048611161561449457614494614310565b600160ff1b60008712828116878305891216156144b3576144b3614310565b600087129250878205871284841616156144cf576144cf614310565b878505871281841616156144e5576144e5614310565b505050929093029392505050565b60008261450257614502614354565b600160ff1b82146000198414161561451c5761451c614310565b500590565b600080821280156001600160ff1b038490038513161561454357614543614310565b600160ff1b839003841281161561455c5761455c614310565b50500190565b60008083128015600160ff1b85018412161561458057614580614310565b6001600160ff1b038401831381161561459b5761459b614310565b50500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600181815b8085111561462757816000190482111561460d5761460d614310565b8085161561461a57918102915b93841c93908002906145f1565b509250929050565b60008261463e57506001610fec565b8161464b57506000610fec565b8160018114614661576002811461466b57614687565b6001915050610fec565b60ff84111561467c5761467c614310565b50506001821b610fec565b5060208310610133831016604e8410600b84101617156146aa575081810a610fec565b6146b483836145ec565b80600019048211156146c8576146c8614310565b029392505050565b60006113ff838361462f56fe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a26469706673582212202221d25488b4d7df9e5030808c866220c68f3151afcc86d5381444abaa02c73264736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcFee(uint8,(uint256),bool)": {
        "params": {
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short",
          "_isOpenPos": "whether is opening a new position",
          "_quoteAssetAmount": "quoteAssetAmount"
        },
        "returns": {
          "fees": "fees to be levied on trade"
        }
      },
      "calcPriceRepegPnl((uint256))": {
        "params": {
          "_repegTo": "price to repeg to"
        },
        "returns": {
          "repegPnl": "total pnl incurred on vault positions after repeg"
        }
      },
      "getIndexPrice()": {
        "returns": {
          "_0": "index price"
        }
      },
      "getInputPrice(uint8,(uint256))": {
        "params": {
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short.",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "getInputTwap(uint8,(uint256))": {
        "params": {
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short.",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "getMarkPrice()": {
        "returns": {
          "_0": "mark price"
        }
      },
      "getOutputPrice(uint8,(uint256))": {
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`."
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "getOutputTwap(uint8,(uint256))": {
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`."
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "getReserves()": {
        "returns": {
          "_0": "(quote asset reserve, base asset reserve)"
        }
      },
      "isOverFluctuationLimit(uint8,(uint256))": {
        "params": {
          "_dirOfBase": "ADD_TO_AMM for closing long, REMOVE_FROM_AMM for closing short"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repegK((uint256))": {
        "details": "only clearing house can call"
      },
      "repegPrice()": {
        "details": "only clearing house can call"
      },
      "setCap((uint256),(uint256))": {
        "details": "only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm",
        "params": {
          "_maxHoldingBaseAsset": "max position size that traders can hold in 18 digits",
          "_openInterestNotionalCap": "open interest cap, denominated in quoteToken"
        }
      },
      "setCounterParty(address)": {
        "details": "only owner can call this function",
        "params": {
          "_counterParty": "address of counter party"
        }
      },
      "setFeeRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_feeRatio": "new ratio"
        }
      },
      "setFluctuationLimitRatio((uint256))": {
        "details": "only owner can call this function",
        "params": {
          "_fluctuationLimitRatio": "fluctuation limit rate in 18 digits, 0 means skip the checking"
        }
      },
      "setFundingPeriod(uint256)": {
        "details": "only owner",
        "params": {
          "_fundingPeriod": "new funding period"
        }
      },
      "setInitMarginRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_initMarginRatio": "new maintenance margin ratio in 18 digits"
        }
      },
      "setLevel1DynamicFeeSettings((uint256),(uint256),(uint256))": {
        "details": "set threshold as 0 to disable"
      },
      "setLevel2DynamicFeeSettings((uint256),(uint256),(uint256))": {
        "details": "set threshold as 0 to disable"
      },
      "setLiquidationFeeRatio((uint256))": {
        "details": "if margin ratio falls below liquidation fee ratio, entire position is liquidatedonly owner can call",
        "params": {
          "_liquidationFeeRatio": "new ratio"
        }
      },
      "setMaintenanceMarginRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_maintenanceMarginRatio": "new maintenance margin ratio in 18 digits"
        }
      },
      "setMarkPriceTwapInterval(uint256)": {
        "details": "only owner can call this function",
        "params": {
          "_interval": "time interval in seconds"
        }
      },
      "setOpen(bool)": {
        "details": "only owner can call this function",
        "params": {
          "_open": "open to trade is true, otherwise is false."
        }
      },
      "setPartialLiquidationRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_partialLiquidationRatio": "new ratio"
        }
      },
      "setPriceFeed(address)": {
        "details": "only owner can call",
        "params": {
          "_priceFeed": "new price feed for this AMM"
        }
      },
      "setRepegBufferPeriod(uint256)": {
        "details": "only owner",
        "params": {
          "_repegBufferPeriod": "new repeg buffer period"
        }
      },
      "setTradeLimitRatio((uint256))": {
        "details": "only owner",
        "params": {
          "_tradeLimitRatio": "new ratio"
        }
      },
      "settleFunding()": {
        "details": "only allow to update while reaching `nextFundingTime`",
        "returns": {
          "indexPrice": "of this period in 18 digits",
          "markPrice": "of this period in 18 digits",
          "premiumFraction": "of this period in 18 digits"
        }
      },
      "swapInput(uint8,(uint256),(uint256),bool)": {
        "details": "Only clearingHouse can call this function",
        "params": {
          "_baseAssetAmountLimit": "minimum base asset amount expected to get to prevent front running",
          "_canOverFluctuationLimit": "if tx can go over fluctuation limit once; for partial liquidation",
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "swapOutput(uint8,(uint256),(uint256))": {
        "details": "only clearingHouse can call this function",
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput",
          "_quoteAssetAmountLimit": "limit of quote asset amount; for slippage protection"
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcFee(uint8,(uint256),bool)": {
        "notice": "dynamic fee mechanism (only on open position, not on close) - if trade leaves mark price to be within 2.5% range of index price, then fee percent = 0.3% (standard) - if trade leaves mark price to be over 2.5% range of index price, then fee percent = 1% (surged) - if trade leaves mark price to be over 5.0% range of index price, then fee percent = 5% (surged) - this ensures that traders act towards maintaining pegcalculate fees to be levied on the trade"
      },
      "calcPriceRepegPnl((uint256))": {
        "notice": "calculate repeg pnl"
      },
      "getIndexPrice()": {
        "notice": "get index price provided by oracle"
      },
      "getInputPrice(uint8,(uint256))": {
        "notice": "get input amount. returns how many base asset you will get with the input quote amount."
      },
      "getInputTwap(uint8,(uint256))": {
        "notice": "get input twap amount. returns how many base asset you will get with the input quote amount based on twap price."
      },
      "getMarkPrice()": {
        "notice": "get mark price based on current quote/base asset reserve."
      },
      "getOutputPrice(uint8,(uint256))": {
        "notice": "get output price. return how many quote asset you will get with the input base amount"
      },
      "getOutputTwap(uint8,(uint256))": {
        "notice": "get output twap amount. return how many quote asset you will get with the input base amount on twap price."
      },
      "getRatios()": {
        "notice": "too avoid too many ratio calls in clearing house"
      },
      "getReserves()": {
        "notice": "get current quote/base asset reserve."
      },
      "getTwapPrice(uint256)": {
        "notice": "get twap price"
      },
      "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256)": {
        "notice": "upgradeable constructor, can only be inited once"
      },
      "isOverFluctuationLimit(uint8,(uint256))": {
        "notice": "check if close trade goes over fluctuation limit"
      },
      "repegK((uint256))": {
        "notice": "adjust liquidity depth"
      },
      "repegPrice()": {
        "notice": "repeg mark price to index price"
      },
      "setCap((uint256),(uint256))": {
        "notice": "set new cap during guarded period, which is max position size that traders can hold"
      },
      "setCounterParty(address)": {
        "notice": "set counter party"
      },
      "setFeeRatio((uint256))": {
        "notice": "set new fee ratio"
      },
      "setFluctuationLimitRatio((uint256))": {
        "notice": "set fluctuation limit rate. Default value is `1 / max leverage`"
      },
      "setFundingPeriod(uint256)": {
        "notice": "set funding period"
      },
      "setInitMarginRatio((uint256))": {
        "notice": "set init margin ratio"
      },
      "setLevel1DynamicFeeSettings((uint256),(uint256),(uint256))": {
        "notice": "Set level 1 dynamic fee settings only owner"
      },
      "setLevel2DynamicFeeSettings((uint256),(uint256),(uint256))": {
        "notice": "Set level 2 dynamic fee settings only owner"
      },
      "setLiquidationFeeRatio((uint256))": {
        "notice": "set liquidation fee ratio"
      },
      "setMaintenanceMarginRatio((uint256))": {
        "notice": "set maintenance margin ratio"
      },
      "setMarkPriceTwapInterval(uint256)": {
        "notice": "set time interval for twap calculation, default is 1 hour"
      },
      "setOpen(bool)": {
        "notice": "set `open` flag. Amm is open to trade if `open` is true. Default is false."
      },
      "setPartialLiquidationRatio((uint256))": {
        "notice": "set the margin ratio after deleveraging"
      },
      "setPriceFeed(address)": {
        "notice": "set priceFeed address"
      },
      "setRepegBufferPeriod(uint256)": {
        "notice": "set repeg buffer period"
      },
      "setTradeLimitRatio((uint256))": {
        "notice": "set new trade limit ratio"
      },
      "settleFunding()": {
        "notice": "update funding rate"
      },
      "swapInput(uint8,(uint256),(uint256),bool)": {
        "notice": "Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`"
      },
      "swapOutput(uint8,(uint256),(uint256))": {
        "notice": "swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2558,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2561,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3245,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2430,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2550,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4359,
        "contract": "contracts/Amm.sol:Amm",
        "label": "feeRatio",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4362,
        "contract": "contracts/Amm.sol:Amm",
        "label": "tradeLimitRatio",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4365,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fluctuationLimitRatio",
        "offset": 0,
        "slot": "103",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4368,
        "contract": "contracts/Amm.sol:Amm",
        "label": "initMarginRatio",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4371,
        "contract": "contracts/Amm.sol:Amm",
        "label": "maintenanceMarginRatio",
        "offset": 0,
        "slot": "105",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4374,
        "contract": "contracts/Amm.sol:Amm",
        "label": "partialLiquidationRatio",
        "offset": 0,
        "slot": "106",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4377,
        "contract": "contracts/Amm.sol:Amm",
        "label": "liquidationFeeRatio",
        "offset": 0,
        "slot": "107",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4380,
        "contract": "contracts/Amm.sol:Amm",
        "label": "level1DynamicFeeSettings",
        "offset": 0,
        "slot": "108",
        "type": "t_struct(DynamicFeeSettings)4348_storage"
      },
      {
        "astId": 4383,
        "contract": "contracts/Amm.sol:Amm",
        "label": "level2DynamicFeeSettings",
        "offset": 0,
        "slot": "111",
        "type": "t_struct(DynamicFeeSettings)4348_storage"
      },
      {
        "astId": 4386,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingRate",
        "offset": 0,
        "slot": "114",
        "type": "t_struct(FundingRate)4355_storage"
      },
      {
        "astId": 4389,
        "contract": "contracts/Amm.sol:Amm",
        "label": "quoteAssetReserve",
        "offset": 0,
        "slot": "116",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4392,
        "contract": "contracts/Amm.sol:Amm",
        "label": "baseAssetReserve",
        "offset": 0,
        "slot": "117",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4395,
        "contract": "contracts/Amm.sol:Amm",
        "label": "k",
        "offset": 0,
        "slot": "118",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4398,
        "contract": "contracts/Amm.sol:Amm",
        "label": "maxHoldingBaseAsset",
        "offset": 0,
        "slot": "119",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4401,
        "contract": "contracts/Amm.sol:Amm",
        "label": "openInterestNotionalCap",
        "offset": 0,
        "slot": "120",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4404,
        "contract": "contracts/Amm.sol:Amm",
        "label": "totalPositionSize",
        "offset": 0,
        "slot": "121",
        "type": "t_struct(signedDecimal)15729_storage"
      },
      {
        "astId": 4407,
        "contract": "contracts/Amm.sol:Amm",
        "label": "cumulativeNotional",
        "offset": 0,
        "slot": "122",
        "type": "t_struct(signedDecimal)15729_storage"
      },
      {
        "astId": 4410,
        "contract": "contracts/Amm.sol:Amm",
        "label": "baseAssetDeltaThisFundingPeriod",
        "offset": 0,
        "slot": "123",
        "type": "t_struct(signedDecimal)15729_storage"
      },
      {
        "astId": 4413,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_x0",
        "offset": 0,
        "slot": "124",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4416,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_y0",
        "offset": 0,
        "slot": "125",
        "type": "t_struct(decimal)14473_storage"
      },
      {
        "astId": 4419,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingPeriod",
        "offset": 0,
        "slot": "126",
        "type": "t_uint256"
      },
      {
        "astId": 4421,
        "contract": "contracts/Amm.sol:Amm",
        "label": "markPriceTwapInterval",
        "offset": 0,
        "slot": "127",
        "type": "t_uint256"
      },
      {
        "astId": 4423,
        "contract": "contracts/Amm.sol:Amm",
        "label": "nextFundingTime",
        "offset": 0,
        "slot": "128",
        "type": "t_uint256"
      },
      {
        "astId": 4425,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingBufferPeriod",
        "offset": 0,
        "slot": "129",
        "type": "t_uint256"
      },
      {
        "astId": 4427,
        "contract": "contracts/Amm.sol:Amm",
        "label": "lastRepegTimestamp",
        "offset": 0,
        "slot": "130",
        "type": "t_uint256"
      },
      {
        "astId": 4429,
        "contract": "contracts/Amm.sol:Amm",
        "label": "repegBufferPeriod",
        "offset": 0,
        "slot": "131",
        "type": "t_uint256"
      },
      {
        "astId": 4432,
        "contract": "contracts/Amm.sol:Amm",
        "label": "priceFeed",
        "offset": 0,
        "slot": "132",
        "type": "t_contract(IPriceFeed)14438"
      },
      {
        "astId": 4434,
        "contract": "contracts/Amm.sol:Amm",
        "label": "priceFeedKey",
        "offset": 0,
        "slot": "133",
        "type": "t_bytes32"
      },
      {
        "astId": 4436,
        "contract": "contracts/Amm.sol:Amm",
        "label": "counterParty",
        "offset": 0,
        "slot": "134",
        "type": "t_address"
      },
      {
        "astId": 4440,
        "contract": "contracts/Amm.sol:Amm",
        "label": "quoteAsset",
        "offset": 0,
        "slot": "135",
        "type": "t_contract(IERC20)3911"
      },
      {
        "astId": 4443,
        "contract": "contracts/Amm.sol:Amm",
        "label": "open",
        "offset": 20,
        "slot": "135",
        "type": "t_bool"
      },
      {
        "astId": 4447,
        "contract": "contracts/Amm.sol:Amm",
        "label": "reserveSnapshots",
        "offset": 0,
        "slot": "136",
        "type": "t_array(t_struct(ReserveSnapshot)4319_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ReserveSnapshot)4319_storage)dyn_storage": {
        "base": "t_struct(ReserveSnapshot)4319_storage",
        "encoding": "dynamic_array",
        "label": "struct Amm.ReserveSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3911": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)14438": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(DynamicFeeSettings)4348_storage": {
        "encoding": "inplace",
        "label": "struct Amm.DynamicFeeSettings",
        "members": [
          {
            "astId": 4341,
            "contract": "contracts/Amm.sol:Amm",
            "label": "divergenceThresholdRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 4344,
            "contract": "contracts/Amm.sol:Amm",
            "label": "feeRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 4347,
            "contract": "contracts/Amm.sol:Amm",
            "label": "feeInFavorRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)14473_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(FundingRate)4355_storage": {
        "encoding": "inplace",
        "label": "struct Amm.FundingRate",
        "members": [
          {
            "astId": 4351,
            "contract": "contracts/Amm.sol:Amm",
            "label": "fundingRateLong",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(signedDecimal)15729_storage"
          },
          {
            "astId": 4354,
            "contract": "contracts/Amm.sol:Amm",
            "label": "fundingRateShort",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(signedDecimal)15729_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReserveSnapshot)4319_storage": {
        "encoding": "inplace",
        "label": "struct Amm.ReserveSnapshot",
        "members": [
          {
            "astId": 4311,
            "contract": "contracts/Amm.sol:Amm",
            "label": "quoteAssetReserve",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 4314,
            "contract": "contracts/Amm.sol:Amm",
            "label": "baseAssetReserve",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)14473_storage"
          },
          {
            "astId": 4316,
            "contract": "contracts/Amm.sol:Amm",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4318,
            "contract": "contracts/Amm.sol:Amm",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(decimal)14473_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 14472,
            "contract": "contracts/Amm.sol:Amm",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(signedDecimal)15729_storage": {
        "encoding": "inplace",
        "label": "struct SignedDecimal.signedDecimal",
        "members": [
          {
            "astId": 15728,
            "contract": "contracts/Amm.sol:Amm",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
