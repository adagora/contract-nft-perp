{
  "address": "0xb8749b03A0050377D06cBE5989A2674693467293",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_paymentAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "_timeout",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_minSubmissionValue",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_maxSubmissionValue",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AvailableFundsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "OracleAdminUpdateRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "OracleAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "OraclePermissionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        }
      ],
      "name": "RequesterPermissionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "paymentAmount",
          "type": "uint128"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "minSubmissionCount",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "maxSubmissionCount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "restartDelay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timeout",
          "type": "uint32"
        }
      ],
      "name": "RoundDetailsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "submission",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "round",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "SubmissionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "ValidatorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocatedFunds",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableFunds",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_removed",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_added",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_addedAdmins",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_minSubmissions",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxSubmissions",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_restartDelay",
          "type": "uint32"
        }
      ],
      "name": "changeOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracles",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkToken",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSubmissionCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSubmissionValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSubmissionCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSubmissionValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_queriedRoundId",
          "type": "uint32"
        }
      ],
      "name": "oracleRoundState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_eligibleToSubmit",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "_roundId",
          "type": "uint32"
        },
        {
          "internalType": "int256",
          "name": "_latestSubmission",
          "type": "int256"
        },
        {
          "internalType": "uint64",
          "name": "_startedAt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_timeout",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "_availableFunds",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "_oracleCount",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "_paymentAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestNewRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restartDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "_delay",
          "type": "uint32"
        }
      ],
      "name": "setRequesterPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newValidator",
          "type": "address"
        }
      ],
      "name": "setValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_submission",
          "type": "int256"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAvailableFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_paymentAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "_minSubmissions",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxSubmissions",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_restartDelay",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_timeout",
          "type": "uint32"
        }
      ],
      "name": "updateFutureRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "contract AggregatorValidatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "withdrawablePayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xacd4db67739e345cf40d5e94ac7e52f7b4168f33ac79f38f0327c9934aac74c7",
  "receipt": {
    "to": null,
    "from": "0xd107AC5e5830BB95f880cA3b1270ccCdAA0A3c5e",
    "contractAddress": "0xb8749b03A0050377D06cBE5989A2674693467293",
    "transactionIndex": 4,
    "gasUsed": "3904575",
    "logsBloom": "0x
    "blockHash": "0x870818020023087fa002406e36eda151fa6394f31d466de224a91cc5eb45eeaa",
    "transactionHash": "0xacd4db67739e345cf40d5e94ac7e52f7b4168f33ac79f38f0327c9934aac74c7",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 29920841,
        "transactionHash": "0xacd4db67739e345cf40d5e94ac7e52f7b4168f33ac79f38f0327c9934aac74c7",
        "address": "0xb8749b03A0050377D06cBE5989A2674693467293",
        "topics": [
          "0x56800c9d1ed723511246614d15e58cfcde15b6a33c245b5c961b689c1890fd8f",
          "0x000000000000000000000000000000000000000000000000002386f26fc10000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 18,
        "blockHash": "0x870818020023087fa002406e36eda151fa6394f31d466de224a91cc5eb45eeaa"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 29920841,
        "transactionHash": "0xacd4db67739e345cf40d5e94ac7e52f7b4168f33ac79f38f0327c9934aac74c7",
        "address": "0xb8749b03A0050377D06cBE5989A2674693467293",
        "topics": [
          "0xcfac5dc75b8d9a7e074162f59d9adcd33da59f0fe8dfb21580db298fc0fdad0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000628ae20554c9bbaacd47c40205ac878ec62f1b84"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x870818020023087fa002406e36eda151fa6394f31d466de224a91cc5eb45eeaa"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 29920841,
        "transactionHash": "0xacd4db67739e345cf40d5e94ac7e52f7b4168f33ac79f38f0327c9934aac74c7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d107ac5e5830bb95f880ca3b1270cccdaa0a3c5e",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000196d7958091bce0000000000000000000000000000000000000000000000000658b67f1d8c96660000000000000000000000000000000000000000000018886c5054f9edffc745000000000000000000000000000000000000000000000000063f4905c5837a980000000000000000000000000000000000000000000018886c69c2734608e313",
        "logIndex": 20,
        "blockHash": "0x870818020023087fa002406e36eda151fa6394f31d466de224a91cc5eb45eeaa"
      }
    ],
    "blockNumber": 29920841,
    "cumulativeGasUsed": "4894773",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "10000000000000000",
    100,
    "0x628AE20554C9BbaaCd47C40205AC878EC62f1b84",
    0,
    "100000000000000000000000",
    18,
    "TEST Collection price"
  ],
  "numDeployments": 1,
  "solcInputHash": "dad340f4fcb6e4311ea159c3c3c357ed",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_paymentAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_timeout\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_minSubmissionValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_maxSubmissionValue\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AvailableFundsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"OracleAdminUpdateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"OracleAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"OraclePermissionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"RequesterPermissionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"paymentAmount\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"minSubmissionCount\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"maxSubmissionCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"restartDelay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"}],\"name\":\"RoundDetailsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"submission\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SubmissionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"ValidatorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocatedFunds\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableFunds\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_removed\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_added\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_addedAdmins\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_minSubmissions\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxSubmissions\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_restartDelay\",\"type\":\"uint32\"}],\"name\":\"changeOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubmissionCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubmissionValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSubmissionCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSubmissionValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_queriedRoundId\",\"type\":\"uint32\"}],\"name\":\"oracleRoundState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_eligibleToSubmit\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_roundId\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"_latestSubmission\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"_startedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_availableFunds\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_oracleCount\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_paymentAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNewRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_delay\",\"type\":\"uint32\"}],\"name\":\"setRequesterPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValidator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_submission\",\"type\":\"int256\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAvailableFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_paymentAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_minSubmissions\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxSubmissions\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_restartDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_timeout\",\"type\":\"uint32\"}],\"name\":\"updateFutureRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"withdrawablePayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"acceptAdmin(address)\":{\"params\":{\"_oracle\":\"is the address of the oracle whose admin is being transferred\"}},\"acceptOwnership()\":{\"details\":\"Allows an ownership transfer to be completed by the recipient.\"},\"changeOracles(address[],address[],address[],uint32,uint32,uint32)\":{\"params\":{\"_added\":\"is the list of addresses for the new Oracles being added\",\"_addedAdmins\":\"is the admin addresses for the new respective _added list. Only this address is allowed to access the respective oracle's funds\",\"_maxSubmissions\":\"is the new maximum submission count for each round\",\"_minSubmissions\":\"is the new minimum submission count for each round\",\"_removed\":\"is the list of addresses for the new Oracles being removed\",\"_restartDelay\":\"is the number of rounds an Oracle has to wait before they can initiate a round\"}},\"getAdmin(address)\":{\"params\":{\"_oracle\":\"is the address of the oracle whose admin is being queried\"}},\"getAnswer(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"_roundId\":\"the round number to retrieve the answer for\"}},\"getRoundData(uint80)\":{\"details\":\"Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.\",\"params\":{\"_roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.\",\"roundId\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. This is 0 if the round hasn't been started yet.\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"getTimestamp(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"_roundId\":\"the round number to retrieve the updated timestamp for\"}},\"latestAnswer()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRound()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRoundData()\":{\"details\":\"Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.\",\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.\",\"roundId\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. This is 0 if the round hasn't been started yet.\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"latestTimestamp()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"onTokenTransfer(address,uint256,bytes)\":{\"params\":{\"_data\":\"is mostly ignored. It is checked for length, to be sure nothing strange is passed in.\"}},\"oracleRoundState(address,uint32)\":{\"params\":{\"_oracle\":\"the address to look up information for.\"}},\"setRequesterPermissions(address,bool,uint32)\":{\"params\":{\"_authorized\":\"is a boolean specifying whether they can start new rounds or not\",\"_delay\":\"is the number of rounds the requester must wait before starting another round\",\"_requester\":\"is the address to set permissions for\"}},\"setValidator(address)\":{\"params\":{\"_newValidator\":\"designates the address of the new validation contract.\"}},\"submit(uint256,int256)\":{\"params\":{\"_roundId\":\"is the ID of the round this submission pertains to\",\"_submission\":\"is the updated data that the oracle is submitting\"}},\"transferAdmin(address,address)\":{\"params\":{\"_newAdmin\":\"is the new admin address\",\"_oracle\":\"is the address of the oracle whose admin is being transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"updateFutureRounds(uint128,uint32,uint32,uint32,uint32)\":{\"params\":{\"_maxSubmissions\":\"is the new maximum submission count for each round\",\"_minSubmissions\":\"is the new minimum submission count for each round\",\"_paymentAmount\":\"is the payment amount for subsequent rounds\",\"_restartDelay\":\"is the number of rounds an Oracle has to wait before they can initiate a round\"}},\"withdrawFunds(address,uint256)\":{\"params\":{\"_amount\":\"is the amount of LINK to send\",\"_recipient\":\"is the address to send the LINK to\"}},\"withdrawPayment(address,address,uint256)\":{\"params\":{\"_amount\":\"is the amount of LINK to send\",\"_oracle\":\"is the oracle whose LINK is transferred\",\"_recipient\":\"is the address to send the LINK to\"}}}},\"userdoc\":{\"methods\":{\"acceptAdmin(address)\":{\"notice\":\"accept the admin address transfer for an oracle\"},\"allocatedFunds()\":{\"notice\":\"the amount of payment yet to be withdrawn by oracles\"},\"availableFunds()\":{\"notice\":\"the amount of future funding available to oracles\"},\"changeOracles(address[],address[],address[],uint32,uint32,uint32)\":{\"notice\":\"called by the owner to remove and add new oracles as well as update the round related parameters that pertain to total oracle count\"},\"getAdmin(address)\":{\"notice\":\"get the admin address of an oracle\"},\"getAnswer(uint256)\":{\"notice\":\"get past rounds answers\"},\"getOracles()\":{\"notice\":\"returns an array of addresses containing the oracles on contract\"},\"getRoundData(uint80)\":{\"notice\":\"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values.\"},\"getTimestamp(uint256)\":{\"notice\":\"get timestamp when an answer was last updated\"},\"latestAnswer()\":{\"notice\":\"get the most recently reported answer\"},\"latestRound()\":{\"notice\":\"get the ID of the last updated round\"},\"latestRoundData()\":{\"notice\":\"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Consumers are encouraged to use this more fully featured method over the \\\"legacy\\\" latestRound/ latestAnswer/latestTimestamp functions. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values.\"},\"latestTimestamp()\":{\"notice\":\"get the most recent updated at timestamp\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"called through LINK's transferAndCall to update available funds in the same transaction as the funds were transferred to the aggregator\"},\"oracleCount()\":{\"notice\":\"returns the number of oracles\"},\"oracleRoundState(address,uint32)\":{\"notice\":\"a method to provide all current info oracles need. Intended only only to be callable by oracles. Not for use by contracts to read state.\"},\"requestNewRound()\":{\"notice\":\"allows non-oracles to request a new round\"},\"setRequesterPermissions(address,bool,uint32)\":{\"notice\":\"allows the owner to specify new non-oracles to start new rounds\"},\"setValidator(address)\":{\"notice\":\"method to update the address which does external data validation.\"},\"submit(uint256,int256)\":{\"notice\":\"called by oracles when they have witnessed a need to update\"},\"transferAdmin(address,address)\":{\"notice\":\"transfer the admin address for an oracle\"},\"updateAvailableFunds()\":{\"notice\":\"recalculate the amount of LINK available for payouts\"},\"updateFutureRounds(uint128,uint32,uint32,uint32,uint32)\":{\"notice\":\"update the round and payment related parameters for subsequent rounds\"},\"withdrawFunds(address,uint256)\":{\"notice\":\"transfers the owner's LINK to another address\"},\"withdrawPayment(address,address,uint256)\":{\"notice\":\"transfers the oracle's LINK to another address. Can only be called by the oracle's admin.\"},\"withdrawablePayment(address)\":{\"notice\":\"query the available amount of LINK for an oracle to withdraw\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/aggregators/CustomFluxAggregator.sol\":\"CustomFluxAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/FluxAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"./Median.sol\\\";\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./SafeMath128.sol\\\";\\nimport \\\"./SafeMath32.sol\\\";\\nimport \\\"./SafeMath64.sol\\\";\\nimport \\\"./interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"./interfaces/AggregatorValidatorInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Prepaid Aggregator contract\\n * @notice Handles aggregating data pushed in from off-chain, and unlocks\\n * payment for oracles as they report. Oracles' submissions are gathered in\\n * rounds, with each round aggregating the submissions for each oracle into a\\n * single answer. The latest aggregated answer is exposed as well as historical\\n * answers and their updated at timestamp.\\n */\\ncontract FluxAggregator is AggregatorV2V3Interface, Owned {\\n  using SafeMathChainlink for uint256;\\n  using SafeMath128 for uint128;\\n  using SafeMath64 for uint64;\\n  using SafeMath32 for uint32;\\n\\n  struct Round {\\n    int256 answer;\\n    uint64 startedAt;\\n    uint64 updatedAt;\\n    uint32 answeredInRound;\\n  }\\n\\n  struct RoundDetails {\\n    int256[] submissions;\\n    uint32 maxSubmissions;\\n    uint32 minSubmissions;\\n    uint32 timeout;\\n    uint128 paymentAmount;\\n  }\\n\\n  struct OracleStatus {\\n    uint128 withdrawable;\\n    uint32 startingRound;\\n    uint32 endingRound;\\n    uint32 lastReportedRound;\\n    uint32 lastStartedRound;\\n    int256 latestSubmission;\\n    uint16 index;\\n    address admin;\\n    address pendingAdmin;\\n  }\\n\\n  struct Requester {\\n    bool authorized;\\n    uint32 delay;\\n    uint32 lastStartedRound;\\n  }\\n\\n  struct Funds {\\n    uint128 available;\\n    uint128 allocated;\\n  }\\n\\n  LinkTokenInterface public linkToken;\\n  AggregatorValidatorInterface public validator;\\n\\n  // Round related params\\n  uint128 public paymentAmount;\\n  uint32 public maxSubmissionCount;\\n  uint32 public minSubmissionCount;\\n  uint32 public restartDelay;\\n  uint32 public timeout;\\n  uint8 public override decimals;\\n  string public override description;\\n\\n  int256 immutable public minSubmissionValue;\\n  int256 immutable public maxSubmissionValue;\\n\\n  uint256 constant public override version = 3;\\n\\n  /**\\n   * @notice To ensure owner isn't withdrawing required funds as oracles are\\n   * submitting updates, we enforce that the contract maintains a minimum\\n   * reserve of RESERVE_ROUNDS * oracleCount() LINK earmarked for payment to\\n   * oracles. (Of course, this doesn't prevent the contract from running out of\\n   * funds without the owner's intervention.)\\n   */\\n  uint256 constant private RESERVE_ROUNDS = 2;\\n  uint256 constant private MAX_ORACLE_COUNT = 77;\\n  uint32 constant private ROUND_MAX = 2**32-1;\\n  uint256 private constant VALIDATOR_GAS_LIMIT = 100000;\\n  // An error specific to the Aggregator V3 Interface, to prevent possible\\n  // confusion around accidentally reading unset values as reported values.\\n  string constant private V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n  uint32 private reportingRoundId;\\n  uint32 internal latestRoundId;\\n  mapping(address => OracleStatus) private oracles;\\n  mapping(uint32 => Round) internal rounds;\\n  mapping(uint32 => RoundDetails) internal details;\\n  mapping(address => Requester) internal requesters;\\n  address[] private oracleAddresses;\\n  Funds private recordedFunds;\\n\\n  event AvailableFundsUpdated(\\n    uint256 indexed amount\\n  );\\n  event RoundDetailsUpdated(\\n    uint128 indexed paymentAmount,\\n    uint32 indexed minSubmissionCount,\\n    uint32 indexed maxSubmissionCount,\\n    uint32 restartDelay,\\n    uint32 timeout // measured in seconds\\n  );\\n  event OraclePermissionsUpdated(\\n    address indexed oracle,\\n    bool indexed whitelisted\\n  );\\n  event OracleAdminUpdated(\\n    address indexed oracle,\\n    address indexed newAdmin\\n  );\\n  event OracleAdminUpdateRequested(\\n    address indexed oracle,\\n    address admin,\\n    address newAdmin\\n  );\\n  event SubmissionReceived(\\n    int256 indexed submission,\\n    uint32 indexed round,\\n    address indexed oracle\\n  );\\n  event RequesterPermissionsSet(\\n    address indexed requester,\\n    bool authorized,\\n    uint32 delay\\n  );\\n  event ValidatorUpdated(\\n    address indexed previous,\\n    address indexed current\\n  );\\n\\n  /**\\n   * @notice set up the aggregator with initial configuration\\n   * @param _link The address of the LINK token\\n   * @param _paymentAmount The amount paid of LINK paid to each oracle per submission, in wei (units of 10\\u207b\\u00b9\\u2078 LINK)\\n   * @param _timeout is the number of seconds after the previous round that are\\n   * allowed to lapse before allowing an oracle to skip an unfinished round\\n   * @param _validator is an optional contract address for validating\\n   * external validation of answers\\n   * @param _minSubmissionValue is an immutable check for a lower bound of what\\n   * submission values are accepted from an oracle\\n   * @param _maxSubmissionValue is an immutable check for an upper bound of what\\n   * submission values are accepted from an oracle\\n   * @param _decimals represents the number of decimals to offset the answer by\\n   * @param _description a short description of what is being reported\\n   */\\n  constructor(\\n    address _link,\\n    uint128 _paymentAmount,\\n    uint32 _timeout,\\n    address _validator,\\n    int256 _minSubmissionValue,\\n    int256 _maxSubmissionValue,\\n    uint8 _decimals,\\n    string memory _description\\n  ) public {\\n    linkToken = LinkTokenInterface(_link);\\n    updateFutureRounds(_paymentAmount, 0, 0, 0, _timeout);\\n    setValidator(_validator);\\n    minSubmissionValue = _minSubmissionValue;\\n    maxSubmissionValue = _maxSubmissionValue;\\n    decimals = _decimals;\\n    description = _description;\\n    rounds[0].updatedAt = uint64(block.timestamp.sub(uint256(_timeout)));\\n  }\\n\\n  /**\\n   * @notice called by oracles when they have witnessed a need to update\\n   * @param _roundId is the ID of the round this submission pertains to\\n   * @param _submission is the updated data that the oracle is submitting\\n   */\\n  function submit(uint256 _roundId, int256 _submission)\\n    external\\n  {\\n    bytes memory error = validateOracleRound(msg.sender, uint32(_roundId));\\n    require(_submission >= minSubmissionValue, \\\"value below minSubmissionValue\\\");\\n    require(_submission <= maxSubmissionValue, \\\"value above maxSubmissionValue\\\");\\n    require(error.length == 0, string(error));\\n\\n    oracleInitializeNewRound(uint32(_roundId));\\n    recordSubmission(_submission, uint32(_roundId));\\n    (bool updated, int256 newAnswer) = updateRoundAnswer(uint32(_roundId));\\n    payOracle(uint32(_roundId));\\n    deleteRoundDetails(uint32(_roundId));\\n    if (updated) {\\n      validateAnswer(uint32(_roundId), newAnswer);\\n    }\\n  }\\n\\n  /**\\n   * @notice called by the owner to remove and add new oracles as well as\\n   * update the round related parameters that pertain to total oracle count\\n   * @param _removed is the list of addresses for the new Oracles being removed\\n   * @param _added is the list of addresses for the new Oracles being added\\n   * @param _addedAdmins is the admin addresses for the new respective _added\\n   * list. Only this address is allowed to access the respective oracle's funds\\n   * @param _minSubmissions is the new minimum submission count for each round\\n   * @param _maxSubmissions is the new maximum submission count for each round\\n   * @param _restartDelay is the number of rounds an Oracle has to wait before\\n   * they can initiate a round\\n   */\\n  function changeOracles(\\n    address[] calldata _removed,\\n    address[] calldata _added,\\n    address[] calldata _addedAdmins,\\n    uint32 _minSubmissions,\\n    uint32 _maxSubmissions,\\n    uint32 _restartDelay\\n  )\\n    external\\n    onlyOwner()\\n  {\\n    for (uint256 i = 0; i < _removed.length; i++) {\\n      removeOracle(_removed[i]);\\n    }\\n\\n    require(_added.length == _addedAdmins.length, \\\"need same oracle and admin count\\\");\\n    require(uint256(oracleCount()).add(_added.length) <= MAX_ORACLE_COUNT, \\\"max oracles allowed\\\");\\n\\n    for (uint256 i = 0; i < _added.length; i++) {\\n      addOracle(_added[i], _addedAdmins[i]);\\n    }\\n\\n    updateFutureRounds(paymentAmount, _minSubmissions, _maxSubmissions, _restartDelay, timeout);\\n  }\\n\\n  /**\\n   * @notice update the round and payment related parameters for subsequent\\n   * rounds\\n   * @param _paymentAmount is the payment amount for subsequent rounds\\n   * @param _minSubmissions is the new minimum submission count for each round\\n   * @param _maxSubmissions is the new maximum submission count for each round\\n   * @param _restartDelay is the number of rounds an Oracle has to wait before\\n   * they can initiate a round\\n   */\\n  function updateFutureRounds(\\n    uint128 _paymentAmount,\\n    uint32 _minSubmissions,\\n    uint32 _maxSubmissions,\\n    uint32 _restartDelay,\\n    uint32 _timeout\\n  )\\n    public\\n    onlyOwner()\\n  {\\n    uint32 oracleNum = oracleCount(); // Save on storage reads\\n    require(_maxSubmissions >= _minSubmissions, \\\"max must equal/exceed min\\\");\\n    require(oracleNum >= _maxSubmissions, \\\"max cannot exceed total\\\");\\n    require(oracleNum == 0 || oracleNum > _restartDelay, \\\"delay cannot exceed total\\\");\\n    require(recordedFunds.available >= requiredReserve(_paymentAmount), \\\"insufficient funds for payment\\\");\\n    if (oracleCount() > 0) {\\n      require(_minSubmissions > 0, \\\"min must be greater than 0\\\");\\n    }\\n\\n    paymentAmount = _paymentAmount;\\n    minSubmissionCount = _minSubmissions;\\n    maxSubmissionCount = _maxSubmissions;\\n    restartDelay = _restartDelay;\\n    timeout = _timeout;\\n\\n    emit RoundDetailsUpdated(\\n      paymentAmount,\\n      _minSubmissions,\\n      _maxSubmissions,\\n      _restartDelay,\\n      _timeout\\n    );\\n  }\\n\\n  /**\\n   * @notice the amount of payment yet to be withdrawn by oracles\\n   */\\n  function allocatedFunds()\\n    external\\n    view\\n    returns (uint128)\\n  {\\n    return recordedFunds.allocated;\\n  }\\n\\n  /**\\n   * @notice the amount of future funding available to oracles\\n   */\\n  function availableFunds()\\n    external\\n    view\\n    returns (uint128)\\n  {\\n    return recordedFunds.available;\\n  }\\n\\n  /**\\n   * @notice recalculate the amount of LINK available for payouts\\n   */\\n  function updateAvailableFunds()\\n    public\\n  {\\n    Funds memory funds = recordedFunds;\\n\\n    uint256 nowAvailable = linkToken.balanceOf(address(this)).sub(funds.allocated);\\n\\n    if (funds.available != nowAvailable) {\\n      recordedFunds.available = uint128(nowAvailable);\\n      emit AvailableFundsUpdated(nowAvailable);\\n    }\\n  }\\n\\n  /**\\n   * @notice returns the number of oracles\\n   */\\n  function oracleCount() public view returns (uint8) {\\n    return uint8(oracleAddresses.length);\\n  }\\n\\n  /**\\n   * @notice returns an array of addresses containing the oracles on contract\\n   */\\n  function getOracles() external view returns (address[] memory) {\\n    return oracleAddresses;\\n  }\\n\\n  /**\\n   * @notice get the most recently reported answer\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256)\\n  {\\n    return rounds[latestRoundId].answer;\\n  }\\n\\n  /**\\n   * @notice get the most recent updated at timestamp\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return rounds[latestRoundId].updatedAt;\\n  }\\n\\n  /**\\n   * @notice get the ID of the last updated round\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return latestRoundId;\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param _roundId the round number to retrieve the answer for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256)\\n  {\\n    if (validRoundId(_roundId)) {\\n      return rounds[uint32(_roundId)].answer;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice get timestamp when an answer was last updated\\n   * @param _roundId the round number to retrieve the updated timestamp for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    if (validRoundId(_roundId)) {\\n      return rounds[uint32(_roundId)].updatedAt;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started. This is 0\\n   * if the round hasn't been started yet.\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed. answeredInRound may be smaller than roundId when the round\\n   * timed out. answeredInRound is equal to roundId when the round didn't time out\\n   * and was completed regularly.\\n   * @dev Note that for in-progress rounds (i.e. rounds that haven't yet received\\n   * maxSubmissions) answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    Round memory r = rounds[uint32(_roundId)];\\n\\n    require(r.answeredInRound > 0 && validRoundId(_roundId), V3_NO_DATA_ERROR);\\n\\n    return (\\n      _roundId,\\n      r.answer,\\n      r.startedAt,\\n      r.updatedAt,\\n      r.answeredInRound\\n    );\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values. Consumers are encouraged to\\n   * use this more fully featured method over the \\\"legacy\\\" latestRound/\\n   * latestAnswer/latestTimestamp functions. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started. This is 0\\n   * if the round hasn't been started yet.\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed. answeredInRound may be smaller than roundId when the round\\n   * timed out. answeredInRound is equal to roundId when the round didn't time\\n   * out and was completed regularly.\\n   * @dev Note that for in-progress rounds (i.e. rounds that haven't yet\\n   * received maxSubmissions) answer and updatedAt may change between queries.\\n   */\\n   function latestRoundData()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return getRoundData(latestRoundId);\\n  }\\n\\n\\n  /**\\n   * @notice query the available amount of LINK for an oracle to withdraw\\n   */\\n  function withdrawablePayment(address _oracle)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return oracles[_oracle].withdrawable;\\n  }\\n\\n  /**\\n   * @notice transfers the oracle's LINK to another address. Can only be called\\n   * by the oracle's admin.\\n   * @param _oracle is the oracle whose LINK is transferred\\n   * @param _recipient is the address to send the LINK to\\n   * @param _amount is the amount of LINK to send\\n   */\\n  function withdrawPayment(address _oracle, address _recipient, uint256 _amount)\\n    external\\n  {\\n    require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n\\n    // Safe to downcast _amount because the total amount of LINK is less than 2^128.\\n    uint128 amount = uint128(_amount);\\n    uint128 available = oracles[_oracle].withdrawable;\\n    require(available >= amount, \\\"insufficient withdrawable funds\\\");\\n\\n    oracles[_oracle].withdrawable = available.sub(amount);\\n    recordedFunds.allocated = recordedFunds.allocated.sub(amount);\\n\\n    assert(linkToken.transfer(_recipient, uint256(amount)));\\n  }\\n\\n  /**\\n   * @notice transfers the owner's LINK to another address\\n   * @param _recipient is the address to send the LINK to\\n   * @param _amount is the amount of LINK to send\\n   */\\n  function withdrawFunds(address _recipient, uint256 _amount)\\n    external\\n    onlyOwner()\\n  {\\n    uint256 available = uint256(recordedFunds.available);\\n    require(available.sub(requiredReserve(paymentAmount)) >= _amount, \\\"insufficient reserve funds\\\");\\n    require(linkToken.transfer(_recipient, _amount), \\\"token transfer failed\\\");\\n    updateAvailableFunds();\\n  }\\n\\n  /**\\n   * @notice get the admin address of an oracle\\n   * @param _oracle is the address of the oracle whose admin is being queried\\n   */\\n  function getAdmin(address _oracle)\\n    external\\n    view\\n    returns (address)\\n  {\\n    return oracles[_oracle].admin;\\n  }\\n\\n  /**\\n   * @notice transfer the admin address for an oracle\\n   * @param _oracle is the address of the oracle whose admin is being transferred\\n   * @param _newAdmin is the new admin address\\n   */\\n  function transferAdmin(address _oracle, address _newAdmin)\\n    external\\n  {\\n    require(oracles[_oracle].admin == msg.sender, \\\"only callable by admin\\\");\\n    oracles[_oracle].pendingAdmin = _newAdmin;\\n\\n    emit OracleAdminUpdateRequested(_oracle, msg.sender, _newAdmin);\\n  }\\n\\n  /**\\n   * @notice accept the admin address transfer for an oracle\\n   * @param _oracle is the address of the oracle whose admin is being transferred\\n   */\\n  function acceptAdmin(address _oracle)\\n    external\\n  {\\n    require(oracles[_oracle].pendingAdmin == msg.sender, \\\"only callable by pending admin\\\");\\n    oracles[_oracle].pendingAdmin = address(0);\\n    oracles[_oracle].admin = msg.sender;\\n\\n    emit OracleAdminUpdated(_oracle, msg.sender);\\n  }\\n\\n  /**\\n   * @notice allows non-oracles to request a new round\\n   */\\n  function requestNewRound()\\n    external\\n    returns (uint80)\\n  {\\n    require(requesters[msg.sender].authorized, \\\"not authorized requester\\\");\\n\\n    uint32 current = reportingRoundId;\\n    require(rounds[current].updatedAt > 0 || timedOut(current), \\\"prev round must be supersedable\\\");\\n\\n    uint32 newRoundId = current.add(1);\\n    requesterInitializeNewRound(newRoundId);\\n    return newRoundId;\\n  }\\n\\n  /**\\n   * @notice allows the owner to specify new non-oracles to start new rounds\\n   * @param _requester is the address to set permissions for\\n   * @param _authorized is a boolean specifying whether they can start new rounds or not\\n   * @param _delay is the number of rounds the requester must wait before starting another round\\n   */\\n  function setRequesterPermissions(address _requester, bool _authorized, uint32 _delay)\\n    external\\n    onlyOwner()\\n  {\\n    if (requesters[_requester].authorized == _authorized) return;\\n\\n    if (_authorized) {\\n      requesters[_requester].authorized = _authorized;\\n      requesters[_requester].delay = _delay;\\n    } else {\\n      delete requesters[_requester];\\n    }\\n\\n    emit RequesterPermissionsSet(_requester, _authorized, _delay);\\n  }\\n\\n  /**\\n   * @notice called through LINK's transferAndCall to update available funds\\n   * in the same transaction as the funds were transferred to the aggregator\\n   * @param _data is mostly ignored. It is checked for length, to be sure\\n   * nothing strange is passed in.\\n   */\\n  function onTokenTransfer(address, uint256, bytes calldata _data)\\n    external\\n  {\\n    require(_data.length == 0, \\\"transfer doesn't accept calldata\\\");\\n    updateAvailableFunds();\\n  }\\n\\n  /**\\n   * @notice a method to provide all current info oracles need. Intended only\\n   * only to be callable by oracles. Not for use by contracts to read state.\\n   * @param _oracle the address to look up information for.\\n   */\\n  function oracleRoundState(address _oracle, uint32 _queriedRoundId)\\n    external\\n    view\\n    returns (\\n      bool _eligibleToSubmit,\\n      uint32 _roundId,\\n      int256 _latestSubmission,\\n      uint64 _startedAt,\\n      uint64 _timeout,\\n      uint128 _availableFunds,\\n      uint8 _oracleCount,\\n      uint128 _paymentAmount\\n    )\\n  {\\n    require(msg.sender == tx.origin, \\\"off-chain reading only\\\");\\n\\n    if (_queriedRoundId > 0) {\\n      Round storage round = rounds[_queriedRoundId];\\n      RoundDetails storage details = details[_queriedRoundId];\\n      return (\\n        eligibleForSpecificRound(_oracle, _queriedRoundId),\\n        _queriedRoundId,\\n        oracles[_oracle].latestSubmission,\\n        round.startedAt,\\n        details.timeout,\\n        recordedFunds.available,\\n        oracleCount(),\\n        (round.startedAt > 0 ? details.paymentAmount : paymentAmount)\\n      );\\n    } else {\\n      return oracleRoundStateSuggestRound(_oracle);\\n    }\\n  }\\n\\n  /**\\n   * @notice method to update the address which does external data validation.\\n   * @param _newValidator designates the address of the new validation contract.\\n   */\\n  function setValidator(address _newValidator)\\n    public\\n    onlyOwner()\\n  {\\n    address previous = address(validator);\\n\\n    if (previous != _newValidator) {\\n      validator = AggregatorValidatorInterface(_newValidator);\\n\\n      emit ValidatorUpdated(previous, _newValidator);\\n    }\\n  }\\n\\n\\n  /**\\n   * Private\\n   */\\n\\n  function initializeNewRound(uint32 _roundId)\\n    private\\n  {\\n    updateTimedOutRoundInfo(_roundId.sub(1));\\n\\n    reportingRoundId = _roundId;\\n    RoundDetails memory nextDetails = RoundDetails(\\n      new int256[](0),\\n      maxSubmissionCount,\\n      minSubmissionCount,\\n      timeout,\\n      paymentAmount\\n    );\\n    details[_roundId] = nextDetails;\\n    rounds[_roundId].startedAt = uint64(block.timestamp);\\n\\n    emit NewRound(_roundId, msg.sender, rounds[_roundId].startedAt);\\n  }\\n\\n  function oracleInitializeNewRound(uint32 _roundId)\\n    private\\n  {\\n    if (!newRound(_roundId)) return;\\n    uint256 lastStarted = oracles[msg.sender].lastStartedRound; // cache storage reads\\n    if (_roundId <= lastStarted + restartDelay && lastStarted != 0) return;\\n\\n    initializeNewRound(_roundId);\\n\\n    oracles[msg.sender].lastStartedRound = _roundId;\\n  }\\n\\n  function requesterInitializeNewRound(uint32 _roundId)\\n    private\\n  {\\n    if (!newRound(_roundId)) return;\\n    uint256 lastStarted = requesters[msg.sender].lastStartedRound; // cache storage reads\\n    require(_roundId > lastStarted + requesters[msg.sender].delay || lastStarted == 0, \\\"must delay requests\\\");\\n\\n    initializeNewRound(_roundId);\\n\\n    requesters[msg.sender].lastStartedRound = _roundId;\\n  }\\n\\n  function updateTimedOutRoundInfo(uint32 _roundId)\\n    private\\n  {\\n    if (!timedOut(_roundId)) return;\\n\\n    uint32 prevId = _roundId.sub(1);\\n    rounds[_roundId].answer = rounds[prevId].answer;\\n    rounds[_roundId].answeredInRound = rounds[prevId].answeredInRound;\\n    rounds[_roundId].updatedAt = uint64(block.timestamp);\\n\\n    delete details[_roundId];\\n  }\\n\\n  function eligibleForSpecificRound(address _oracle, uint32 _queriedRoundId)\\n    private\\n    view\\n    returns (bool _eligible)\\n  {\\n    if (rounds[_queriedRoundId].startedAt > 0) {\\n      return acceptingSubmissions(_queriedRoundId) && validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n    } else {\\n      return delayed(_oracle, _queriedRoundId) && validateOracleRound(_oracle, _queriedRoundId).length == 0;\\n    }\\n  }\\n\\n  function oracleRoundStateSuggestRound(address _oracle)\\n    private\\n    view\\n    returns (\\n      bool _eligibleToSubmit,\\n      uint32 _roundId,\\n      int256 _latestSubmission,\\n      uint64 _startedAt,\\n      uint64 _timeout,\\n      uint128 _availableFunds,\\n      uint8 _oracleCount,\\n      uint128 _paymentAmount\\n    )\\n  {\\n    Round storage round = rounds[0];\\n    OracleStatus storage oracle = oracles[_oracle];\\n\\n    bool shouldSupersede = oracle.lastReportedRound == reportingRoundId || !acceptingSubmissions(reportingRoundId);\\n    // Instead of nudging oracles to submit to the next round, the inclusion of\\n    // the shouldSupersede bool in the if condition pushes them towards\\n    // submitting in a currently open round.\\n    if (supersedable(reportingRoundId) && shouldSupersede) {\\n      _roundId = reportingRoundId.add(1);\\n      round = rounds[_roundId];\\n\\n      _paymentAmount = paymentAmount;\\n      _eligibleToSubmit = delayed(_oracle, _roundId);\\n    } else {\\n      _roundId = reportingRoundId;\\n      round = rounds[_roundId];\\n\\n      _paymentAmount = details[_roundId].paymentAmount;\\n      _eligibleToSubmit = acceptingSubmissions(_roundId);\\n    }\\n\\n    if (validateOracleRound(_oracle, _roundId).length != 0) {\\n      _eligibleToSubmit = false;\\n    }\\n\\n    return (\\n      _eligibleToSubmit,\\n      _roundId,\\n      oracle.latestSubmission,\\n      round.startedAt,\\n      details[_roundId].timeout,\\n      recordedFunds.available,\\n      oracleCount(),\\n      _paymentAmount\\n    );\\n  }\\n\\n  function updateRoundAnswer(uint32 _roundId)\\n    internal\\n    returns (bool, int256)\\n  {\\n    if (details[_roundId].submissions.length < details[_roundId].minSubmissions) {\\n      return (false, 0);\\n    }\\n\\n    int256 newAnswer = Median.calculateInplace(details[_roundId].submissions);\\n    rounds[_roundId].answer = newAnswer;\\n    rounds[_roundId].updatedAt = uint64(block.timestamp);\\n    rounds[_roundId].answeredInRound = _roundId;\\n    latestRoundId = _roundId;\\n\\n    emit AnswerUpdated(newAnswer, _roundId, now);\\n\\n    return (true, newAnswer);\\n  }\\n\\n  function validateAnswer(\\n    uint32 _roundId,\\n    int256 _newAnswer\\n  )\\n    private\\n  {\\n    AggregatorValidatorInterface av = validator; // cache storage reads\\n    if (address(av) == address(0)) return;\\n\\n    uint32 prevRound = _roundId.sub(1);\\n    uint32 prevAnswerRoundId = rounds[prevRound].answeredInRound;\\n    int256 prevRoundAnswer = rounds[prevRound].answer;\\n    // We do not want the validator to ever prevent reporting, so we limit its\\n    // gas usage and catch any errors that may arise.\\n    try av.validate{gas: VALIDATOR_GAS_LIMIT}(\\n      prevAnswerRoundId,\\n      prevRoundAnswer,\\n      _roundId,\\n      _newAnswer\\n    ) {} catch {}\\n  }\\n\\n  function payOracle(uint32 _roundId)\\n    private\\n  {\\n    uint128 payment = details[_roundId].paymentAmount;\\n    Funds memory funds = recordedFunds;\\n    funds.available = funds.available.sub(payment);\\n    funds.allocated = funds.allocated.add(payment);\\n    recordedFunds = funds;\\n    oracles[msg.sender].withdrawable = oracles[msg.sender].withdrawable.add(payment);\\n\\n    emit AvailableFundsUpdated(funds.available);\\n  }\\n\\n  function recordSubmission(int256 _submission, uint32 _roundId)\\n    private\\n  {\\n    require(acceptingSubmissions(_roundId), \\\"round not accepting submissions\\\");\\n\\n    details[_roundId].submissions.push(_submission);\\n    oracles[msg.sender].lastReportedRound = _roundId;\\n    oracles[msg.sender].latestSubmission = _submission;\\n\\n    emit SubmissionReceived(_submission, _roundId, msg.sender);\\n  }\\n\\n  function deleteRoundDetails(uint32 _roundId)\\n    private\\n  {\\n    if (details[_roundId].submissions.length < details[_roundId].maxSubmissions) return;\\n\\n    delete details[_roundId];\\n  }\\n\\n  function timedOut(uint32 _roundId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    uint64 startedAt = rounds[_roundId].startedAt;\\n    uint32 roundTimeout = details[_roundId].timeout;\\n    return startedAt > 0 && roundTimeout > 0 && startedAt.add(roundTimeout) < block.timestamp;\\n  }\\n\\n  function getStartingRound(address _oracle)\\n    private\\n    view\\n    returns (uint32)\\n  {\\n    uint32 currentRound = reportingRoundId;\\n    if (currentRound != 0 && currentRound == oracles[_oracle].endingRound) {\\n      return currentRound;\\n    }\\n    return currentRound.add(1);\\n  }\\n\\n  function previousAndCurrentUnanswered(uint32 _roundId, uint32 _rrId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return _roundId.add(1) == _rrId && rounds[_rrId].updatedAt == 0;\\n  }\\n\\n  function requiredReserve(uint256 payment)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    return payment.mul(oracleCount()).mul(RESERVE_ROUNDS);\\n  }\\n\\n  function addOracle(\\n    address _oracle,\\n    address _admin\\n  )\\n    private\\n  {\\n    require(!oracleEnabled(_oracle), \\\"oracle already enabled\\\");\\n\\n    require(_admin != address(0), \\\"cannot set admin to 0\\\");\\n    require(oracles[_oracle].admin == address(0) || oracles[_oracle].admin == _admin, \\\"owner cannot overwrite admin\\\");\\n\\n    oracles[_oracle].startingRound = getStartingRound(_oracle);\\n    oracles[_oracle].endingRound = ROUND_MAX;\\n    oracles[_oracle].index = uint16(oracleAddresses.length);\\n    oracleAddresses.push(_oracle);\\n    oracles[_oracle].admin = _admin;\\n\\n    emit OraclePermissionsUpdated(_oracle, true);\\n    emit OracleAdminUpdated(_oracle, _admin);\\n  }\\n\\n  function removeOracle(\\n    address _oracle\\n  )\\n    private\\n  {\\n    require(oracleEnabled(_oracle), \\\"oracle not enabled\\\");\\n\\n    oracles[_oracle].endingRound = reportingRoundId.add(1);\\n    address tail = oracleAddresses[uint256(oracleCount()).sub(1)];\\n    uint16 index = oracles[_oracle].index;\\n    oracles[tail].index = index;\\n    delete oracles[_oracle].index;\\n    oracleAddresses[index] = tail;\\n    oracleAddresses.pop();\\n\\n    emit OraclePermissionsUpdated(_oracle, false);\\n  }\\n\\n  function validateOracleRound(address _oracle, uint32 _roundId)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    // cache storage reads\\n    uint32 startingRound = oracles[_oracle].startingRound;\\n    uint32 rrId = reportingRoundId;\\n\\n    if (startingRound == 0) return \\\"not enabled oracle\\\";\\n    if (startingRound > _roundId) return \\\"not yet enabled oracle\\\";\\n    if (oracles[_oracle].endingRound < _roundId) return \\\"no longer allowed oracle\\\";\\n    if (oracles[_oracle].lastReportedRound >= _roundId) return \\\"cannot report on previous rounds\\\";\\n    if (_roundId != rrId && _roundId != rrId.add(1) && !previousAndCurrentUnanswered(_roundId, rrId)) return \\\"invalid round to report\\\";\\n    if (_roundId != 1 && !supersedable(_roundId.sub(1))) return \\\"previous round not supersedable\\\";\\n  }\\n\\n  function supersedable(uint32 _roundId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return rounds[_roundId].updatedAt > 0 || timedOut(_roundId);\\n  }\\n\\n  function oracleEnabled(address _oracle)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return oracles[_oracle].endingRound == ROUND_MAX;\\n  }\\n\\n  function acceptingSubmissions(uint32 _roundId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return details[_roundId].maxSubmissions != 0;\\n  }\\n\\n  function delayed(address _oracle, uint32 _roundId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    uint256 lastStarted = oracles[_oracle].lastStartedRound;\\n    return _roundId > lastStarted + restartDelay || lastStarted == 0;\\n  }\\n\\n  function newRound(uint32 _roundId)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return _roundId == reportingRoundId.add(1);\\n  }\\n\\n  function validRoundId(uint256 _roundId)\\n    private\\n    pure\\n    returns (bool)\\n  {\\n    return _roundId <= ROUND_MAX;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xde4988e0ba7573bd27e9aee10bf3ac62d6b3521032b60bcc8725f51b17826295\"},\"@chainlink/contracts/src/v0.6/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\nimport \\\"./SignedSafeMath.sol\\\";\\n\\nlibrary Median {\\n  using SignedSafeMath for int256;\\n\\n  int256 constant INT_MAX = 2**255-1;\\n\\n  /**\\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n   * array has an even number of elements.\\n   * @dev The list passed as an argument isn't modified.\\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n   * the runtime is O(n^2).\\n   * @param list The list of elements to compare\\n   */\\n  function calculate(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return calculateInplace(copy(list));\\n  }\\n\\n  /**\\n   * @notice See documentation for function calculate.\\n   * @dev The list passed as an argument may be permuted.\\n   */\\n  function calculateInplace(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    require(0 < list.length, \\\"list must not be empty\\\");\\n    uint256 len = list.length;\\n    uint256 middleIndex = len / 2;\\n    if (len % 2 == 0) {\\n      int256 median1;\\n      int256 median2;\\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n      return SignedSafeMath.avg(median1, median2);\\n    } else {\\n      return quickselect(list, 0, len - 1, middleIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Maximum length of list that shortSelectTwo can handle\\n   */\\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n  /**\\n   * @notice Select the k1-th and k2-th element from list of length at most 7\\n   * @dev Uses an optimal sorting network\\n   */\\n  function shortSelectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    private\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n    // for lists of length 7. Network layout is taken from\\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n    uint256 len = hi + 1 - lo;\\n    int256 x0 = list[lo + 0];\\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\\n\\n    uint256 index1 = k1 - lo;\\n    if (index1 == 0) {k1th = x0;}\\n    else if (index1 == 1) {k1th = x1;}\\n    else if (index1 == 2) {k1th = x2;}\\n    else if (index1 == 3) {k1th = x3;}\\n    else if (index1 == 4) {k1th = x4;}\\n    else if (index1 == 5) {k1th = x5;}\\n    else if (index1 == 6) {k1th = x6;}\\n    else {revert(\\\"k1 out of bounds\\\");}\\n\\n    uint256 index2 = k2 - lo;\\n    if (k1 == k2) {return (k1th, k1th);}\\n    else if (index2 == 0) {return (k1th, x0);}\\n    else if (index2 == 1) {return (k1th, x1);}\\n    else if (index2 == 2) {return (k1th, x2);}\\n    else if (index2 == 3) {return (k1th, x3);}\\n    else if (index2 == 4) {return (k1th, x4);}\\n    else if (index2 == 5) {return (k1th, x5);}\\n    else if (index2 == 6) {return (k1th, x6);}\\n    else {revert(\\\"k2 out of bounds\\\");}\\n  }\\n\\n  /**\\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n   * (inclusive). Modifies list in-place.\\n   */\\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\\n    private\\n    pure\\n    returns (int256 kth)\\n  {\\n    require(lo <= k);\\n    require(k <= hi);\\n    while (lo < hi) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        int256 ignore;\\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n        return kth;\\n      }\\n      uint256 pivotIndex = partition(list, lo, hi);\\n      if (k <= pivotIndex) {\\n        // since pivotIndex < (original hi passed to partition),\\n        // termination is guaranteed in this case\\n        hi = pivotIndex;\\n      } else {\\n        // since (original lo passed to partition) <= pivotIndex,\\n        // termination is guaranteed in this case\\n        lo = pivotIndex + 1;\\n      }\\n    }\\n    return list[lo];\\n  }\\n\\n  /**\\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n   * lo and hi (inclusive). Modifies list in-place.\\n   */\\n  function quickselectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    internal // for testing\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    require(k1 < k2);\\n    require(lo <= k1 && k1 <= hi);\\n    require(lo <= k2 && k2 <= hi);\\n\\n    while (true) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        return shortSelectTwo(list, lo, hi, k1, k2);\\n      }\\n      uint256 pivotIdx = partition(list, lo, hi);\\n      if (k2 <= pivotIdx) {\\n        hi = pivotIdx;\\n      } else if (pivotIdx < k1) {\\n        lo = pivotIdx + 1;\\n      } else {\\n        assert(k1 <= pivotIdx && pivotIdx < k2);\\n        k1th = quickselect(list, lo, pivotIdx, k1);\\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n        return (k1th, k2th);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\\n   * Returns an index i, such that:\\n   * - lo <= i < hi\\n   * - forall j in [lo, i]. list[j] <= list[i]\\n   * - forall j in [i, hi]. list[i] <= list[j]\\n   */\\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // We don't care about overflow of the addition, because it would require a list\\n    // larger than any feasible computer's memory.\\n    int256 pivot = list[(lo + hi) / 2];\\n    lo -= 1; // this can underflow. that's intentional.\\n    hi += 1;\\n    while (true) {\\n      do {\\n        lo += 1;\\n      } while (list[lo] < pivot);\\n      do {\\n        hi -= 1;\\n      } while (list[hi] > pivot);\\n      if (lo < hi) {\\n        (list[lo], list[hi]) = (list[hi], list[lo]);\\n      } else {\\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n        // in each loop iteration and\\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\\n        //   will achieve hi < orig_hi;\\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n        //   needed:\\n        //   - lo will have to stop at least once in the interval\\n        //     [orig_lo, (orig_lo + orig_hi)/2]\\n        //   - (orig_lo + orig_hi)/2 < orig_hi\\n        return hi;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Makes an in-memory copy of the array passed in\\n   * @param list Reference to the array to be copied\\n   */\\n  function copy(int256[] memory list)\\n    private\\n    pure\\n    returns(int256[] memory)\\n  {\\n    int256[] memory list2 = new int256[](list.length);\\n    for (uint256 i = 0; i < list.length; i++) {\\n      list2[i] = list[i];\\n    }\\n    return list2;\\n  }\\n}\\n\",\"keccak256\":\"0x844b85b7864a30e3c89227419ade06b1e2314f810025c50ad22e7cbe4eb90691\"},\"@chainlink/contracts/src/v0.6/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.6.0 <0.8.0;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x93c014d58b820cc7c081b4b604d939c21942296fe0c0cb0069ca4ee63d728bc6\"},\"@chainlink/contracts/src/v0.6/SafeMath128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 128 bit integers.\\n */\\nlibrary SafeMath128 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n    uint128 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint128 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint128 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint128 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x9253d0e9721a1a9415bb35fc4b44ac8e59515dca86c877661735b390719e01fd\"},\"@chainlink/contracts/src/v0.6/SafeMath32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 32 bit integers.\\n */\\nlibrary SafeMath32 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n    uint32 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint32 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint32 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint32 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0xd688bc13cc627233e51c3979879a68031aacebb7d28ba30360bb330e2ffb42d7\"},\"@chainlink/contracts/src/v0.6/SafeMath64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * This library is a version of Open Zeppelin's SafeMath, modified to support\\n * unsigned 64 bit integers.\\n */\\nlibrary SafeMath64 {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\\n    uint64 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint64 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint64 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint64 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0xaa9087ecb13ee356bd213152cd41e6a5e6aa9c3b2c9a5fec2ca5591cf5d715d6\"},\"@chainlink/contracts/src/v0.6/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary SignedSafeMath {\\n  int256 constant private _INT256_MIN = -2**255;\\n\\n  /**\\n   * @dev Multiplies two signed integers, reverts on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    int256 c = a * b;\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n    int256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two signed integers, reverts on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two signed integers, reverts on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Computes average of two signed integers, ensuring that the computation\\n   * doesn't overflow.\\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\\n   * avg(-3, -4) = -3\\n   */\\n  function avg(int256 _a, int256 _b)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n      return add(_a, _b) / 2;\\n    }\\n    int256 remainder = (_a % 2 + _b % 2) / 2;\\n    return add(add(_a / 2, _b / 2), remainder);\\n  }\\n}\\n\",\"keccak256\":\"0x1a4f6b94292a5cfb16e5eb56a4c0a4395c1c10353452bd54d15fe4526506d336\"},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x83d92824853687feb62da3e8dc773e1e0adc3267393e279acda02c6367037f56\"},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xd27c7958cc0447b90f98308345076ee7fc7e657a62e085db53b4b63d471cc765\"},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x7171939fd22c628f15406eda07bb4de4f0fda4808790f8334e5b9e1a7ca90f8a\"},\"@chainlink/contracts/src/v0.6/interfaces/AggregatorValidatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorValidatorInterface {\\n  function validate(\\n    uint256 previousRoundId,\\n    int256 previousAnswer,\\n    uint256 currentRoundId,\\n    int256 currentAnswer\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9403d756c0e628ea0886db03668ec0a9a9b8cb8c781a57da68d05fb5f1faf976\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"},\"contracts/aggregators/CustomFluxAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.6/FluxAggregator.sol\\\";\\r\\n\\r\\ncontract CustomFluxAggregator is FluxAggregator {\\r\\n    constructor(\\r\\n        address _link,\\r\\n        uint128 _paymentAmount,\\r\\n        uint32 _timeout,\\r\\n        address _validator,\\r\\n        int256 _minSubmissionValue,\\r\\n        int256 _maxSubmissionValue,\\r\\n        uint8 _decimals,\\r\\n        string memory _description\\r\\n    )\\r\\n        public\\r\\n        FluxAggregator(\\r\\n            _link,\\r\\n            _paymentAmount,\\r\\n            _timeout,\\r\\n            _validator,\\r\\n            _minSubmissionValue,\\r\\n            _maxSubmissionValue,\\r\\n            _decimals,\\r\\n            _description\\r\\n        )\\r\\n    {}\\r\\n}\\r\\n\",\"keccak256\":\"0xc755477b61035605c1d5dac433cf3e33da572a31fdc8c0cb4934abe48d773f00\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162004aec38038062004aec83398181016040526101008110156200003857600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a0180519651989a9799959894979396929591949391820192846401000000008211156200008857600080fd5b9083019060208201858111156200009e57600080fd5b8251640100000000811182820188101715620000b957600080fd5b82525081516020918201929091019080838360005b83811015620000e8578181015183820152602001620000ce565b50505050905090810190601f168015620001165780820380516001836020036101000a031916815260200191505b50604052505060008054336001600160a01b0319918216178255600280549091166001600160a01b038c1617905589915088908890889088908890889088906200016590889080808a62000237565b62000179856001600160e01b036200061516565b608084905260a08390526005805460ff191660ff84161790558051620001a7906006906020840190620007f9565b50620001c88663ffffffff1642620006df60201b62002ef91790919060201c565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6c80546001600160401b03929092166801000000000000000002600160401b600160801b0319909216919091179055506200089b9e505050505050505050505050505050565b6000546001600160a01b0316331462000297576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b6000620002ac6001600160e01b036200074216565b60ff1690508463ffffffff168463ffffffff16101562000313576040805162461bcd60e51b815260206004820152601960248201527f6d6178206d75737420657175616c2f657863656564206d696e00000000000000604482015290519081900360640190fd5b8363ffffffff168163ffffffff16101562000375576040805162461bcd60e51b815260206004820152601760248201527f6d61782063616e6e6f742065786365656420746f74616c000000000000000000604482015290519081900360640190fd5b63ffffffff811615806200039457508263ffffffff168163ffffffff16115b620003e6576040805162461bcd60e51b815260206004820152601960248201527f64656c61792063616e6e6f742065786365656420746f74616c00000000000000604482015290519081900360640190fd5b620004036001600160801b0387166001600160e01b036200074916565b600d546001600160801b0316101562000463576040805162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742066756e647320666f72207061796d656e740000604482015290519081900360640190fd5b6000620004786001600160e01b036200074216565b60ff161115620004de5760008563ffffffff1611620004de576040805162461bcd60e51b815260206004820152601a60248201527f6d696e206d7573742062652067726561746572207468616e2030000000000000604482015290519081900360640190fd5b85600460006101000a8154816001600160801b0302191690836001600160801b0316021790555084600460146101000a81548163ffffffff021916908363ffffffff16021790555083600460106101000a81548163ffffffff021916908363ffffffff16021790555082600460186101000a81548163ffffffff021916908363ffffffff160217905550816004601c6101000a81548163ffffffff021916908363ffffffff1602179055508363ffffffff168563ffffffff16600460009054906101000a90046001600160801b03166001600160801b03167f56800c9d1ed723511246614d15e58cfcde15b6a33c245b5c961b689c1890fd8f8686604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a4505050505050565b6000546001600160a01b0316331462000675576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b6003546001600160a01b039081169082168114620006db57600380546001600160a01b0319166001600160a01b0384811691821790925560405190918316907fcfac5dc75b8d9a7e074162f59d9adcd33da59f0fe8dfb21580db298fc0fdad0d90600090a35b5050565b60008282111562000737576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600c545b90565b60006200073c600262000780620007686001600160e01b036200074216565b60ff16856200079460201b620037221790919060201c565b6200079460201b620037221790919060201c565b600082620007a5575060006200073c565b82820282848281620007b357fe5b0414620007f25760405162461bcd60e51b815260040180806020018281038252602181526020018062004acb6021913960400191505060405180910390fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200083c57805160ff19168380011785556200086c565b828001600101855582156200086c579182015b828111156200086c5782518255916020019190600101906200084f565b506200087a9291506200087e565b5090565b6200074691905b808211156200087a576000815560010162000885565b60805160a051614202620008c960003980610a845280610d08525080610a0f528061190052506142026000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c8063668a0f0211610146578063a4c0ed36116100c3578063c937450011610087578063c9374500146108b7578063d4cc54e4146108bf578063e2e40317146108c7578063e9ee6eeb146108ed578063f2fde38b1461091b578063feaf968c1461094157610253565b8063a4c0ed36146107c6578063b5ab58dc14610849578063b633620c14610866578063c107532914610883578063c35905c6146108af57610253565b80638205bf6a1161010a5780638205bf6a1461069557806388aa80e71461069d5780638da5cb5b1461072f57806398e5b12a146107375780639a6fc8f51461075e57610253565b8063668a0f02146105f857806370dea79a146106005780637284e4161461060857806379ba5097146106855780637c2b0b211461068d57610253565b806340884c52116101d457806357970e931161019857806357970e931461059457806358609e441461059c578063613d8fcc146105a4578063628806ef146105ac57806364efb22b146105d257610253565b806340884c521461050057806346fcff4c146105585780634f8fc3b51461057c57806350d25bcd1461058457806354fd4d501461058c57610253565b8063357ebb021161021b578063357ebb021461031557806338aa4c72146103365780633969c20f146103805780633a5381b5146104a65780633d3d7714146104ca57610253565b80631327d3d814610258578063202ee0ed1461028057806320ed0275146102a357806323ca2903146102dd578063313ce567146102f7575b600080fd5b61027e6004803603602081101561026e57600080fd5b50356001600160a01b0316610949565b005b61027e6004803603604081101561029657600080fd5b50803590602001356109ff565b61027e600480360360608110156102b957600080fd5b5080356001600160a01b03169060208101351515906040013563ffffffff16610bd1565b6102e5610d06565b60408051918252519081900360200190f35b6102ff610d2a565b6040805160ff9092168252519081900360200190f35b61031d610d33565b6040805163ffffffff9092168252519081900360200190f35b61027e600480360360a081101561034c57600080fd5b506001600160801b038135169063ffffffff6020820135811691604081013582169160608201358116916080013516610d46565b61027e600480360360c081101561039657600080fd5b810190602081018135600160201b8111156103b057600080fd5b8201836020820111156103c257600080fd5b803590602001918460208302840111600160201b831117156103e357600080fd5b919390929091602081019035600160201b81111561040057600080fd5b82018360208201111561041257600080fd5b803590602001918460208302840111600160201b8311171561043357600080fd5b919390929091602081019035600160201b81111561045057600080fd5b82018360208201111561046257600080fd5b803590602001918460208302840111600160201b8311171561048357600080fd5b919350915063ffffffff81358116916020810135821691604090910135166110e9565b6104ae6112b1565b604080516001600160a01b039092168252519081900360200190f35b61027e600480360360608110156104e057600080fd5b506001600160a01b038135811691602081013590911690604001356112c0565b6105086114b3565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561054457818101518382015260200161052c565b505050509050019250505060405180910390f35b610560611516565b604080516001600160801b039092168252519081900360200190f35b61027e611525565b6102e561163c565b6102e561165e565b6104ae611663565b61031d611672565b6102ff611685565b61027e600480360360208110156105c257600080fd5b50356001600160a01b031661168b565b6104ae600480360360208110156105e857600080fd5b50356001600160a01b0316611771565b6102e561179b565b61031d6117ae565b6106106117c1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561064a578181015183820152602001610632565b50505050905090810190601f1680156106775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61027e61184f565b6102e56118fe565b6102e5611922565b6106cf600480360360408110156106b357600080fd5b5080356001600160a01b0316906020013563ffffffff16611957565b60408051981515895263ffffffff9097166020890152878701959095526001600160401b0393841660608801529190921660808601526001600160801b0391821660a086015260ff1660c08501521660e083015251908190036101000190f35b6104ae611ab7565b61073f611ac6565b6040805169ffffffffffffffffffff9092168252519081900360200190f35b6107876004803603602081101561077457600080fd5b503569ffffffffffffffffffff16611be5565b6040805169ffffffffffffffffffff96871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b61027e600480360360608110156107dc57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561080b57600080fd5b82018360208201111561081d57600080fd5b803590602001918460018302840111600160201b8311171561083e57600080fd5b509092509050611d1f565b6102e56004803603602081101561085f57600080fd5b5035611d80565b6102e56004803603602081101561087c57600080fd5b5035611db4565b61027e6004803603604081101561089957600080fd5b506001600160a01b038135169060200135611df3565b610560611f95565b61031d611fa4565b610560611fb7565b6102e5600480360360208110156108dd57600080fd5b50356001600160a01b0316611fcd565b61027e6004803603604081101561090357600080fd5b506001600160a01b0381358116916020013516611ff1565b61027e6004803603602081101561093157600080fd5b50356001600160a01b03166120d4565b610787612172565b6000546001600160a01b03163314610996576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6003546001600160a01b0390811690821681146109fb57600380546001600160a01b0319166001600160a01b0384811691821790925560405190918316907fcfac5dc75b8d9a7e074162f59d9adcd33da59f0fe8dfb21580db298fc0fdad0d90600090a35b5050565b6060610a0b33846121ac565b90507f0000000000000000000000000000000000000000000000000000000000000000821215610a82576040805162461bcd60e51b815260206004820152601e60248201527f76616c75652062656c6f77206d696e5375626d697373696f6e56616c75650000604482015290519081900360640190fd5b7f0000000000000000000000000000000000000000000000000000000000000000821315610af7576040805162461bcd60e51b815260206004820152601e60248201527f76616c75652061626f7665206d61785375626d697373696f6e56616c75650000604482015290519081900360640190fd5b8051819015610b845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b49578181015183820152602001610b31565b50505050905090810190601f168015610b765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610b8e8361244f565b610b9882846124e3565b600080610ba4856125bc565b91509150610bb185612714565b610bba85612857565b8115610bca57610bca85826128b6565b5050505050565b6000546001600160a01b03163314610c1e576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6001600160a01b0383166000908152600b602052604090205460ff1615158215151415610c4a57610d01565b8115610c8d576001600160a01b0383166000908152600b60205260409020805460ff19168315151764ffffffff00191661010063ffffffff841602179055610cb6565b6001600160a01b0383166000908152600b60205260409020805468ffffffffffffffffff191690555b60408051831515815263ffffffff8316602082015281516001600160a01b038616927fc3df5a754e002718f2e10804b99e6605e7c701d95cec9552c7680ca2b6f2820a928290030190a25b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1681565b600454600160c01b900463ffffffff1681565b6000546001600160a01b03163314610d93576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6000610d9d611685565b60ff1690508463ffffffff168463ffffffff161015610e03576040805162461bcd60e51b815260206004820152601960248201527f6d6178206d75737420657175616c2f657863656564206d696e00000000000000604482015290519081900360640190fd5b8363ffffffff168163ffffffff161015610e64576040805162461bcd60e51b815260206004820152601760248201527f6d61782063616e6e6f742065786365656420746f74616c000000000000000000604482015290519081900360640190fd5b63ffffffff81161580610e8257508263ffffffff168163ffffffff16115b610ed3576040805162461bcd60e51b815260206004820152601960248201527f64656c61792063616e6e6f742065786365656420746f74616c00000000000000604482015290519081900360640190fd5b610ee5866001600160801b03166129af565b600d546001600160801b03161015610f44576040805162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742066756e647320666f72207061796d656e740000604482015290519081900360640190fd5b6000610f4e611685565b60ff161115610fb25760008563ffffffff1611610fb2576040805162461bcd60e51b815260206004820152601a60248201527f6d696e206d7573742062652067726561746572207468616e2030000000000000604482015290519081900360640190fd5b85600460006101000a8154816001600160801b0302191690836001600160801b0316021790555084600460146101000a81548163ffffffff021916908363ffffffff16021790555083600460106101000a81548163ffffffff021916908363ffffffff16021790555082600460186101000a81548163ffffffff021916908363ffffffff160217905550816004601c6101000a81548163ffffffff021916908363ffffffff1602179055508363ffffffff168563ffffffff16600460009054906101000a90046001600160801b03166001600160801b03167f56800c9d1ed723511246614d15e58cfcde15b6a33c245b5c961b689c1890fd8f8686604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a4505050505050565b6000546001600160a01b03163314611136576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b60005b8881101561116d576111658a8a8381811061115057fe5b905060200201356001600160a01b03166129dd565b600101611139565b508584146111c2576040805162461bcd60e51b815260206004820181905260248201527f6e6565642073616d65206f7261636c6520616e642061646d696e20636f756e74604482015290519081900360640190fd5b604d6111df876111d0611685565b60ff169063ffffffff612bab16565b1115611228576040805162461bcd60e51b81526020600482015260136024820152721b585e081bdc9858db195cc8185b1b1bddd959606a1b604482015290519081900360640190fd5b60005b8681101561127b5761127388888381811061124257fe5b905060200201356001600160a01b031687878481811061125e57fe5b905060200201356001600160a01b0316612bfa565b60010161122b565b506004546112a6906001600160801b03811690859085908590600160e01b900463ffffffff16610d46565b505050505050505050565b6003546001600160a01b031681565b6001600160a01b03838116600090815260086020526040902060020154620100009004163314611330576040805162461bcd60e51b815260206004820152601660248201527537b7363c9031b0b63630b1363290313c9030b236b4b760511b604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604090205481906001600160801b039081169082168110156113ad576040805162461bcd60e51b815260206004820152601f60248201527f696e73756666696369656e7420776974686472617761626c652066756e647300604482015290519081900360640190fd5b6113c66001600160801b0382168363ffffffff612e8a16565b6001600160a01b038616600090815260086020526040902080546001600160801b0319166001600160801b03928316179055600d5461140e91600160801b9091041683612e8a565b600d80546001600160801b03928316600160801b029083161790556002546040805163a9059cbb60e01b81526001600160a01b03888116600483015293861660248201529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b505050506040513d60208110156114ab57600080fd5b5051610bca57fe5b6060600c80548060200260200160405190810160405280929190818152602001828054801561150b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114ed575b505050505090505b90565b600d546001600160801b031690565b61152d61405b565b50604080518082018252600d546001600160801b038082168352600160801b90910416602080830182905260025484516370a0823160e01b8152306004820152945193946000946115de94936001600160a01b03909316926370a082319260248082019391829003018186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d60208110156115d057600080fd5b50519063ffffffff612ef916565b82519091506001600160801b031681146109fb57600d80546001600160801b0319166001600160801b03831617905560405181907ffe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f90600090a25050565b600754600160201b900463ffffffff1660009081526009602052604090205490565b600381565b6002546001600160a01b031681565b600454600160801b900463ffffffff1681565b600c5490565b6001600160a01b038181166000908152600860205260409020600301541633146116fc576040805162461bcd60e51b815260206004820152601e60248201527f6f6e6c792063616c6c61626c652062792070656e64696e672061646d696e0000604482015290519081900360640190fd5b6001600160a01b0381166000818152600860205260408082206003810180546001600160a01b0319169055600201805462010000600160b01b031916336201000081029190911790915590519092917f0c5055390645c15a4be9a21b3f8d019153dcb4a0c125685da6eb84048e2fe90491a350565b6001600160a01b03808216600090815260086020526040902060020154620100009004165b919050565b600754600160201b900463ffffffff1690565b600454600160e01b900463ffffffff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156118475780601f1061181c57610100808354040283529160200191611847565b820191906000526020600020905b81548152906001019060200180831161182a57829003601f168201915b505050505081565b6001546001600160a01b031633146118a7576040805162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015290519081900360640190fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b7f000000000000000000000000000000000000000000000000000000000000000081565b600754600160201b900463ffffffff16600090815260096020526040902060010154600160401b90046001600160401b031690565b6000808080808080803332146119ad576040805162461bcd60e51b81526020600482015260166024820152756f66662d636861696e2072656164696e67206f6e6c7960501b604482015290519081900360640190fd5b63ffffffff891615611a905763ffffffff89166000908152600960209081526040808320600a9092529091206119e38c8c612f50565b6001600160a01b038d1660009081526008602052604090206001908101548482015491840154600d548f936001600160401b031691600160401b900463ffffffff16906001600160801b0316611a37611685565b60018901546001600160401b0316611a5a576004546001600160801b0316611a70565b6001880154600160601b90046001600160801b03165b8363ffffffff169350995099509950995099509950995099505050611aaa565b611a998a612fa5565b975097509750975097509750975097505b9295985092959890939650565b6000546001600160a01b031681565b336000908152600b602052604081205460ff16611b2a576040805162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a6564207265717565737465720000000000000000604482015290519081900360640190fd5b60075463ffffffff16600081815260096020526040902060010154600160401b90046001600160401b0316151580611b665750611b6681613170565b611bb7576040805162461bcd60e51b815260206004820152601f60248201527f7072657620726f756e64206d75737420626520737570657273656461626c6500604482015290519081900360640190fd5b6000611bce63ffffffff808416906001906131fb16565b9050611bd98161324c565b63ffffffff1691505090565b6000806000806000611bf5614072565b5063ffffffff8087166000908152600960209081526040918290208251608081018452815481526001909101546001600160401b0380821693830193909352600160401b810490921692810192909252600160801b90049091166060820181905215801590611c745750611c748769ffffffffffffffffffff1661331a565b6040518060400160405280600f81526020016e139bc819185d18481c1c995cd95b9d608a1b81525090611ce85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b49578181015183820152602001610b31565b50805160208201516040830151606090930151989991986001600160401b0391821698509216955063ffffffff9091169350915050565b8015611d72576040805162461bcd60e51b815260206004820181905260248201527f7472616e7366657220646f65736e2774206163636570742063616c6c64617461604482015290519081900360640190fd5b611d7a611525565b50505050565b6000611d8b8261331a565b15611dac575063ffffffff8116600090815260096020526040902054611796565b506000919050565b6000611dbf8261331a565b15611dac575063ffffffff8116600090815260096020526040902060010154600160401b90046001600160401b0316611796565b6000546001600160a01b03163314611e40576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b600d546004546001600160801b03918216918391611e6f91611e6291166129af565b839063ffffffff612ef916565b1015611ec2576040805162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420726573657276652066756e6473000000000000604482015290519081900360640190fd5b6002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611f1857600080fd5b505af1158015611f2c573d6000803e3d6000fd5b505050506040513d6020811015611f4257600080fd5b5051611f8d576040805162461bcd60e51b81526020600482015260156024820152741d1bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015290519081900360640190fd5b610d01611525565b6004546001600160801b031681565b600454600160a01b900463ffffffff1681565b600d54600160801b90046001600160801b031690565b6001600160a01b03166000908152600860205260409020546001600160801b031690565b6001600160a01b03828116600090815260086020526040902060020154620100009004163314612061576040805162461bcd60e51b815260206004820152601660248201527537b7363c9031b0b63630b1363290313c9030b236b4b760511b604482015290519081900360640190fd5b6001600160a01b0382811660008181526008602090815260409182902060030180546001600160a01b0319169486169485179055815133815290810193909352805191927fb79bf2e89c2d70dde91d2991fb1ea69b7e478061ad7c04ed5b02b96bc52b8104929081900390910190a25050565b6000546001600160a01b03163314612121576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080600080600061219b600760049054906101000a900463ffffffff1663ffffffff16611be5565b945094509450945094509091929394565b6001600160a01b03821660009081526008602052604090205460075460609163ffffffff600160801b909104811691168161221557604051806040016040528060128152602001716e6f7420656e61626c6564206f7261636c6560701b81525092505050612449565b8363ffffffff168263ffffffff16111561226157604051806040016040528060168152602001756e6f742079657420656e61626c6564206f7261636c6560501b81525092505050612449565b6001600160a01b03851660009081526008602052604090205463ffffffff808616600160a01b9092041610156122d0576040518060400160405280601881526020017f6e6f206c6f6e67657220616c6c6f776564206f7261636c65000000000000000081525092505050612449565b6001600160a01b03851660009081526008602052604090205463ffffffff808616600160c01b909204161061233e576040518060400160405280602081526020017f63616e6e6f74207265706f7274206f6e2070726576696f757320726f756e647381525092505050612449565b8063ffffffff168463ffffffff161415801561237a575061236a63ffffffff808316906001906131fb16565b63ffffffff168463ffffffff1614155b801561238d575061238b8482613324565b155b156123d1576040518060400160405280601781526020017f696e76616c696420726f756e6420746f207265706f727400000000000000000081525092505050612449565b8363ffffffff1660011415801561240257506124006123fb63ffffffff8087169060019061338416565b6133e7565b155b15612446576040518060400160405280601f81526020017f70726576696f757320726f756e64206e6f7420737570657273656461626c650081525092505050612449565b50505b92915050565b61245881613421565b612461576124e0565b3360009081526008602052604090205460045463ffffffff600160e01b909204821691600160c01b90910481168201908316118015906124a057508015155b156124ab57506124e0565b6124b482613452565b5033600090815260086020526040902080546001600160e01b0316600160e01b63ffffffff8416021790555b50565b6124ec81613605565b61253d576040805162461bcd60e51b815260206004820152601f60248201527f726f756e64206e6f7420616363657074696e67207375626d697373696f6e7300604482015290519081900360640190fd5b63ffffffff81166000818152600a6020908152604080832080546001808201835591855283852001879055338085526008909352818420805463ffffffff60c01b1916600160c01b8702178155018690555190929185917f92e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c9190a45050565b63ffffffff8082166000908152600a602052604081206001810154905491928392600160201b9092041611156125f75750600090508061270f565b63ffffffff83166000908152600a60209081526040808320805482518185028101850190935280835261265d9383018282801561265357602002820191906000526020600020905b81548152602001906001019080831161263f575b5050505050613625565b63ffffffff8516600081815260096020908152604091829020848155600101805467ffffffffffffffff60401b1916600160401b426001600160401b038116919091029190911763ffffffff60801b1916600160801b8602179091556007805467ffffffff000000001916600160201b860217905582519081529151939450919284927f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f928290030190a36001925090505b915091565b63ffffffff81166000908152600a6020526040902060010154600160601b90046001600160801b031661274561405b565b5060408051808201909152600d546001600160801b03808216808452600160801b90920416602083015261277f908363ffffffff612e8a16565b6001600160801b03908116825260208201516127a291168363ffffffff6136ce16565b6001600160801b0390811660208084018290528351600d8054600160801b9094029185166001600160801b031990941693909317841617909155336000908152600890915260409020546127fd91168363ffffffff6136ce16565b3360009081526008602052604080822080546001600160801b0319166001600160801b03948516179055835190519216917ffe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f9190a2505050565b63ffffffff8082166000908152600a602052604090206001810154905491161115612881576124e0565b63ffffffff81166000908152600a60205260408120906128a18282614099565b5060010180546001600160e01b031916905550565b6003546001600160a01b0316806128cd57506109fb565b60006128e463ffffffff8086169060019061338416565b63ffffffff808216600090815260096020908152604080832060018101549054825163beed9b5160e01b8152600160801b90920486166004830181905260248301829052958b166044830152606482018a90529151959650939490936001600160a01b0388169363beed9b5193620186a093608480850194929391928390030190829088803b15801561297657600080fd5b5087f19350505050801561299c57506040513d602081101561299757600080fd5b505160015b6129a5576129a7565b505b505050505050565b600061244960026129d16129c1611685565b859060ff1663ffffffff61372216565b9063ffffffff61372216565b6129e68161377b565b612a2c576040805162461bcd60e51b81526020600482015260126024820152711bdc9858db19481b9bdd08195b98589b195960721b604482015290519081900360640190fd5b600754612a459063ffffffff908116906001906131fb16565b6001600160a01b0382166000908152600860205260408120805463ffffffff93909316600160a01b0263ffffffff60a01b1990931692909217909155600c612a9f6001612a90611685565b60ff169063ffffffff612ef916565b81548110612aa957fe5b6000918252602080832091909101546001600160a01b0385811680855260089093526040808520600290810180549390941680875291862001805461ffff90931661ffff199384168117909155939094528154169055600c8054929350909183919083908110612b1557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c805480612b4e57fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516907f18dd09695e4fbdae8d1a5edb11221eb04564269c29a089b9753a6535c54ba92e908390a3505050565b600082820183811015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b9392505050565b612c038261377b565b15612c4e576040805162461bcd60e51b81526020600482015260166024820152751bdc9858db1948185b1c9958591e48195b98589b195960521b604482015290519081900360640190fd5b6001600160a01b038116612ca1576040805162461bcd60e51b8152602060048201526015602482015274063616e6e6f74207365742061646d696e20746f203605c1b604482015290519081900360640190fd5b6001600160a01b03828116600090815260086020526040902060020154620100009004161580612cf657506001600160a01b038281166000908152600860205260409020600201546201000090048116908216145b612d47576040805162461bcd60e51b815260206004820152601c60248201527f6f776e65722063616e6e6f74206f76657277726974652061646d696e00000000604482015290519081900360640190fd5b612d50826137a6565b6001600160a01b03808416600081815260086020526040808220805463ffffffff60a01b1963ffffffff97909716600160801b0263ffffffff60801b19909116179590951663ffffffff60a01b178555600c80546002909601805461ffff90971661ffff19909716969096178655805460018181019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916851790558383528554948716620100000262010000600160b01b0319909516949094179094559251919290917f18dd09695e4fbdae8d1a5edb11221eb04564269c29a089b9753a6535c54ba92e9190a3806001600160a01b0316826001600160a01b03167f0c5055390645c15a4be9a21b3f8d019153dcb4a0c125685da6eb84048e2fe90460405160405180910390a35050565b6000826001600160801b0316826001600160801b03161115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082821115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b63ffffffff81166000908152600960205260408120600101546001600160401b031615612f9b57612f8082613605565b8015612f945750612f9183836121ac565b51155b9050612449565b612f808383613809565b6001600160a01b0381166000908152600860205260408120600754815483928392839283928392839283927fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b929091849163ffffffff908116600160c01b90920416148061302257506007546130209063ffffffff16613605565b155b6007549091506130379063ffffffff166133e7565b80156130405750805b156130995760075461305e9063ffffffff908116906001906131fb16565b63ffffffff81166000908152600960205260409020600454919b506001600160801b03909116945092506130928c8b613809565b9a506130e3565b60075463ffffffff166000818152600960209081526040808320600a90925290912060010154919b50600160601b9091046001600160801b0316945092506130e08a613605565b9a505b6130ed8c8b6121ac565b51156130f85760009a505b6001808301548482015463ffffffff808e166000908152600a6020526040902090930154600d548f948f94936001600160401b031692600160401b900416906001600160801b0316613148611685565b8a8363ffffffff1693509a509a509a509a509a509a509a509a50505050919395975091939597565b63ffffffff8082166000908152600960209081526040808320600190810154600a909352908320015491926001600160401b0390911691600160401b90041681158015906131c4575060008163ffffffff16115b80156131f35750426131e86001600160401b03841663ffffffff8085169061385316565b6001600160401b0316105b949350505050565b600082820163ffffffff8085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b61325581613421565b61325e576124e0565b336000908152600b602052604090205463ffffffff6501000000000082048116916101009004811682019083161180613295575080155b6132dc576040805162461bcd60e51b81526020600482015260136024820152726d7573742064656c617920726571756573747360681b604482015290519081900360640190fd5b6132e582613452565b50336000908152600b60205260409020805463ffffffff8316650100000000000268ffffffff00000000001990911617905550565b63ffffffff101590565b60008163ffffffff1661334760018563ffffffff166131fb90919063ffffffff16565b63ffffffff16148015612bf357505063ffffffff16600090815260096020526040902060010154600160401b90046001600160401b031615919050565b60008263ffffffff168263ffffffff161115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b63ffffffff8116600090815260096020526040812060010154600160401b90046001600160401b0316151580612449575061244982613170565b60075460009061343d9063ffffffff908116906001906131fb16565b63ffffffff168263ffffffff16149050919050565b61346f61346a63ffffffff8084169060019061338416565b6138a7565b6007805463ffffffff191663ffffffff831617905561348c6140b7565b5060408051600060a0820181815260c083018452825260045463ffffffff600160801b82048116602080860191909152600160a01b8304821685870152600160e01b8304821660608601526001600160801b03909216608085015285168252600a8152929020815180519293849361350792849201906140e5565b5060208281015160019283018054604080870151606088015160809098015163ffffffff1990931663ffffffff9586161767ffffffff000000001916600160201b91861691909102176bffffffff00000000000000001916600160401b97851697909702969096176fffffffffffffffffffffffffffffffff60601b1916600160601b6001600160801b03909216919091021790558516600081815260098352849020909201805467ffffffffffffffff1916426001600160401b039081169190911791829055845191168152925133937f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027192908290030190a35050565b63ffffffff9081166000908152600a602052604090206001015416151590565b60008151600010613676576040805162461bcd60e51b81526020600482015260166024820152756c697374206d757374206e6f7420626520656d70747960501b604482015290519081900360640190fd5b815160028104600182166136b55760008061369b866000600187036001870387613969565b90925090506136aa8282613a47565b945050505050611796565b6136c58460006001850384613ab5565b92505050611796565b60008282016001600160801b038085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b60008261373157506000612449565b8282028284828161373e57fe5b0414612bf35760405162461bcd60e51b815260040180806020018281038252602181526020018061418c6021913960400191505060405180910390fd5b6001600160a01b031660009081526008602052604090205463ffffffff600160a01b90910481161490565b60075460009063ffffffff1680158015906137e857506001600160a01b03831660009081526008602052604090205463ffffffff828116600160a01b90920416145b156137f4579050611796565b612bf363ffffffff808316906001906131fb16565b6001600160a01b03821660009081526008602052604081205460045463ffffffff600160e01b909204821691600160c01b9091048116820190841611806131f35750159392505050565b60008282016001600160401b038085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b6138b081613170565b6138b9576124e0565b60006138d063ffffffff8084169060019061338416565b63ffffffff8181166000908152600960209081526040808320805488861685528285209081556001918201549101805463ffffffff60801b1916600160801b928390049096169091029490941767ffffffffffffffff60401b1916600160401b426001600160401b03160217909355600a90529081209192506139538282614099565b5060010180546001600160e01b03191690555050565b60008082841061397857600080fd5b8386111580156139885750848411155b61399157600080fd5b8286111580156139a15750848311155b6139aa57600080fd5b600786860310156139cb576139c28787878787613b46565b91509150613a3d565b60006139d8888888613f19565b90508084116139e957809550613a37565b848110156139fc57806001019650613a37565b808511158015613a0b57508381105b613a1157fe5b613a1d88888388613ab5565b9250613a2e88826001018887613ab5565b9150613a3d9050565b506139aa565b9550959350505050565b60008083128015613a585750600082135b80613a6e5750600083138015613a6e5750600082125b15613a8e576002613a7f8484613ff6565b81613a8657fe5b059050612449565b60006002808507818507010590506131f3613aaf6002860560028605613ff6565b82613ff6565b600081841115613ac457600080fd5b82821115613ad157600080fd5b82841015613b285760078484031015613afd576000613af38686868687613b46565b5091506131f39050565b6000613b0a868686613f19565b9050808311613b1b57809350613b22565b8060010194505b50613ad1565b848481518110613b3457fe5b60200260200101519050949350505050565b600080600086866001010390506000888860000181518110613b6457fe5b60200260200101519050600082600110613b85576001600160ff1b03613b9d565b898960010181518110613b9457fe5b60200260200101515b9050600083600210613bb6576001600160ff1b03613bce565b8a8a60020181518110613bc557fe5b60200260200101515b9050600084600310613be7576001600160ff1b03613bff565b8b8b60030181518110613bf657fe5b60200260200101515b9050600085600410613c18576001600160ff1b03613c30565b8c8c60040181518110613c2757fe5b60200260200101515b9050600086600510613c49576001600160ff1b03613c61565b8d8d60050181518110613c5857fe5b60200260200101515b9050600087600610613c7a576001600160ff1b03613c92565b8e8e60060181518110613c8957fe5b60200260200101515b905085871315613ca0579495945b83851315613cac579293925b81831315613cb8579091905b84871315613cc4579395935b83861315613cd0579294925b80831315613cda57915b84861315613ce6579394935b80821315613cf057905b82871315613cfc579195915b81861315613d08579094905b80851315613d1257935b82861315613d1e579194915b80841315613d2857925b82851315613d34579193915b81841315613d40579092905b82841315613d4c579192915b8d8c0380613d5c57879a50613e02565b8060011415613d6d57869a50613e02565b8060021415613d7e57859a50613e02565b8060031415613d8f57849a50613e02565b8060041415613da057839a50613e02565b8060051415613db157829a50613e02565b8060061415613dc257819a50613e02565b6040805162461bcd60e51b815260206004820152601060248201526f6b31206f7574206f6620626f756e647360801b604482015290519081900360640190fd5b8e8c038d8d1415613e2057508a9950613a3d98505050505050505050565b80613e375750969850613a3d975050505050505050565b8060011415613e525750959850613a3d975050505050505050565b8060021415613e6d5750949850613a3d975050505050505050565b8060031415613e885750939850613a3d975050505050505050565b8060041415613ea35750929850613a3d975050505050505050565b8060051415613ebe5750919850613a3d975050505050505050565b8060061415613ed95750909850613a3d975050505050505050565b6040805162461bcd60e51b815260206004820152601060248201526f6b32206f7574206f6620626f756e647360801b604482015290519081900360640190fd5b6000808460028585010481518110613f2d57fe5b602002602001015190506001840393506001830192505b60018401935080858581518110613f5757fe5b602002602001015112613f44575b60018303925080858481518110613f7857fe5b602002602001015113613f655782841015613fe857848381518110613f9957fe5b6020026020010151858581518110613fad57fe5b6020026020010151868681518110613fc157fe5b60200260200101878681518110613fd457fe5b602090810291909101019190915252613ff1565b82915050612bf3565b613f44565b600082820181831280159061400b5750838112155b80614020575060008312801561402057508381125b612bf35760405162461bcd60e51b815260040180806020018281038252602181526020018061414b6021913960400191505060405180910390fd5b604080518082019091526000808252602082015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b50805460008255906000526020600020908101906124e09190614130565b6040805160a08101825260608082526000602083018190529282018390528101829052608081019190915290565b828054828255906000526020600020908101928215614120579160200282015b82811115614120578251825591602001919060010190614105565b5061412c929150614130565b5090565b61151391905b8082111561412c576000815560010161413656fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a206164646974696f6e206f766572666c6f770000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f6e6c792063616c6c61626c65206279206f776e657200000000000000000000a26469706673582212209b8ae5fe364bec9026e74dad336e794e8a4fc5b10eb7f8e39766ab11e2d7c77264736f6c63430006060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c8063668a0f0211610146578063a4c0ed36116100c3578063c937450011610087578063c9374500146108b7578063d4cc54e4146108bf578063e2e40317146108c7578063e9ee6eeb146108ed578063f2fde38b1461091b578063feaf968c1461094157610253565b8063a4c0ed36146107c6578063b5ab58dc14610849578063b633620c14610866578063c107532914610883578063c35905c6146108af57610253565b80638205bf6a1161010a5780638205bf6a1461069557806388aa80e71461069d5780638da5cb5b1461072f57806398e5b12a146107375780639a6fc8f51461075e57610253565b8063668a0f02146105f857806370dea79a146106005780637284e4161461060857806379ba5097146106855780637c2b0b211461068d57610253565b806340884c52116101d457806357970e931161019857806357970e931461059457806358609e441461059c578063613d8fcc146105a4578063628806ef146105ac57806364efb22b146105d257610253565b806340884c521461050057806346fcff4c146105585780634f8fc3b51461057c57806350d25bcd1461058457806354fd4d501461058c57610253565b8063357ebb021161021b578063357ebb021461031557806338aa4c72146103365780633969c20f146103805780633a5381b5146104a65780633d3d7714146104ca57610253565b80631327d3d814610258578063202ee0ed1461028057806320ed0275146102a357806323ca2903146102dd578063313ce567146102f7575b600080fd5b61027e6004803603602081101561026e57600080fd5b50356001600160a01b0316610949565b005b61027e6004803603604081101561029657600080fd5b50803590602001356109ff565b61027e600480360360608110156102b957600080fd5b5080356001600160a01b03169060208101351515906040013563ffffffff16610bd1565b6102e5610d06565b60408051918252519081900360200190f35b6102ff610d2a565b6040805160ff9092168252519081900360200190f35b61031d610d33565b6040805163ffffffff9092168252519081900360200190f35b61027e600480360360a081101561034c57600080fd5b506001600160801b038135169063ffffffff6020820135811691604081013582169160608201358116916080013516610d46565b61027e600480360360c081101561039657600080fd5b810190602081018135600160201b8111156103b057600080fd5b8201836020820111156103c257600080fd5b803590602001918460208302840111600160201b831117156103e357600080fd5b919390929091602081019035600160201b81111561040057600080fd5b82018360208201111561041257600080fd5b803590602001918460208302840111600160201b8311171561043357600080fd5b919390929091602081019035600160201b81111561045057600080fd5b82018360208201111561046257600080fd5b803590602001918460208302840111600160201b8311171561048357600080fd5b919350915063ffffffff81358116916020810135821691604090910135166110e9565b6104ae6112b1565b604080516001600160a01b039092168252519081900360200190f35b61027e600480360360608110156104e057600080fd5b506001600160a01b038135811691602081013590911690604001356112c0565b6105086114b3565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561054457818101518382015260200161052c565b505050509050019250505060405180910390f35b610560611516565b604080516001600160801b039092168252519081900360200190f35b61027e611525565b6102e561163c565b6102e561165e565b6104ae611663565b61031d611672565b6102ff611685565b61027e600480360360208110156105c257600080fd5b50356001600160a01b031661168b565b6104ae600480360360208110156105e857600080fd5b50356001600160a01b0316611771565b6102e561179b565b61031d6117ae565b6106106117c1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561064a578181015183820152602001610632565b50505050905090810190601f1680156106775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61027e61184f565b6102e56118fe565b6102e5611922565b6106cf600480360360408110156106b357600080fd5b5080356001600160a01b0316906020013563ffffffff16611957565b60408051981515895263ffffffff9097166020890152878701959095526001600160401b0393841660608801529190921660808601526001600160801b0391821660a086015260ff1660c08501521660e083015251908190036101000190f35b6104ae611ab7565b61073f611ac6565b6040805169ffffffffffffffffffff9092168252519081900360200190f35b6107876004803603602081101561077457600080fd5b503569ffffffffffffffffffff16611be5565b6040805169ffffffffffffffffffff96871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b61027e600480360360608110156107dc57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561080b57600080fd5b82018360208201111561081d57600080fd5b803590602001918460018302840111600160201b8311171561083e57600080fd5b509092509050611d1f565b6102e56004803603602081101561085f57600080fd5b5035611d80565b6102e56004803603602081101561087c57600080fd5b5035611db4565b61027e6004803603604081101561089957600080fd5b506001600160a01b038135169060200135611df3565b610560611f95565b61031d611fa4565b610560611fb7565b6102e5600480360360208110156108dd57600080fd5b50356001600160a01b0316611fcd565b61027e6004803603604081101561090357600080fd5b506001600160a01b0381358116916020013516611ff1565b61027e6004803603602081101561093157600080fd5b50356001600160a01b03166120d4565b610787612172565b6000546001600160a01b03163314610996576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6003546001600160a01b0390811690821681146109fb57600380546001600160a01b0319166001600160a01b0384811691821790925560405190918316907fcfac5dc75b8d9a7e074162f59d9adcd33da59f0fe8dfb21580db298fc0fdad0d90600090a35b5050565b6060610a0b33846121ac565b90507f0000000000000000000000000000000000000000000000000000000000000000821215610a82576040805162461bcd60e51b815260206004820152601e60248201527f76616c75652062656c6f77206d696e5375626d697373696f6e56616c75650000604482015290519081900360640190fd5b7f0000000000000000000000000000000000000000000000000000000000000000821315610af7576040805162461bcd60e51b815260206004820152601e60248201527f76616c75652061626f7665206d61785375626d697373696f6e56616c75650000604482015290519081900360640190fd5b8051819015610b845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b49578181015183820152602001610b31565b50505050905090810190601f168015610b765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610b8e8361244f565b610b9882846124e3565b600080610ba4856125bc565b91509150610bb185612714565b610bba85612857565b8115610bca57610bca85826128b6565b5050505050565b6000546001600160a01b03163314610c1e576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6001600160a01b0383166000908152600b602052604090205460ff1615158215151415610c4a57610d01565b8115610c8d576001600160a01b0383166000908152600b60205260409020805460ff19168315151764ffffffff00191661010063ffffffff841602179055610cb6565b6001600160a01b0383166000908152600b60205260409020805468ffffffffffffffffff191690555b60408051831515815263ffffffff8316602082015281516001600160a01b038616927fc3df5a754e002718f2e10804b99e6605e7c701d95cec9552c7680ca2b6f2820a928290030190a25b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1681565b600454600160c01b900463ffffffff1681565b6000546001600160a01b03163314610d93576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b6000610d9d611685565b60ff1690508463ffffffff168463ffffffff161015610e03576040805162461bcd60e51b815260206004820152601960248201527f6d6178206d75737420657175616c2f657863656564206d696e00000000000000604482015290519081900360640190fd5b8363ffffffff168163ffffffff161015610e64576040805162461bcd60e51b815260206004820152601760248201527f6d61782063616e6e6f742065786365656420746f74616c000000000000000000604482015290519081900360640190fd5b63ffffffff81161580610e8257508263ffffffff168163ffffffff16115b610ed3576040805162461bcd60e51b815260206004820152601960248201527f64656c61792063616e6e6f742065786365656420746f74616c00000000000000604482015290519081900360640190fd5b610ee5866001600160801b03166129af565b600d546001600160801b03161015610f44576040805162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e742066756e647320666f72207061796d656e740000604482015290519081900360640190fd5b6000610f4e611685565b60ff161115610fb25760008563ffffffff1611610fb2576040805162461bcd60e51b815260206004820152601a60248201527f6d696e206d7573742062652067726561746572207468616e2030000000000000604482015290519081900360640190fd5b85600460006101000a8154816001600160801b0302191690836001600160801b0316021790555084600460146101000a81548163ffffffff021916908363ffffffff16021790555083600460106101000a81548163ffffffff021916908363ffffffff16021790555082600460186101000a81548163ffffffff021916908363ffffffff160217905550816004601c6101000a81548163ffffffff021916908363ffffffff1602179055508363ffffffff168563ffffffff16600460009054906101000a90046001600160801b03166001600160801b03167f56800c9d1ed723511246614d15e58cfcde15b6a33c245b5c961b689c1890fd8f8686604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390a4505050505050565b6000546001600160a01b03163314611136576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b60005b8881101561116d576111658a8a8381811061115057fe5b905060200201356001600160a01b03166129dd565b600101611139565b508584146111c2576040805162461bcd60e51b815260206004820181905260248201527f6e6565642073616d65206f7261636c6520616e642061646d696e20636f756e74604482015290519081900360640190fd5b604d6111df876111d0611685565b60ff169063ffffffff612bab16565b1115611228576040805162461bcd60e51b81526020600482015260136024820152721b585e081bdc9858db195cc8185b1b1bddd959606a1b604482015290519081900360640190fd5b60005b8681101561127b5761127388888381811061124257fe5b905060200201356001600160a01b031687878481811061125e57fe5b905060200201356001600160a01b0316612bfa565b60010161122b565b506004546112a6906001600160801b03811690859085908590600160e01b900463ffffffff16610d46565b505050505050505050565b6003546001600160a01b031681565b6001600160a01b03838116600090815260086020526040902060020154620100009004163314611330576040805162461bcd60e51b815260206004820152601660248201527537b7363c9031b0b63630b1363290313c9030b236b4b760511b604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604090205481906001600160801b039081169082168110156113ad576040805162461bcd60e51b815260206004820152601f60248201527f696e73756666696369656e7420776974686472617761626c652066756e647300604482015290519081900360640190fd5b6113c66001600160801b0382168363ffffffff612e8a16565b6001600160a01b038616600090815260086020526040902080546001600160801b0319166001600160801b03928316179055600d5461140e91600160801b9091041683612e8a565b600d80546001600160801b03928316600160801b029083161790556002546040805163a9059cbb60e01b81526001600160a01b03888116600483015293861660248201529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b505050506040513d60208110156114ab57600080fd5b5051610bca57fe5b6060600c80548060200260200160405190810160405280929190818152602001828054801561150b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114ed575b505050505090505b90565b600d546001600160801b031690565b61152d61405b565b50604080518082018252600d546001600160801b038082168352600160801b90910416602080830182905260025484516370a0823160e01b8152306004820152945193946000946115de94936001600160a01b03909316926370a082319260248082019391829003018186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d60208110156115d057600080fd5b50519063ffffffff612ef916565b82519091506001600160801b031681146109fb57600d80546001600160801b0319166001600160801b03831617905560405181907ffe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f90600090a25050565b600754600160201b900463ffffffff1660009081526009602052604090205490565b600381565b6002546001600160a01b031681565b600454600160801b900463ffffffff1681565b600c5490565b6001600160a01b038181166000908152600860205260409020600301541633146116fc576040805162461bcd60e51b815260206004820152601e60248201527f6f6e6c792063616c6c61626c652062792070656e64696e672061646d696e0000604482015290519081900360640190fd5b6001600160a01b0381166000818152600860205260408082206003810180546001600160a01b0319169055600201805462010000600160b01b031916336201000081029190911790915590519092917f0c5055390645c15a4be9a21b3f8d019153dcb4a0c125685da6eb84048e2fe90491a350565b6001600160a01b03808216600090815260086020526040902060020154620100009004165b919050565b600754600160201b900463ffffffff1690565b600454600160e01b900463ffffffff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156118475780601f1061181c57610100808354040283529160200191611847565b820191906000526020600020905b81548152906001019060200180831161182a57829003601f168201915b505050505081565b6001546001600160a01b031633146118a7576040805162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015290519081900360640190fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b7f000000000000000000000000000000000000000000000000000000000000000081565b600754600160201b900463ffffffff16600090815260096020526040902060010154600160401b90046001600160401b031690565b6000808080808080803332146119ad576040805162461bcd60e51b81526020600482015260166024820152756f66662d636861696e2072656164696e67206f6e6c7960501b604482015290519081900360640190fd5b63ffffffff891615611a905763ffffffff89166000908152600960209081526040808320600a9092529091206119e38c8c612f50565b6001600160a01b038d1660009081526008602052604090206001908101548482015491840154600d548f936001600160401b031691600160401b900463ffffffff16906001600160801b0316611a37611685565b60018901546001600160401b0316611a5a576004546001600160801b0316611a70565b6001880154600160601b90046001600160801b03165b8363ffffffff169350995099509950995099509950995099505050611aaa565b611a998a612fa5565b975097509750975097509750975097505b9295985092959890939650565b6000546001600160a01b031681565b336000908152600b602052604081205460ff16611b2a576040805162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a6564207265717565737465720000000000000000604482015290519081900360640190fd5b60075463ffffffff16600081815260096020526040902060010154600160401b90046001600160401b0316151580611b665750611b6681613170565b611bb7576040805162461bcd60e51b815260206004820152601f60248201527f7072657620726f756e64206d75737420626520737570657273656461626c6500604482015290519081900360640190fd5b6000611bce63ffffffff808416906001906131fb16565b9050611bd98161324c565b63ffffffff1691505090565b6000806000806000611bf5614072565b5063ffffffff8087166000908152600960209081526040918290208251608081018452815481526001909101546001600160401b0380821693830193909352600160401b810490921692810192909252600160801b90049091166060820181905215801590611c745750611c748769ffffffffffffffffffff1661331a565b6040518060400160405280600f81526020016e139bc819185d18481c1c995cd95b9d608a1b81525090611ce85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b49578181015183820152602001610b31565b50805160208201516040830151606090930151989991986001600160401b0391821698509216955063ffffffff9091169350915050565b8015611d72576040805162461bcd60e51b815260206004820181905260248201527f7472616e7366657220646f65736e2774206163636570742063616c6c64617461604482015290519081900360640190fd5b611d7a611525565b50505050565b6000611d8b8261331a565b15611dac575063ffffffff8116600090815260096020526040902054611796565b506000919050565b6000611dbf8261331a565b15611dac575063ffffffff8116600090815260096020526040902060010154600160401b90046001600160401b0316611796565b6000546001600160a01b03163314611e40576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b600d546004546001600160801b03918216918391611e6f91611e6291166129af565b839063ffffffff612ef916565b1015611ec2576040805162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420726573657276652066756e6473000000000000604482015290519081900360640190fd5b6002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611f1857600080fd5b505af1158015611f2c573d6000803e3d6000fd5b505050506040513d6020811015611f4257600080fd5b5051611f8d576040805162461bcd60e51b81526020600482015260156024820152741d1bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015290519081900360640190fd5b610d01611525565b6004546001600160801b031681565b600454600160a01b900463ffffffff1681565b600d54600160801b90046001600160801b031690565b6001600160a01b03166000908152600860205260409020546001600160801b031690565b6001600160a01b03828116600090815260086020526040902060020154620100009004163314612061576040805162461bcd60e51b815260206004820152601660248201527537b7363c9031b0b63630b1363290313c9030b236b4b760511b604482015290519081900360640190fd5b6001600160a01b0382811660008181526008602090815260409182902060030180546001600160a01b0319169486169485179055815133815290810193909352805191927fb79bf2e89c2d70dde91d2991fb1ea69b7e478061ad7c04ed5b02b96bc52b8104929081900390910190a25050565b6000546001600160a01b03163314612121576040805162461bcd60e51b815260206004820152601660248201526000805160206141ad833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080600080600061219b600760049054906101000a900463ffffffff1663ffffffff16611be5565b945094509450945094509091929394565b6001600160a01b03821660009081526008602052604090205460075460609163ffffffff600160801b909104811691168161221557604051806040016040528060128152602001716e6f7420656e61626c6564206f7261636c6560701b81525092505050612449565b8363ffffffff168263ffffffff16111561226157604051806040016040528060168152602001756e6f742079657420656e61626c6564206f7261636c6560501b81525092505050612449565b6001600160a01b03851660009081526008602052604090205463ffffffff808616600160a01b9092041610156122d0576040518060400160405280601881526020017f6e6f206c6f6e67657220616c6c6f776564206f7261636c65000000000000000081525092505050612449565b6001600160a01b03851660009081526008602052604090205463ffffffff808616600160c01b909204161061233e576040518060400160405280602081526020017f63616e6e6f74207265706f7274206f6e2070726576696f757320726f756e647381525092505050612449565b8063ffffffff168463ffffffff161415801561237a575061236a63ffffffff808316906001906131fb16565b63ffffffff168463ffffffff1614155b801561238d575061238b8482613324565b155b156123d1576040518060400160405280601781526020017f696e76616c696420726f756e6420746f207265706f727400000000000000000081525092505050612449565b8363ffffffff1660011415801561240257506124006123fb63ffffffff8087169060019061338416565b6133e7565b155b15612446576040518060400160405280601f81526020017f70726576696f757320726f756e64206e6f7420737570657273656461626c650081525092505050612449565b50505b92915050565b61245881613421565b612461576124e0565b3360009081526008602052604090205460045463ffffffff600160e01b909204821691600160c01b90910481168201908316118015906124a057508015155b156124ab57506124e0565b6124b482613452565b5033600090815260086020526040902080546001600160e01b0316600160e01b63ffffffff8416021790555b50565b6124ec81613605565b61253d576040805162461bcd60e51b815260206004820152601f60248201527f726f756e64206e6f7420616363657074696e67207375626d697373696f6e7300604482015290519081900360640190fd5b63ffffffff81166000818152600a6020908152604080832080546001808201835591855283852001879055338085526008909352818420805463ffffffff60c01b1916600160c01b8702178155018690555190929185917f92e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c9190a45050565b63ffffffff8082166000908152600a602052604081206001810154905491928392600160201b9092041611156125f75750600090508061270f565b63ffffffff83166000908152600a60209081526040808320805482518185028101850190935280835261265d9383018282801561265357602002820191906000526020600020905b81548152602001906001019080831161263f575b5050505050613625565b63ffffffff8516600081815260096020908152604091829020848155600101805467ffffffffffffffff60401b1916600160401b426001600160401b038116919091029190911763ffffffff60801b1916600160801b8602179091556007805467ffffffff000000001916600160201b860217905582519081529151939450919284927f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f928290030190a36001925090505b915091565b63ffffffff81166000908152600a6020526040902060010154600160601b90046001600160801b031661274561405b565b5060408051808201909152600d546001600160801b03808216808452600160801b90920416602083015261277f908363ffffffff612e8a16565b6001600160801b03908116825260208201516127a291168363ffffffff6136ce16565b6001600160801b0390811660208084018290528351600d8054600160801b9094029185166001600160801b031990941693909317841617909155336000908152600890915260409020546127fd91168363ffffffff6136ce16565b3360009081526008602052604080822080546001600160801b0319166001600160801b03948516179055835190519216917ffe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f9190a2505050565b63ffffffff8082166000908152600a602052604090206001810154905491161115612881576124e0565b63ffffffff81166000908152600a60205260408120906128a18282614099565b5060010180546001600160e01b031916905550565b6003546001600160a01b0316806128cd57506109fb565b60006128e463ffffffff8086169060019061338416565b63ffffffff808216600090815260096020908152604080832060018101549054825163beed9b5160e01b8152600160801b90920486166004830181905260248301829052958b166044830152606482018a90529151959650939490936001600160a01b0388169363beed9b5193620186a093608480850194929391928390030190829088803b15801561297657600080fd5b5087f19350505050801561299c57506040513d602081101561299757600080fd5b505160015b6129a5576129a7565b505b505050505050565b600061244960026129d16129c1611685565b859060ff1663ffffffff61372216565b9063ffffffff61372216565b6129e68161377b565b612a2c576040805162461bcd60e51b81526020600482015260126024820152711bdc9858db19481b9bdd08195b98589b195960721b604482015290519081900360640190fd5b600754612a459063ffffffff908116906001906131fb16565b6001600160a01b0382166000908152600860205260408120805463ffffffff93909316600160a01b0263ffffffff60a01b1990931692909217909155600c612a9f6001612a90611685565b60ff169063ffffffff612ef916565b81548110612aa957fe5b6000918252602080832091909101546001600160a01b0385811680855260089093526040808520600290810180549390941680875291862001805461ffff90931661ffff199384168117909155939094528154169055600c8054929350909183919083908110612b1557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c805480612b4e57fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516907f18dd09695e4fbdae8d1a5edb11221eb04564269c29a089b9753a6535c54ba92e908390a3505050565b600082820183811015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b9392505050565b612c038261377b565b15612c4e576040805162461bcd60e51b81526020600482015260166024820152751bdc9858db1948185b1c9958591e48195b98589b195960521b604482015290519081900360640190fd5b6001600160a01b038116612ca1576040805162461bcd60e51b8152602060048201526015602482015274063616e6e6f74207365742061646d696e20746f203605c1b604482015290519081900360640190fd5b6001600160a01b03828116600090815260086020526040902060020154620100009004161580612cf657506001600160a01b038281166000908152600860205260409020600201546201000090048116908216145b612d47576040805162461bcd60e51b815260206004820152601c60248201527f6f776e65722063616e6e6f74206f76657277726974652061646d696e00000000604482015290519081900360640190fd5b612d50826137a6565b6001600160a01b03808416600081815260086020526040808220805463ffffffff60a01b1963ffffffff97909716600160801b0263ffffffff60801b19909116179590951663ffffffff60a01b178555600c80546002909601805461ffff90971661ffff19909716969096178655805460018181019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916851790558383528554948716620100000262010000600160b01b0319909516949094179094559251919290917f18dd09695e4fbdae8d1a5edb11221eb04564269c29a089b9753a6535c54ba92e9190a3806001600160a01b0316826001600160a01b03167f0c5055390645c15a4be9a21b3f8d019153dcb4a0c125685da6eb84048e2fe90460405160405180910390a35050565b6000826001600160801b0316826001600160801b03161115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082821115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b63ffffffff81166000908152600960205260408120600101546001600160401b031615612f9b57612f8082613605565b8015612f945750612f9183836121ac565b51155b9050612449565b612f808383613809565b6001600160a01b0381166000908152600860205260408120600754815483928392839283928392839283927fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b929091849163ffffffff908116600160c01b90920416148061302257506007546130209063ffffffff16613605565b155b6007549091506130379063ffffffff166133e7565b80156130405750805b156130995760075461305e9063ffffffff908116906001906131fb16565b63ffffffff81166000908152600960205260409020600454919b506001600160801b03909116945092506130928c8b613809565b9a506130e3565b60075463ffffffff166000818152600960209081526040808320600a90925290912060010154919b50600160601b9091046001600160801b0316945092506130e08a613605565b9a505b6130ed8c8b6121ac565b51156130f85760009a505b6001808301548482015463ffffffff808e166000908152600a6020526040902090930154600d548f948f94936001600160401b031692600160401b900416906001600160801b0316613148611685565b8a8363ffffffff1693509a509a509a509a509a509a509a509a50505050919395975091939597565b63ffffffff8082166000908152600960209081526040808320600190810154600a909352908320015491926001600160401b0390911691600160401b90041681158015906131c4575060008163ffffffff16115b80156131f35750426131e86001600160401b03841663ffffffff8085169061385316565b6001600160401b0316105b949350505050565b600082820163ffffffff8085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b61325581613421565b61325e576124e0565b336000908152600b602052604090205463ffffffff6501000000000082048116916101009004811682019083161180613295575080155b6132dc576040805162461bcd60e51b81526020600482015260136024820152726d7573742064656c617920726571756573747360681b604482015290519081900360640190fd5b6132e582613452565b50336000908152600b60205260409020805463ffffffff8316650100000000000268ffffffff00000000001990911617905550565b63ffffffff101590565b60008163ffffffff1661334760018563ffffffff166131fb90919063ffffffff16565b63ffffffff16148015612bf357505063ffffffff16600090815260096020526040902060010154600160401b90046001600160401b031615919050565b60008263ffffffff168263ffffffff161115612ef3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b63ffffffff8116600090815260096020526040812060010154600160401b90046001600160401b0316151580612449575061244982613170565b60075460009061343d9063ffffffff908116906001906131fb16565b63ffffffff168263ffffffff16149050919050565b61346f61346a63ffffffff8084169060019061338416565b6138a7565b6007805463ffffffff191663ffffffff831617905561348c6140b7565b5060408051600060a0820181815260c083018452825260045463ffffffff600160801b82048116602080860191909152600160a01b8304821685870152600160e01b8304821660608601526001600160801b03909216608085015285168252600a8152929020815180519293849361350792849201906140e5565b5060208281015160019283018054604080870151606088015160809098015163ffffffff1990931663ffffffff9586161767ffffffff000000001916600160201b91861691909102176bffffffff00000000000000001916600160401b97851697909702969096176fffffffffffffffffffffffffffffffff60601b1916600160601b6001600160801b03909216919091021790558516600081815260098352849020909201805467ffffffffffffffff1916426001600160401b039081169190911791829055845191168152925133937f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027192908290030190a35050565b63ffffffff9081166000908152600a602052604090206001015416151590565b60008151600010613676576040805162461bcd60e51b81526020600482015260166024820152756c697374206d757374206e6f7420626520656d70747960501b604482015290519081900360640190fd5b815160028104600182166136b55760008061369b866000600187036001870387613969565b90925090506136aa8282613a47565b945050505050611796565b6136c58460006001850384613ab5565b92505050611796565b60008282016001600160801b038085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b60008261373157506000612449565b8282028284828161373e57fe5b0414612bf35760405162461bcd60e51b815260040180806020018281038252602181526020018061418c6021913960400191505060405180910390fd5b6001600160a01b031660009081526008602052604090205463ffffffff600160a01b90910481161490565b60075460009063ffffffff1680158015906137e857506001600160a01b03831660009081526008602052604090205463ffffffff828116600160a01b90920416145b156137f4579050611796565b612bf363ffffffff808316906001906131fb16565b6001600160a01b03821660009081526008602052604081205460045463ffffffff600160e01b909204821691600160c01b9091048116820190841611806131f35750159392505050565b60008282016001600160401b038085169082161015612bf3576040805162461bcd60e51b815260206004820152601b602482015260008051602061416c833981519152604482015290519081900360640190fd5b6138b081613170565b6138b9576124e0565b60006138d063ffffffff8084169060019061338416565b63ffffffff8181166000908152600960209081526040808320805488861685528285209081556001918201549101805463ffffffff60801b1916600160801b928390049096169091029490941767ffffffffffffffff60401b1916600160401b426001600160401b03160217909355600a90529081209192506139538282614099565b5060010180546001600160e01b03191690555050565b60008082841061397857600080fd5b8386111580156139885750848411155b61399157600080fd5b8286111580156139a15750848311155b6139aa57600080fd5b600786860310156139cb576139c28787878787613b46565b91509150613a3d565b60006139d8888888613f19565b90508084116139e957809550613a37565b848110156139fc57806001019650613a37565b808511158015613a0b57508381105b613a1157fe5b613a1d88888388613ab5565b9250613a2e88826001018887613ab5565b9150613a3d9050565b506139aa565b9550959350505050565b60008083128015613a585750600082135b80613a6e5750600083138015613a6e5750600082125b15613a8e576002613a7f8484613ff6565b81613a8657fe5b059050612449565b60006002808507818507010590506131f3613aaf6002860560028605613ff6565b82613ff6565b600081841115613ac457600080fd5b82821115613ad157600080fd5b82841015613b285760078484031015613afd576000613af38686868687613b46565b5091506131f39050565b6000613b0a868686613f19565b9050808311613b1b57809350613b22565b8060010194505b50613ad1565b848481518110613b3457fe5b60200260200101519050949350505050565b600080600086866001010390506000888860000181518110613b6457fe5b60200260200101519050600082600110613b85576001600160ff1b03613b9d565b898960010181518110613b9457fe5b60200260200101515b9050600083600210613bb6576001600160ff1b03613bce565b8a8a60020181518110613bc557fe5b60200260200101515b9050600084600310613be7576001600160ff1b03613bff565b8b8b60030181518110613bf657fe5b60200260200101515b9050600085600410613c18576001600160ff1b03613c30565b8c8c60040181518110613c2757fe5b60200260200101515b9050600086600510613c49576001600160ff1b03613c61565b8d8d60050181518110613c5857fe5b60200260200101515b9050600087600610613c7a576001600160ff1b03613c92565b8e8e60060181518110613c8957fe5b60200260200101515b905085871315613ca0579495945b83851315613cac579293925b81831315613cb8579091905b84871315613cc4579395935b83861315613cd0579294925b80831315613cda57915b84861315613ce6579394935b80821315613cf057905b82871315613cfc579195915b81861315613d08579094905b80851315613d1257935b82861315613d1e579194915b80841315613d2857925b82851315613d34579193915b81841315613d40579092905b82841315613d4c579192915b8d8c0380613d5c57879a50613e02565b8060011415613d6d57869a50613e02565b8060021415613d7e57859a50613e02565b8060031415613d8f57849a50613e02565b8060041415613da057839a50613e02565b8060051415613db157829a50613e02565b8060061415613dc257819a50613e02565b6040805162461bcd60e51b815260206004820152601060248201526f6b31206f7574206f6620626f756e647360801b604482015290519081900360640190fd5b8e8c038d8d1415613e2057508a9950613a3d98505050505050505050565b80613e375750969850613a3d975050505050505050565b8060011415613e525750959850613a3d975050505050505050565b8060021415613e6d5750949850613a3d975050505050505050565b8060031415613e885750939850613a3d975050505050505050565b8060041415613ea35750929850613a3d975050505050505050565b8060051415613ebe5750919850613a3d975050505050505050565b8060061415613ed95750909850613a3d975050505050505050565b6040805162461bcd60e51b815260206004820152601060248201526f6b32206f7574206f6620626f756e647360801b604482015290519081900360640190fd5b6000808460028585010481518110613f2d57fe5b602002602001015190506001840393506001830192505b60018401935080858581518110613f5757fe5b602002602001015112613f44575b60018303925080858481518110613f7857fe5b602002602001015113613f655782841015613fe857848381518110613f9957fe5b6020026020010151858581518110613fad57fe5b6020026020010151868681518110613fc157fe5b60200260200101878681518110613fd457fe5b602090810291909101019190915252613ff1565b82915050612bf3565b613f44565b600082820181831280159061400b5750838112155b80614020575060008312801561402057508381125b612bf35760405162461bcd60e51b815260040180806020018281038252602181526020018061414b6021913960400191505060405180910390fd5b604080518082019091526000808252602082015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b50805460008255906000526020600020908101906124e09190614130565b6040805160a08101825260608082526000602083018190529282018390528101829052608081019190915290565b828054828255906000526020600020908101928215614120579160200282015b82811115614120578251825591602001919060010190614105565b5061412c929150614130565b5090565b61151391905b8082111561412c576000815560010161413656fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a206164646974696f6e206f766572666c6f770000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f6e6c792063616c6c61626c65206279206f776e657200000000000000000000a26469706673582212209b8ae5fe364bec9026e74dad336e794e8a4fc5b10eb7f8e39766ab11e2d7c77264736f6c63430006060033",
  "devdoc": {
    "methods": {
      "acceptAdmin(address)": {
        "params": {
          "_oracle": "is the address of the oracle whose admin is being transferred"
        }
      },
      "acceptOwnership()": {
        "details": "Allows an ownership transfer to be completed by the recipient."
      },
      "changeOracles(address[],address[],address[],uint32,uint32,uint32)": {
        "params": {
          "_added": "is the list of addresses for the new Oracles being added",
          "_addedAdmins": "is the admin addresses for the new respective _added list. Only this address is allowed to access the respective oracle's funds",
          "_maxSubmissions": "is the new maximum submission count for each round",
          "_minSubmissions": "is the new minimum submission count for each round",
          "_removed": "is the list of addresses for the new Oracles being removed",
          "_restartDelay": "is the number of rounds an Oracle has to wait before they can initiate a round"
        }
      },
      "getAdmin(address)": {
        "params": {
          "_oracle": "is the address of the oracle whose admin is being queried"
        }
      },
      "getAnswer(uint256)": {
        "details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "_roundId": "the round number to retrieve the answer for"
        }
      },
      "getRoundData(uint80)": {
        "details": "Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.",
        "params": {
          "_roundId": "the round ID to retrieve the round data for"
        },
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.",
          "roundId": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. This is 0 if the round hasn't been started yet.",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "getTimestamp(uint256)": {
        "details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
        "params": {
          "_roundId": "the round number to retrieve the updated timestamp for"
        }
      },
      "latestAnswer()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRound()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "latestRoundData()": {
        "details": "Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.",
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.",
          "roundId": "is the round ID for which data was retrieved",
          "startedAt": "is the timestamp when the round was started. This is 0 if the round hasn't been started yet.",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      },
      "latestTimestamp()": {
        "details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "params": {
          "_data": "is mostly ignored. It is checked for length, to be sure nothing strange is passed in."
        }
      },
      "oracleRoundState(address,uint32)": {
        "params": {
          "_oracle": "the address to look up information for."
        }
      },
      "setRequesterPermissions(address,bool,uint32)": {
        "params": {
          "_authorized": "is a boolean specifying whether they can start new rounds or not",
          "_delay": "is the number of rounds the requester must wait before starting another round",
          "_requester": "is the address to set permissions for"
        }
      },
      "setValidator(address)": {
        "params": {
          "_newValidator": "designates the address of the new validation contract."
        }
      },
      "submit(uint256,int256)": {
        "params": {
          "_roundId": "is the ID of the round this submission pertains to",
          "_submission": "is the updated data that the oracle is submitting"
        }
      },
      "transferAdmin(address,address)": {
        "params": {
          "_newAdmin": "is the new admin address",
          "_oracle": "is the address of the oracle whose admin is being transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)": {
        "params": {
          "_maxSubmissions": "is the new maximum submission count for each round",
          "_minSubmissions": "is the new minimum submission count for each round",
          "_paymentAmount": "is the payment amount for subsequent rounds",
          "_restartDelay": "is the number of rounds an Oracle has to wait before they can initiate a round"
        }
      },
      "withdrawFunds(address,uint256)": {
        "params": {
          "_amount": "is the amount of LINK to send",
          "_recipient": "is the address to send the LINK to"
        }
      },
      "withdrawPayment(address,address,uint256)": {
        "params": {
          "_amount": "is the amount of LINK to send",
          "_oracle": "is the oracle whose LINK is transferred",
          "_recipient": "is the address to send the LINK to"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "acceptAdmin(address)": {
        "notice": "accept the admin address transfer for an oracle"
      },
      "allocatedFunds()": {
        "notice": "the amount of payment yet to be withdrawn by oracles"
      },
      "availableFunds()": {
        "notice": "the amount of future funding available to oracles"
      },
      "changeOracles(address[],address[],address[],uint32,uint32,uint32)": {
        "notice": "called by the owner to remove and add new oracles as well as update the round related parameters that pertain to total oracle count"
      },
      "getAdmin(address)": {
        "notice": "get the admin address of an oracle"
      },
      "getAnswer(uint256)": {
        "notice": "get past rounds answers"
      },
      "getOracles()": {
        "notice": "returns an array of addresses containing the oracles on contract"
      },
      "getRoundData(uint80)": {
        "notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values."
      },
      "getTimestamp(uint256)": {
        "notice": "get timestamp when an answer was last updated"
      },
      "latestAnswer()": {
        "notice": "get the most recently reported answer"
      },
      "latestRound()": {
        "notice": "get the ID of the last updated round"
      },
      "latestRoundData()": {
        "notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Consumers are encouraged to use this more fully featured method over the \"legacy\" latestRound/ latestAnswer/latestTimestamp functions. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values."
      },
      "latestTimestamp()": {
        "notice": "get the most recent updated at timestamp"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "notice": "called through LINK's transferAndCall to update available funds in the same transaction as the funds were transferred to the aggregator"
      },
      "oracleCount()": {
        "notice": "returns the number of oracles"
      },
      "oracleRoundState(address,uint32)": {
        "notice": "a method to provide all current info oracles need. Intended only only to be callable by oracles. Not for use by contracts to read state."
      },
      "requestNewRound()": {
        "notice": "allows non-oracles to request a new round"
      },
      "setRequesterPermissions(address,bool,uint32)": {
        "notice": "allows the owner to specify new non-oracles to start new rounds"
      },
      "setValidator(address)": {
        "notice": "method to update the address which does external data validation."
      },
      "submit(uint256,int256)": {
        "notice": "called by oracles when they have witnessed a need to update"
      },
      "transferAdmin(address,address)": {
        "notice": "transfer the admin address for an oracle"
      },
      "updateAvailableFunds()": {
        "notice": "recalculate the amount of LINK available for payouts"
      },
      "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)": {
        "notice": "update the round and payment related parameters for subsequent rounds"
      },
      "withdrawFunds(address,uint256)": {
        "notice": "transfers the owner's LINK to another address"
      },
      "withdrawPayment(address,address,uint256)": {
        "notice": "transfers the oracle's LINK to another address. Can only be called by the oracle's admin."
      },
      "withdrawablePayment(address)": {
        "notice": "query the available amount of LINK for an oracle to withdraw"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3309,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3311,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 81,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "linkToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)4270"
      },
      {
        "astId": 83,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "validator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorValidatorInterface)4175"
      },
      {
        "astId": 85,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "paymentAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 87,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "maxSubmissionCount",
        "offset": 16,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 89,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "minSubmissionCount",
        "offset": 20,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 91,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "restartDelay",
        "offset": 24,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 93,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "timeout",
        "offset": 28,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 96,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 99,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "description",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 128,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "reportingRoundId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 130,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "latestRoundId",
        "offset": 4,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 134,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "oracles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(OracleStatus)67_storage)"
      },
      {
        "astId": 138,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "rounds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_struct(Round)36_storage)"
      },
      {
        "astId": 142,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "details",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint32,t_struct(RoundDetails)48_storage)"
      },
      {
        "astId": 146,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "requesters",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Requester)74_storage)"
      },
      {
        "astId": 149,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "oracleAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 151,
        "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
        "label": "recordedFunds",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Funds)79_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorValidatorInterface)4175": {
        "encoding": "inplace",
        "label": "contract AggregatorValidatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)4270": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(OracleStatus)67_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FluxAggregator.OracleStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleStatus)67_storage"
      },
      "t_mapping(t_address,t_struct(Requester)74_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FluxAggregator.Requester)",
        "numberOfBytes": "32",
        "value": "t_struct(Requester)74_storage"
      },
      "t_mapping(t_uint32,t_struct(Round)36_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FluxAggregator.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)36_storage"
      },
      "t_mapping(t_uint32,t_struct(RoundDetails)48_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FluxAggregator.RoundDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundDetails)48_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Funds)79_storage": {
        "encoding": "inplace",
        "label": "struct FluxAggregator.Funds",
        "members": [
          {
            "astId": 76,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "available",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 78,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "allocated",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OracleStatus)67_storage": {
        "encoding": "inplace",
        "label": "struct FluxAggregator.OracleStatus",
        "members": [
          {
            "astId": 50,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "withdrawable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 52,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "startingRound",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 54,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "endingRound",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 56,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "lastReportedRound",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 58,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "lastStartedRound",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 60,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "latestSubmission",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 62,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 64,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "admin",
            "offset": 2,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 66,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "pendingAdmin",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Requester)74_storage": {
        "encoding": "inplace",
        "label": "struct FluxAggregator.Requester",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "authorized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 71,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "delay",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 73,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "lastStartedRound",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Round)36_storage": {
        "encoding": "inplace",
        "label": "struct FluxAggregator.Round",
        "members": [
          {
            "astId": 29,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "answer",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 31,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "startedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 33,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "updatedAt",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 35,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "answeredInRound",
            "offset": 16,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoundDetails)48_storage": {
        "encoding": "inplace",
        "label": "struct FluxAggregator.RoundDetails",
        "members": [
          {
            "astId": 39,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "submissions",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_int256)dyn_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "maxSubmissions",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 43,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "minSubmissions",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 45,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "timeout",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 47,
            "contract": "contracts/aggregators/CustomFluxAggregator.sol:CustomFluxAggregator",
            "label": "paymentAmount",
            "offset": 12,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}